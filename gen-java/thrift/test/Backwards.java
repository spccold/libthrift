/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Backwards implements org.apache.thrift.TBase<Backwards, Backwards._Fields>, java.io.Serializable, Cloneable, Comparable<Backwards> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Backwards");

  private static final org.apache.thrift.protocol.TField FIRST_TAG2_FIELD_DESC = new org.apache.thrift.protocol.TField("first_tag2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SECOND_TAG1_FIELD_DESC = new org.apache.thrift.protocol.TField("second_tag1", org.apache.thrift.protocol.TType.I32, (short)1);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new BackwardsStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new BackwardsTupleSchemeFactory();

  public int first_tag2; // required
  public int second_tag1; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_TAG2((short)2, "first_tag2"),
    SECOND_TAG1((short)1, "second_tag1");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // FIRST_TAG2
          return FIRST_TAG2;
        case 1: // SECOND_TAG1
          return SECOND_TAG1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIRST_TAG2_ISSET_ID = 0;
  private static final int __SECOND_TAG1_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_TAG2, new org.apache.thrift.meta_data.FieldMetaData("first_tag2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECOND_TAG1, new org.apache.thrift.meta_data.FieldMetaData("second_tag1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Backwards.class, metaDataMap);
  }

  public Backwards() {
  }

  public Backwards(
    int first_tag2,
    int second_tag1)
  {
    this();
    this.first_tag2 = first_tag2;
    setFirst_tag2IsSet(true);
    this.second_tag1 = second_tag1;
    setSecond_tag1IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Backwards(Backwards other) {
    __isset_bitfield = other.__isset_bitfield;
    this.first_tag2 = other.first_tag2;
    this.second_tag1 = other.second_tag1;
  }

  public Backwards deepCopy() {
    return new Backwards(this);
  }

  @Override
  public void clear() {
    setFirst_tag2IsSet(false);
    this.first_tag2 = 0;
    setSecond_tag1IsSet(false);
    this.second_tag1 = 0;
  }

  public int getFirst_tag2() {
    return this.first_tag2;
  }

  public Backwards setFirst_tag2(int first_tag2) {
    this.first_tag2 = first_tag2;
    setFirst_tag2IsSet(true);
    return this;
  }

  public void unsetFirst_tag2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRST_TAG2_ISSET_ID);
  }

  /** Returns true if field first_tag2 is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_tag2() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRST_TAG2_ISSET_ID);
  }

  public void setFirst_tag2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRST_TAG2_ISSET_ID, value);
  }

  public int getSecond_tag1() {
    return this.second_tag1;
  }

  public Backwards setSecond_tag1(int second_tag1) {
    this.second_tag1 = second_tag1;
    setSecond_tag1IsSet(true);
    return this;
  }

  public void unsetSecond_tag1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECOND_TAG1_ISSET_ID);
  }

  /** Returns true if field second_tag1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSecond_tag1() {
    return EncodingUtils.testBit(__isset_bitfield, __SECOND_TAG1_ISSET_ID);
  }

  public void setSecond_tag1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECOND_TAG1_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_TAG2:
      if (value == null) {
        unsetFirst_tag2();
      } else {
        setFirst_tag2((Integer)value);
      }
      break;

    case SECOND_TAG1:
      if (value == null) {
        unsetSecond_tag1();
      } else {
        setSecond_tag1((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_TAG2:
      return getFirst_tag2();

    case SECOND_TAG1:
      return getSecond_tag1();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_TAG2:
      return isSetFirst_tag2();
    case SECOND_TAG1:
      return isSetSecond_tag1();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Backwards)
      return this.equals((Backwards)that);
    return false;
  }

  public boolean equals(Backwards that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_first_tag2 = true;
    boolean that_present_first_tag2 = true;
    if (this_present_first_tag2 || that_present_first_tag2) {
      if (!(this_present_first_tag2 && that_present_first_tag2))
        return false;
      if (this.first_tag2 != that.first_tag2)
        return false;
    }

    boolean this_present_second_tag1 = true;
    boolean that_present_second_tag1 = true;
    if (this_present_second_tag1 || that_present_second_tag1) {
      if (!(this_present_second_tag1 && that_present_second_tag1))
        return false;
      if (this.second_tag1 != that.second_tag1)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + first_tag2;

    hashCode = hashCode * 8191 + second_tag1;

    return hashCode;
  }

  @Override
  public int compareTo(Backwards other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirst_tag2()).compareTo(other.isSetFirst_tag2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_tag2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_tag2, other.first_tag2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecond_tag1()).compareTo(other.isSetSecond_tag1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecond_tag1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second_tag1, other.second_tag1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Backwards(");
    boolean first = true;

    sb.append("first_tag2:");
    sb.append(this.first_tag2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("second_tag1:");
    sb.append(this.second_tag1);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BackwardsStandardSchemeFactory implements SchemeFactory {
    public BackwardsStandardScheme getScheme() {
      return new BackwardsStandardScheme();
    }
  }

  private static class BackwardsStandardScheme extends StandardScheme<Backwards> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Backwards struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // FIRST_TAG2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.first_tag2 = iprot.readI32();
              struct.setFirst_tag2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // SECOND_TAG1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.second_tag1 = iprot.readI32();
              struct.setSecond_tag1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Backwards struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SECOND_TAG1_FIELD_DESC);
      oprot.writeI32(struct.second_tag1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_TAG2_FIELD_DESC);
      oprot.writeI32(struct.first_tag2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BackwardsTupleSchemeFactory implements SchemeFactory {
    public BackwardsTupleScheme getScheme() {
      return new BackwardsTupleScheme();
    }
  }

  private static class BackwardsTupleScheme extends TupleScheme<Backwards> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Backwards struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirst_tag2()) {
        optionals.set(0);
      }
      if (struct.isSetSecond_tag1()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFirst_tag2()) {
        oprot.writeI32(struct.first_tag2);
      }
      if (struct.isSetSecond_tag1()) {
        oprot.writeI32(struct.second_tag1);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Backwards struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.first_tag2 = iprot.readI32();
        struct.setFirst_tag2IsSet(true);
      }
      if (incoming.get(1)) {
        struct.second_tag1 = iprot.readI32();
        struct.setSecond_tag1IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

