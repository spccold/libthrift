/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Doubles implements org.apache.thrift.TBase<Doubles, Doubles._Fields>, java.io.Serializable, Cloneable, Comparable<Doubles> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Doubles");

  private static final org.apache.thrift.protocol.TField NAN_FIELD_DESC = new org.apache.thrift.protocol.TField("nan", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField INF_FIELD_DESC = new org.apache.thrift.protocol.TField("inf", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField NEGINF_FIELD_DESC = new org.apache.thrift.protocol.TField("neginf", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REPEATING_FIELD_DESC = new org.apache.thrift.protocol.TField("repeating", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BIG_FIELD_DESC = new org.apache.thrift.protocol.TField("big", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TINY_FIELD_DESC = new org.apache.thrift.protocol.TField("tiny", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField NEGZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("negzero", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new DoublesStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new DoublesTupleSchemeFactory();

  public double nan; // required
  public double inf; // required
  public double neginf; // required
  public double repeating; // required
  public double big; // required
  public double tiny; // required
  public double zero; // required
  public double negzero; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAN((short)1, "nan"),
    INF((short)2, "inf"),
    NEGINF((short)3, "neginf"),
    REPEATING((short)4, "repeating"),
    BIG((short)5, "big"),
    TINY((short)6, "tiny"),
    ZERO((short)7, "zero"),
    NEGZERO((short)8, "negzero");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAN
          return NAN;
        case 2: // INF
          return INF;
        case 3: // NEGINF
          return NEGINF;
        case 4: // REPEATING
          return REPEATING;
        case 5: // BIG
          return BIG;
        case 6: // TINY
          return TINY;
        case 7: // ZERO
          return ZERO;
        case 8: // NEGZERO
          return NEGZERO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NAN_ISSET_ID = 0;
  private static final int __INF_ISSET_ID = 1;
  private static final int __NEGINF_ISSET_ID = 2;
  private static final int __REPEATING_ISSET_ID = 3;
  private static final int __BIG_ISSET_ID = 4;
  private static final int __TINY_ISSET_ID = 5;
  private static final int __ZERO_ISSET_ID = 6;
  private static final int __NEGZERO_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAN, new org.apache.thrift.meta_data.FieldMetaData("nan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INF, new org.apache.thrift.meta_data.FieldMetaData("inf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEGINF, new org.apache.thrift.meta_data.FieldMetaData("neginf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPEATING, new org.apache.thrift.meta_data.FieldMetaData("repeating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIG, new org.apache.thrift.meta_data.FieldMetaData("big", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TINY, new org.apache.thrift.meta_data.FieldMetaData("tiny", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEGZERO, new org.apache.thrift.meta_data.FieldMetaData("negzero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Doubles.class, metaDataMap);
  }

  public Doubles() {
  }

  public Doubles(
    double nan,
    double inf,
    double neginf,
    double repeating,
    double big,
    double tiny,
    double zero,
    double negzero)
  {
    this();
    this.nan = nan;
    setNanIsSet(true);
    this.inf = inf;
    setInfIsSet(true);
    this.neginf = neginf;
    setNeginfIsSet(true);
    this.repeating = repeating;
    setRepeatingIsSet(true);
    this.big = big;
    setBigIsSet(true);
    this.tiny = tiny;
    setTinyIsSet(true);
    this.zero = zero;
    setZeroIsSet(true);
    this.negzero = negzero;
    setNegzeroIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Doubles(Doubles other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nan = other.nan;
    this.inf = other.inf;
    this.neginf = other.neginf;
    this.repeating = other.repeating;
    this.big = other.big;
    this.tiny = other.tiny;
    this.zero = other.zero;
    this.negzero = other.negzero;
  }

  public Doubles deepCopy() {
    return new Doubles(this);
  }

  @Override
  public void clear() {
    setNanIsSet(false);
    this.nan = 0.0;
    setInfIsSet(false);
    this.inf = 0.0;
    setNeginfIsSet(false);
    this.neginf = 0.0;
    setRepeatingIsSet(false);
    this.repeating = 0.0;
    setBigIsSet(false);
    this.big = 0.0;
    setTinyIsSet(false);
    this.tiny = 0.0;
    setZeroIsSet(false);
    this.zero = 0.0;
    setNegzeroIsSet(false);
    this.negzero = 0.0;
  }

  public double getNan() {
    return this.nan;
  }

  public Doubles setNan(double nan) {
    this.nan = nan;
    setNanIsSet(true);
    return this;
  }

  public void unsetNan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAN_ISSET_ID);
  }

  /** Returns true if field nan is set (has been assigned a value) and false otherwise */
  public boolean isSetNan() {
    return EncodingUtils.testBit(__isset_bitfield, __NAN_ISSET_ID);
  }

  public void setNanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAN_ISSET_ID, value);
  }

  public double getInf() {
    return this.inf;
  }

  public Doubles setInf(double inf) {
    this.inf = inf;
    setInfIsSet(true);
    return this;
  }

  public void unsetInf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INF_ISSET_ID);
  }

  /** Returns true if field inf is set (has been assigned a value) and false otherwise */
  public boolean isSetInf() {
    return EncodingUtils.testBit(__isset_bitfield, __INF_ISSET_ID);
  }

  public void setInfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INF_ISSET_ID, value);
  }

  public double getNeginf() {
    return this.neginf;
  }

  public Doubles setNeginf(double neginf) {
    this.neginf = neginf;
    setNeginfIsSet(true);
    return this;
  }

  public void unsetNeginf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEGINF_ISSET_ID);
  }

  /** Returns true if field neginf is set (has been assigned a value) and false otherwise */
  public boolean isSetNeginf() {
    return EncodingUtils.testBit(__isset_bitfield, __NEGINF_ISSET_ID);
  }

  public void setNeginfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEGINF_ISSET_ID, value);
  }

  public double getRepeating() {
    return this.repeating;
  }

  public Doubles setRepeating(double repeating) {
    this.repeating = repeating;
    setRepeatingIsSet(true);
    return this;
  }

  public void unsetRepeating() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATING_ISSET_ID);
  }

  /** Returns true if field repeating is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeating() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATING_ISSET_ID);
  }

  public void setRepeatingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATING_ISSET_ID, value);
  }

  public double getBig() {
    return this.big;
  }

  public Doubles setBig(double big) {
    this.big = big;
    setBigIsSet(true);
    return this;
  }

  public void unsetBig() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIG_ISSET_ID);
  }

  /** Returns true if field big is set (has been assigned a value) and false otherwise */
  public boolean isSetBig() {
    return EncodingUtils.testBit(__isset_bitfield, __BIG_ISSET_ID);
  }

  public void setBigIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIG_ISSET_ID, value);
  }

  public double getTiny() {
    return this.tiny;
  }

  public Doubles setTiny(double tiny) {
    this.tiny = tiny;
    setTinyIsSet(true);
    return this;
  }

  public void unsetTiny() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TINY_ISSET_ID);
  }

  /** Returns true if field tiny is set (has been assigned a value) and false otherwise */
  public boolean isSetTiny() {
    return EncodingUtils.testBit(__isset_bitfield, __TINY_ISSET_ID);
  }

  public void setTinyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TINY_ISSET_ID, value);
  }

  public double getZero() {
    return this.zero;
  }

  public Doubles setZero(double zero) {
    this.zero = zero;
    setZeroIsSet(true);
    return this;
  }

  public void unsetZero() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZERO_ISSET_ID);
  }

  /** Returns true if field zero is set (has been assigned a value) and false otherwise */
  public boolean isSetZero() {
    return EncodingUtils.testBit(__isset_bitfield, __ZERO_ISSET_ID);
  }

  public void setZeroIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZERO_ISSET_ID, value);
  }

  public double getNegzero() {
    return this.negzero;
  }

  public Doubles setNegzero(double negzero) {
    this.negzero = negzero;
    setNegzeroIsSet(true);
    return this;
  }

  public void unsetNegzero() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEGZERO_ISSET_ID);
  }

  /** Returns true if field negzero is set (has been assigned a value) and false otherwise */
  public boolean isSetNegzero() {
    return EncodingUtils.testBit(__isset_bitfield, __NEGZERO_ISSET_ID);
  }

  public void setNegzeroIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEGZERO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAN:
      if (value == null) {
        unsetNan();
      } else {
        setNan((Double)value);
      }
      break;

    case INF:
      if (value == null) {
        unsetInf();
      } else {
        setInf((Double)value);
      }
      break;

    case NEGINF:
      if (value == null) {
        unsetNeginf();
      } else {
        setNeginf((Double)value);
      }
      break;

    case REPEATING:
      if (value == null) {
        unsetRepeating();
      } else {
        setRepeating((Double)value);
      }
      break;

    case BIG:
      if (value == null) {
        unsetBig();
      } else {
        setBig((Double)value);
      }
      break;

    case TINY:
      if (value == null) {
        unsetTiny();
      } else {
        setTiny((Double)value);
      }
      break;

    case ZERO:
      if (value == null) {
        unsetZero();
      } else {
        setZero((Double)value);
      }
      break;

    case NEGZERO:
      if (value == null) {
        unsetNegzero();
      } else {
        setNegzero((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAN:
      return getNan();

    case INF:
      return getInf();

    case NEGINF:
      return getNeginf();

    case REPEATING:
      return getRepeating();

    case BIG:
      return getBig();

    case TINY:
      return getTiny();

    case ZERO:
      return getZero();

    case NEGZERO:
      return getNegzero();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAN:
      return isSetNan();
    case INF:
      return isSetInf();
    case NEGINF:
      return isSetNeginf();
    case REPEATING:
      return isSetRepeating();
    case BIG:
      return isSetBig();
    case TINY:
      return isSetTiny();
    case ZERO:
      return isSetZero();
    case NEGZERO:
      return isSetNegzero();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Doubles)
      return this.equals((Doubles)that);
    return false;
  }

  public boolean equals(Doubles that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nan = true;
    boolean that_present_nan = true;
    if (this_present_nan || that_present_nan) {
      if (!(this_present_nan && that_present_nan))
        return false;
      if (this.nan != that.nan)
        return false;
    }

    boolean this_present_inf = true;
    boolean that_present_inf = true;
    if (this_present_inf || that_present_inf) {
      if (!(this_present_inf && that_present_inf))
        return false;
      if (this.inf != that.inf)
        return false;
    }

    boolean this_present_neginf = true;
    boolean that_present_neginf = true;
    if (this_present_neginf || that_present_neginf) {
      if (!(this_present_neginf && that_present_neginf))
        return false;
      if (this.neginf != that.neginf)
        return false;
    }

    boolean this_present_repeating = true;
    boolean that_present_repeating = true;
    if (this_present_repeating || that_present_repeating) {
      if (!(this_present_repeating && that_present_repeating))
        return false;
      if (this.repeating != that.repeating)
        return false;
    }

    boolean this_present_big = true;
    boolean that_present_big = true;
    if (this_present_big || that_present_big) {
      if (!(this_present_big && that_present_big))
        return false;
      if (this.big != that.big)
        return false;
    }

    boolean this_present_tiny = true;
    boolean that_present_tiny = true;
    if (this_present_tiny || that_present_tiny) {
      if (!(this_present_tiny && that_present_tiny))
        return false;
      if (this.tiny != that.tiny)
        return false;
    }

    boolean this_present_zero = true;
    boolean that_present_zero = true;
    if (this_present_zero || that_present_zero) {
      if (!(this_present_zero && that_present_zero))
        return false;
      if (this.zero != that.zero)
        return false;
    }

    boolean this_present_negzero = true;
    boolean that_present_negzero = true;
    if (this_present_negzero || that_present_negzero) {
      if (!(this_present_negzero && that_present_negzero))
        return false;
      if (this.negzero != that.negzero)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nan);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inf);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(neginf);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(repeating);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(big);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tiny);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(zero);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(negzero);

    return hashCode;
  }

  @Override
  public int compareTo(Doubles other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNan()).compareTo(other.isSetNan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nan, other.nan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInf()).compareTo(other.isSetInf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inf, other.inf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeginf()).compareTo(other.isSetNeginf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeginf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neginf, other.neginf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeating()).compareTo(other.isSetRepeating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeating, other.repeating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBig()).compareTo(other.isSetBig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big, other.big);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiny()).compareTo(other.isSetTiny());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiny()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiny, other.tiny);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZero()).compareTo(other.isSetZero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNegzero()).compareTo(other.isSetNegzero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNegzero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.negzero, other.negzero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Doubles(");
    boolean first = true;

    sb.append("nan:");
    sb.append(this.nan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inf:");
    sb.append(this.inf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("neginf:");
    sb.append(this.neginf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repeating:");
    sb.append(this.repeating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("big:");
    sb.append(this.big);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tiny:");
    sb.append(this.tiny);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zero:");
    sb.append(this.zero);
    first = false;
    if (!first) sb.append(", ");
    sb.append("negzero:");
    sb.append(this.negzero);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DoublesStandardSchemeFactory implements SchemeFactory {
    public DoublesStandardScheme getScheme() {
      return new DoublesStandardScheme();
    }
  }

  private static class DoublesStandardScheme extends StandardScheme<Doubles> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Doubles struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.nan = iprot.readDouble();
              struct.setNanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inf = iprot.readDouble();
              struct.setInfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEGINF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.neginf = iprot.readDouble();
              struct.setNeginfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPEATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repeating = iprot.readDouble();
              struct.setRepeatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.big = iprot.readDouble();
              struct.setBigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TINY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tiny = iprot.readDouble();
              struct.setTinyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ZERO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.zero = iprot.readDouble();
              struct.setZeroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEGZERO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.negzero = iprot.readDouble();
              struct.setNegzeroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Doubles struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NAN_FIELD_DESC);
      oprot.writeDouble(struct.nan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INF_FIELD_DESC);
      oprot.writeDouble(struct.inf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEGINF_FIELD_DESC);
      oprot.writeDouble(struct.neginf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPEATING_FIELD_DESC);
      oprot.writeDouble(struct.repeating);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIG_FIELD_DESC);
      oprot.writeDouble(struct.big);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TINY_FIELD_DESC);
      oprot.writeDouble(struct.tiny);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZERO_FIELD_DESC);
      oprot.writeDouble(struct.zero);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEGZERO_FIELD_DESC);
      oprot.writeDouble(struct.negzero);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DoublesTupleSchemeFactory implements SchemeFactory {
    public DoublesTupleScheme getScheme() {
      return new DoublesTupleScheme();
    }
  }

  private static class DoublesTupleScheme extends TupleScheme<Doubles> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Doubles struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNan()) {
        optionals.set(0);
      }
      if (struct.isSetInf()) {
        optionals.set(1);
      }
      if (struct.isSetNeginf()) {
        optionals.set(2);
      }
      if (struct.isSetRepeating()) {
        optionals.set(3);
      }
      if (struct.isSetBig()) {
        optionals.set(4);
      }
      if (struct.isSetTiny()) {
        optionals.set(5);
      }
      if (struct.isSetZero()) {
        optionals.set(6);
      }
      if (struct.isSetNegzero()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetNan()) {
        oprot.writeDouble(struct.nan);
      }
      if (struct.isSetInf()) {
        oprot.writeDouble(struct.inf);
      }
      if (struct.isSetNeginf()) {
        oprot.writeDouble(struct.neginf);
      }
      if (struct.isSetRepeating()) {
        oprot.writeDouble(struct.repeating);
      }
      if (struct.isSetBig()) {
        oprot.writeDouble(struct.big);
      }
      if (struct.isSetTiny()) {
        oprot.writeDouble(struct.tiny);
      }
      if (struct.isSetZero()) {
        oprot.writeDouble(struct.zero);
      }
      if (struct.isSetNegzero()) {
        oprot.writeDouble(struct.negzero);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Doubles struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.nan = iprot.readDouble();
        struct.setNanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inf = iprot.readDouble();
        struct.setInfIsSet(true);
      }
      if (incoming.get(2)) {
        struct.neginf = iprot.readDouble();
        struct.setNeginfIsSet(true);
      }
      if (incoming.get(3)) {
        struct.repeating = iprot.readDouble();
        struct.setRepeatingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.big = iprot.readDouble();
        struct.setBigIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tiny = iprot.readDouble();
        struct.setTinyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.zero = iprot.readDouble();
        struct.setZeroIsSet(true);
      }
      if (incoming.get(7)) {
        struct.negzero = iprot.readDouble();
        struct.setNegzeroIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

