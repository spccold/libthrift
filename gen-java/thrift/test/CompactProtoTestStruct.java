/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class CompactProtoTestStruct implements org.apache.thrift.TBase<CompactProtoTestStruct, CompactProtoTestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<CompactProtoTestStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompactProtoTestStruct");

  private static final org.apache.thrift.protocol.TField A_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_byte", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField A_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("a_i16", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField A_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("a_i32", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField A_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("a_i64", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField A_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_double", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField A_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("a_string", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField A_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("a_binary", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TRUE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("true_field", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField FALSE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("false_field", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField EMPTY_STRUCT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("empty_struct_field", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_list", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField I16_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_list", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField I32_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_list", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField I64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_list", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField DOUBLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("double_list", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField STRING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("string_list", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField BINARY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_list", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField BOOLEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_list", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField STRUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_list", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField BYTE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_set", org.apache.thrift.protocol.TType.SET, (short)20);
  private static final org.apache.thrift.protocol.TField I16_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_set", org.apache.thrift.protocol.TType.SET, (short)21);
  private static final org.apache.thrift.protocol.TField I32_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_set", org.apache.thrift.protocol.TType.SET, (short)22);
  private static final org.apache.thrift.protocol.TField I64_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_set", org.apache.thrift.protocol.TType.SET, (short)23);
  private static final org.apache.thrift.protocol.TField DOUBLE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("double_set", org.apache.thrift.protocol.TType.SET, (short)24);
  private static final org.apache.thrift.protocol.TField STRING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("string_set", org.apache.thrift.protocol.TType.SET, (short)25);
  private static final org.apache.thrift.protocol.TField BINARY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_set", org.apache.thrift.protocol.TType.SET, (short)26);
  private static final org.apache.thrift.protocol.TField BOOLEAN_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_set", org.apache.thrift.protocol.TType.SET, (short)27);
  private static final org.apache.thrift.protocol.TField STRUCT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_set", org.apache.thrift.protocol.TType.SET, (short)28);
  private static final org.apache.thrift.protocol.TField BYTE_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_byte_map", org.apache.thrift.protocol.TType.MAP, (short)29);
  private static final org.apache.thrift.protocol.TField I16_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_byte_map", org.apache.thrift.protocol.TType.MAP, (short)30);
  private static final org.apache.thrift.protocol.TField I32_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_byte_map", org.apache.thrift.protocol.TType.MAP, (short)31);
  private static final org.apache.thrift.protocol.TField I64_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_byte_map", org.apache.thrift.protocol.TType.MAP, (short)32);
  private static final org.apache.thrift.protocol.TField DOUBLE_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("double_byte_map", org.apache.thrift.protocol.TType.MAP, (short)33);
  private static final org.apache.thrift.protocol.TField STRING_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("string_byte_map", org.apache.thrift.protocol.TType.MAP, (short)34);
  private static final org.apache.thrift.protocol.TField BINARY_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_byte_map", org.apache.thrift.protocol.TType.MAP, (short)35);
  private static final org.apache.thrift.protocol.TField BOOLEAN_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_byte_map", org.apache.thrift.protocol.TType.MAP, (short)36);
  private static final org.apache.thrift.protocol.TField BYTE_I16_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_i16_map", org.apache.thrift.protocol.TType.MAP, (short)37);
  private static final org.apache.thrift.protocol.TField BYTE_I32_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_i32_map", org.apache.thrift.protocol.TType.MAP, (short)38);
  private static final org.apache.thrift.protocol.TField BYTE_I64_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_i64_map", org.apache.thrift.protocol.TType.MAP, (short)39);
  private static final org.apache.thrift.protocol.TField BYTE_DOUBLE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_double_map", org.apache.thrift.protocol.TType.MAP, (short)40);
  private static final org.apache.thrift.protocol.TField BYTE_STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_string_map", org.apache.thrift.protocol.TType.MAP, (short)41);
  private static final org.apache.thrift.protocol.TField BYTE_BINARY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_binary_map", org.apache.thrift.protocol.TType.MAP, (short)42);
  private static final org.apache.thrift.protocol.TField BYTE_BOOLEAN_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_boolean_map", org.apache.thrift.protocol.TType.MAP, (short)43);
  private static final org.apache.thrift.protocol.TField LIST_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("list_byte_map", org.apache.thrift.protocol.TType.MAP, (short)44);
  private static final org.apache.thrift.protocol.TField SET_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("set_byte_map", org.apache.thrift.protocol.TType.MAP, (short)45);
  private static final org.apache.thrift.protocol.TField MAP_BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("map_byte_map", org.apache.thrift.protocol.TType.MAP, (short)46);
  private static final org.apache.thrift.protocol.TField BYTE_MAP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_map_map", org.apache.thrift.protocol.TType.MAP, (short)47);
  private static final org.apache.thrift.protocol.TField BYTE_SET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_set_map", org.apache.thrift.protocol.TType.MAP, (short)48);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_list_map", org.apache.thrift.protocol.TType.MAP, (short)49);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new CompactProtoTestStructStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new CompactProtoTestStructTupleSchemeFactory();

  public byte a_byte; // required
  public short a_i16; // required
  public int a_i32; // required
  public long a_i64; // required
  public double a_double; // required
  public String a_string; // required
  public ByteBuffer a_binary; // required
  public boolean true_field; // required
  public boolean false_field; // required
  public Empty empty_struct_field; // required
  public List<Byte> byte_list; // required
  public List<Short> i16_list; // required
  public List<Integer> i32_list; // required
  public List<Long> i64_list; // required
  public List<Double> double_list; // required
  public List<String> string_list; // required
  public List<ByteBuffer> binary_list; // required
  public List<Boolean> boolean_list; // required
  public List<Empty> struct_list; // required
  public Set<Byte> byte_set; // required
  public Set<Short> i16_set; // required
  public Set<Integer> i32_set; // required
  public Set<Long> i64_set; // required
  public Set<Double> double_set; // required
  public Set<String> string_set; // required
  public Set<ByteBuffer> binary_set; // required
  public Set<Boolean> boolean_set; // required
  public Set<Empty> struct_set; // required
  public Map<Byte,Byte> byte_byte_map; // required
  public Map<Short,Byte> i16_byte_map; // required
  public Map<Integer,Byte> i32_byte_map; // required
  public Map<Long,Byte> i64_byte_map; // required
  public Map<Double,Byte> double_byte_map; // required
  public Map<String,Byte> string_byte_map; // required
  public Map<ByteBuffer,Byte> binary_byte_map; // required
  public Map<Boolean,Byte> boolean_byte_map; // required
  public Map<Byte,Short> byte_i16_map; // required
  public Map<Byte,Integer> byte_i32_map; // required
  public Map<Byte,Long> byte_i64_map; // required
  public Map<Byte,Double> byte_double_map; // required
  public Map<Byte,String> byte_string_map; // required
  public Map<Byte,ByteBuffer> byte_binary_map; // required
  public Map<Byte,Boolean> byte_boolean_map; // required
  public Map<List<Byte>,Byte> list_byte_map; // required
  public Map<Set<Byte>,Byte> set_byte_map; // required
  public Map<Map<Byte,Byte>,Byte> map_byte_map; // required
  public Map<Byte,Map<Byte,Byte>> byte_map_map; // required
  public Map<Byte,Set<Byte>> byte_set_map; // required
  public Map<Byte,List<Byte>> byte_list_map; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A_BYTE((short)1, "a_byte"),
    A_I16((short)2, "a_i16"),
    A_I32((short)3, "a_i32"),
    A_I64((short)4, "a_i64"),
    A_DOUBLE((short)5, "a_double"),
    A_STRING((short)6, "a_string"),
    A_BINARY((short)7, "a_binary"),
    TRUE_FIELD((short)8, "true_field"),
    FALSE_FIELD((short)9, "false_field"),
    EMPTY_STRUCT_FIELD((short)10, "empty_struct_field"),
    BYTE_LIST((short)11, "byte_list"),
    I16_LIST((short)12, "i16_list"),
    I32_LIST((short)13, "i32_list"),
    I64_LIST((short)14, "i64_list"),
    DOUBLE_LIST((short)15, "double_list"),
    STRING_LIST((short)16, "string_list"),
    BINARY_LIST((short)17, "binary_list"),
    BOOLEAN_LIST((short)18, "boolean_list"),
    STRUCT_LIST((short)19, "struct_list"),
    BYTE_SET((short)20, "byte_set"),
    I16_SET((short)21, "i16_set"),
    I32_SET((short)22, "i32_set"),
    I64_SET((short)23, "i64_set"),
    DOUBLE_SET((short)24, "double_set"),
    STRING_SET((short)25, "string_set"),
    BINARY_SET((short)26, "binary_set"),
    BOOLEAN_SET((short)27, "boolean_set"),
    STRUCT_SET((short)28, "struct_set"),
    BYTE_BYTE_MAP((short)29, "byte_byte_map"),
    I16_BYTE_MAP((short)30, "i16_byte_map"),
    I32_BYTE_MAP((short)31, "i32_byte_map"),
    I64_BYTE_MAP((short)32, "i64_byte_map"),
    DOUBLE_BYTE_MAP((short)33, "double_byte_map"),
    STRING_BYTE_MAP((short)34, "string_byte_map"),
    BINARY_BYTE_MAP((short)35, "binary_byte_map"),
    BOOLEAN_BYTE_MAP((short)36, "boolean_byte_map"),
    BYTE_I16_MAP((short)37, "byte_i16_map"),
    BYTE_I32_MAP((short)38, "byte_i32_map"),
    BYTE_I64_MAP((short)39, "byte_i64_map"),
    BYTE_DOUBLE_MAP((short)40, "byte_double_map"),
    BYTE_STRING_MAP((short)41, "byte_string_map"),
    BYTE_BINARY_MAP((short)42, "byte_binary_map"),
    BYTE_BOOLEAN_MAP((short)43, "byte_boolean_map"),
    LIST_BYTE_MAP((short)44, "list_byte_map"),
    SET_BYTE_MAP((short)45, "set_byte_map"),
    MAP_BYTE_MAP((short)46, "map_byte_map"),
    BYTE_MAP_MAP((short)47, "byte_map_map"),
    BYTE_SET_MAP((short)48, "byte_set_map"),
    BYTE_LIST_MAP((short)49, "byte_list_map");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A_BYTE
          return A_BYTE;
        case 2: // A_I16
          return A_I16;
        case 3: // A_I32
          return A_I32;
        case 4: // A_I64
          return A_I64;
        case 5: // A_DOUBLE
          return A_DOUBLE;
        case 6: // A_STRING
          return A_STRING;
        case 7: // A_BINARY
          return A_BINARY;
        case 8: // TRUE_FIELD
          return TRUE_FIELD;
        case 9: // FALSE_FIELD
          return FALSE_FIELD;
        case 10: // EMPTY_STRUCT_FIELD
          return EMPTY_STRUCT_FIELD;
        case 11: // BYTE_LIST
          return BYTE_LIST;
        case 12: // I16_LIST
          return I16_LIST;
        case 13: // I32_LIST
          return I32_LIST;
        case 14: // I64_LIST
          return I64_LIST;
        case 15: // DOUBLE_LIST
          return DOUBLE_LIST;
        case 16: // STRING_LIST
          return STRING_LIST;
        case 17: // BINARY_LIST
          return BINARY_LIST;
        case 18: // BOOLEAN_LIST
          return BOOLEAN_LIST;
        case 19: // STRUCT_LIST
          return STRUCT_LIST;
        case 20: // BYTE_SET
          return BYTE_SET;
        case 21: // I16_SET
          return I16_SET;
        case 22: // I32_SET
          return I32_SET;
        case 23: // I64_SET
          return I64_SET;
        case 24: // DOUBLE_SET
          return DOUBLE_SET;
        case 25: // STRING_SET
          return STRING_SET;
        case 26: // BINARY_SET
          return BINARY_SET;
        case 27: // BOOLEAN_SET
          return BOOLEAN_SET;
        case 28: // STRUCT_SET
          return STRUCT_SET;
        case 29: // BYTE_BYTE_MAP
          return BYTE_BYTE_MAP;
        case 30: // I16_BYTE_MAP
          return I16_BYTE_MAP;
        case 31: // I32_BYTE_MAP
          return I32_BYTE_MAP;
        case 32: // I64_BYTE_MAP
          return I64_BYTE_MAP;
        case 33: // DOUBLE_BYTE_MAP
          return DOUBLE_BYTE_MAP;
        case 34: // STRING_BYTE_MAP
          return STRING_BYTE_MAP;
        case 35: // BINARY_BYTE_MAP
          return BINARY_BYTE_MAP;
        case 36: // BOOLEAN_BYTE_MAP
          return BOOLEAN_BYTE_MAP;
        case 37: // BYTE_I16_MAP
          return BYTE_I16_MAP;
        case 38: // BYTE_I32_MAP
          return BYTE_I32_MAP;
        case 39: // BYTE_I64_MAP
          return BYTE_I64_MAP;
        case 40: // BYTE_DOUBLE_MAP
          return BYTE_DOUBLE_MAP;
        case 41: // BYTE_STRING_MAP
          return BYTE_STRING_MAP;
        case 42: // BYTE_BINARY_MAP
          return BYTE_BINARY_MAP;
        case 43: // BYTE_BOOLEAN_MAP
          return BYTE_BOOLEAN_MAP;
        case 44: // LIST_BYTE_MAP
          return LIST_BYTE_MAP;
        case 45: // SET_BYTE_MAP
          return SET_BYTE_MAP;
        case 46: // MAP_BYTE_MAP
          return MAP_BYTE_MAP;
        case 47: // BYTE_MAP_MAP
          return BYTE_MAP_MAP;
        case 48: // BYTE_SET_MAP
          return BYTE_SET_MAP;
        case 49: // BYTE_LIST_MAP
          return BYTE_LIST_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A_BYTE_ISSET_ID = 0;
  private static final int __A_I16_ISSET_ID = 1;
  private static final int __A_I32_ISSET_ID = 2;
  private static final int __A_I64_ISSET_ID = 3;
  private static final int __A_DOUBLE_ISSET_ID = 4;
  private static final int __TRUE_FIELD_ISSET_ID = 5;
  private static final int __FALSE_FIELD_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A_BYTE, new org.apache.thrift.meta_data.FieldMetaData("a_byte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.A_I16, new org.apache.thrift.meta_data.FieldMetaData("a_i16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.A_I32, new org.apache.thrift.meta_data.FieldMetaData("a_i32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_I64, new org.apache.thrift.meta_data.FieldMetaData("a_i64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.A_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("a_double", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A_STRING, new org.apache.thrift.meta_data.FieldMetaData("a_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.A_BINARY, new org.apache.thrift.meta_data.FieldMetaData("a_binary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TRUE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("true_field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FALSE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("false_field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMPTY_STRUCT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("empty_struct_field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Empty.class)));
    tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byte_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I16_LIST, new org.apache.thrift.meta_data.FieldMetaData("i16_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.I32_LIST, new org.apache.thrift.meta_data.FieldMetaData("i32_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.I64_LIST, new org.apache.thrift.meta_data.FieldMetaData("i64_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("double_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_LIST, new org.apache.thrift.meta_data.FieldMetaData("string_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_LIST, new org.apache.thrift.meta_data.FieldMetaData("binary_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BOOLEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("boolean_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.STRUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("struct_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Empty.class))));
    tmpMap.put(_Fields.BYTE_SET, new org.apache.thrift.meta_data.FieldMetaData("byte_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I16_SET, new org.apache.thrift.meta_data.FieldMetaData("i16_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.I32_SET, new org.apache.thrift.meta_data.FieldMetaData("i32_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.I64_SET, new org.apache.thrift.meta_data.FieldMetaData("i64_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_SET, new org.apache.thrift.meta_data.FieldMetaData("double_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_SET, new org.apache.thrift.meta_data.FieldMetaData("string_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_SET, new org.apache.thrift.meta_data.FieldMetaData("binary_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BOOLEAN_SET, new org.apache.thrift.meta_data.FieldMetaData("boolean_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.STRUCT_SET, new org.apache.thrift.meta_data.FieldMetaData("struct_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Empty.class))));
    tmpMap.put(_Fields.BYTE_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I16_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("i16_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I32_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("i32_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I64_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("i64_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.DOUBLE_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("double_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.STRING_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("string_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.BINARY_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("binary_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.BOOLEAN_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("boolean_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.BYTE_I16_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_i16_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.BYTE_I32_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_i32_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BYTE_I64_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_i64_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BYTE_DOUBLE_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_double_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.BYTE_STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_string_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BYTE_BINARY_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_binary_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BYTE_BOOLEAN_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_boolean_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.LIST_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("list_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SET_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("set_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.MAP_BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("map_byte_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.BYTE_MAP_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_map_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)))));
    tmpMap.put(_Fields.BYTE_SET_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_set_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)))));
    tmpMap.put(_Fields.BYTE_LIST_MAP, new org.apache.thrift.meta_data.FieldMetaData("byte_list_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompactProtoTestStruct.class, metaDataMap);
  }

  public CompactProtoTestStruct() {
  }

  public CompactProtoTestStruct(
    byte a_byte,
    short a_i16,
    int a_i32,
    long a_i64,
    double a_double,
    String a_string,
    ByteBuffer a_binary,
    boolean true_field,
    boolean false_field,
    Empty empty_struct_field,
    List<Byte> byte_list,
    List<Short> i16_list,
    List<Integer> i32_list,
    List<Long> i64_list,
    List<Double> double_list,
    List<String> string_list,
    List<ByteBuffer> binary_list,
    List<Boolean> boolean_list,
    List<Empty> struct_list,
    Set<Byte> byte_set,
    Set<Short> i16_set,
    Set<Integer> i32_set,
    Set<Long> i64_set,
    Set<Double> double_set,
    Set<String> string_set,
    Set<ByteBuffer> binary_set,
    Set<Boolean> boolean_set,
    Set<Empty> struct_set,
    Map<Byte,Byte> byte_byte_map,
    Map<Short,Byte> i16_byte_map,
    Map<Integer,Byte> i32_byte_map,
    Map<Long,Byte> i64_byte_map,
    Map<Double,Byte> double_byte_map,
    Map<String,Byte> string_byte_map,
    Map<ByteBuffer,Byte> binary_byte_map,
    Map<Boolean,Byte> boolean_byte_map,
    Map<Byte,Short> byte_i16_map,
    Map<Byte,Integer> byte_i32_map,
    Map<Byte,Long> byte_i64_map,
    Map<Byte,Double> byte_double_map,
    Map<Byte,String> byte_string_map,
    Map<Byte,ByteBuffer> byte_binary_map,
    Map<Byte,Boolean> byte_boolean_map,
    Map<List<Byte>,Byte> list_byte_map,
    Map<Set<Byte>,Byte> set_byte_map,
    Map<Map<Byte,Byte>,Byte> map_byte_map,
    Map<Byte,Map<Byte,Byte>> byte_map_map,
    Map<Byte,Set<Byte>> byte_set_map,
    Map<Byte,List<Byte>> byte_list_map)
  {
    this();
    this.a_byte = a_byte;
    setA_byteIsSet(true);
    this.a_i16 = a_i16;
    setA_i16IsSet(true);
    this.a_i32 = a_i32;
    setA_i32IsSet(true);
    this.a_i64 = a_i64;
    setA_i64IsSet(true);
    this.a_double = a_double;
    setA_doubleIsSet(true);
    this.a_string = a_string;
    this.a_binary = org.apache.thrift.TBaseHelper.copyBinary(a_binary);
    this.true_field = true_field;
    setTrue_fieldIsSet(true);
    this.false_field = false_field;
    setFalse_fieldIsSet(true);
    this.empty_struct_field = empty_struct_field;
    this.byte_list = byte_list;
    this.i16_list = i16_list;
    this.i32_list = i32_list;
    this.i64_list = i64_list;
    this.double_list = double_list;
    this.string_list = string_list;
    this.binary_list = binary_list;
    this.boolean_list = boolean_list;
    this.struct_list = struct_list;
    this.byte_set = byte_set;
    this.i16_set = i16_set;
    this.i32_set = i32_set;
    this.i64_set = i64_set;
    this.double_set = double_set;
    this.string_set = string_set;
    this.binary_set = binary_set;
    this.boolean_set = boolean_set;
    this.struct_set = struct_set;
    this.byte_byte_map = byte_byte_map;
    this.i16_byte_map = i16_byte_map;
    this.i32_byte_map = i32_byte_map;
    this.i64_byte_map = i64_byte_map;
    this.double_byte_map = double_byte_map;
    this.string_byte_map = string_byte_map;
    this.binary_byte_map = binary_byte_map;
    this.boolean_byte_map = boolean_byte_map;
    this.byte_i16_map = byte_i16_map;
    this.byte_i32_map = byte_i32_map;
    this.byte_i64_map = byte_i64_map;
    this.byte_double_map = byte_double_map;
    this.byte_string_map = byte_string_map;
    this.byte_binary_map = byte_binary_map;
    this.byte_boolean_map = byte_boolean_map;
    this.list_byte_map = list_byte_map;
    this.set_byte_map = set_byte_map;
    this.map_byte_map = map_byte_map;
    this.byte_map_map = byte_map_map;
    this.byte_set_map = byte_set_map;
    this.byte_list_map = byte_list_map;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompactProtoTestStruct(CompactProtoTestStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a_byte = other.a_byte;
    this.a_i16 = other.a_i16;
    this.a_i32 = other.a_i32;
    this.a_i64 = other.a_i64;
    this.a_double = other.a_double;
    if (other.isSetA_string()) {
      this.a_string = other.a_string;
    }
    if (other.isSetA_binary()) {
      this.a_binary = org.apache.thrift.TBaseHelper.copyBinary(other.a_binary);
    }
    this.true_field = other.true_field;
    this.false_field = other.false_field;
    if (other.isSetEmpty_struct_field()) {
      this.empty_struct_field = new Empty(other.empty_struct_field);
    }
    if (other.isSetByte_list()) {
      List<Byte> __this__byte_list = new ArrayList<Byte>(other.byte_list);
      this.byte_list = __this__byte_list;
    }
    if (other.isSetI16_list()) {
      List<Short> __this__i16_list = new ArrayList<Short>(other.i16_list);
      this.i16_list = __this__i16_list;
    }
    if (other.isSetI32_list()) {
      List<Integer> __this__i32_list = new ArrayList<Integer>(other.i32_list);
      this.i32_list = __this__i32_list;
    }
    if (other.isSetI64_list()) {
      List<Long> __this__i64_list = new ArrayList<Long>(other.i64_list);
      this.i64_list = __this__i64_list;
    }
    if (other.isSetDouble_list()) {
      List<Double> __this__double_list = new ArrayList<Double>(other.double_list);
      this.double_list = __this__double_list;
    }
    if (other.isSetString_list()) {
      List<String> __this__string_list = new ArrayList<String>(other.string_list);
      this.string_list = __this__string_list;
    }
    if (other.isSetBinary_list()) {
      List<ByteBuffer> __this__binary_list = new ArrayList<ByteBuffer>(other.binary_list);
      this.binary_list = __this__binary_list;
    }
    if (other.isSetBoolean_list()) {
      List<Boolean> __this__boolean_list = new ArrayList<Boolean>(other.boolean_list);
      this.boolean_list = __this__boolean_list;
    }
    if (other.isSetStruct_list()) {
      List<Empty> __this__struct_list = new ArrayList<Empty>(other.struct_list.size());
      for (Empty other_element : other.struct_list) {
        __this__struct_list.add(new Empty(other_element));
      }
      this.struct_list = __this__struct_list;
    }
    if (other.isSetByte_set()) {
      Set<Byte> __this__byte_set = new HashSet<Byte>(other.byte_set);
      this.byte_set = __this__byte_set;
    }
    if (other.isSetI16_set()) {
      Set<Short> __this__i16_set = new HashSet<Short>(other.i16_set);
      this.i16_set = __this__i16_set;
    }
    if (other.isSetI32_set()) {
      Set<Integer> __this__i32_set = new HashSet<Integer>(other.i32_set);
      this.i32_set = __this__i32_set;
    }
    if (other.isSetI64_set()) {
      Set<Long> __this__i64_set = new HashSet<Long>(other.i64_set);
      this.i64_set = __this__i64_set;
    }
    if (other.isSetDouble_set()) {
      Set<Double> __this__double_set = new HashSet<Double>(other.double_set);
      this.double_set = __this__double_set;
    }
    if (other.isSetString_set()) {
      Set<String> __this__string_set = new HashSet<String>(other.string_set);
      this.string_set = __this__string_set;
    }
    if (other.isSetBinary_set()) {
      Set<ByteBuffer> __this__binary_set = new HashSet<ByteBuffer>(other.binary_set);
      this.binary_set = __this__binary_set;
    }
    if (other.isSetBoolean_set()) {
      Set<Boolean> __this__boolean_set = new HashSet<Boolean>(other.boolean_set);
      this.boolean_set = __this__boolean_set;
    }
    if (other.isSetStruct_set()) {
      Set<Empty> __this__struct_set = new HashSet<Empty>(other.struct_set.size());
      for (Empty other_element : other.struct_set) {
        __this__struct_set.add(new Empty(other_element));
      }
      this.struct_set = __this__struct_set;
    }
    if (other.isSetByte_byte_map()) {
      Map<Byte,Byte> __this__byte_byte_map = new HashMap<Byte,Byte>(other.byte_byte_map);
      this.byte_byte_map = __this__byte_byte_map;
    }
    if (other.isSetI16_byte_map()) {
      Map<Short,Byte> __this__i16_byte_map = new HashMap<Short,Byte>(other.i16_byte_map);
      this.i16_byte_map = __this__i16_byte_map;
    }
    if (other.isSetI32_byte_map()) {
      Map<Integer,Byte> __this__i32_byte_map = new HashMap<Integer,Byte>(other.i32_byte_map);
      this.i32_byte_map = __this__i32_byte_map;
    }
    if (other.isSetI64_byte_map()) {
      Map<Long,Byte> __this__i64_byte_map = new HashMap<Long,Byte>(other.i64_byte_map);
      this.i64_byte_map = __this__i64_byte_map;
    }
    if (other.isSetDouble_byte_map()) {
      Map<Double,Byte> __this__double_byte_map = new HashMap<Double,Byte>(other.double_byte_map);
      this.double_byte_map = __this__double_byte_map;
    }
    if (other.isSetString_byte_map()) {
      Map<String,Byte> __this__string_byte_map = new HashMap<String,Byte>(other.string_byte_map);
      this.string_byte_map = __this__string_byte_map;
    }
    if (other.isSetBinary_byte_map()) {
      Map<ByteBuffer,Byte> __this__binary_byte_map = new HashMap<ByteBuffer,Byte>(other.binary_byte_map);
      this.binary_byte_map = __this__binary_byte_map;
    }
    if (other.isSetBoolean_byte_map()) {
      Map<Boolean,Byte> __this__boolean_byte_map = new HashMap<Boolean,Byte>(other.boolean_byte_map);
      this.boolean_byte_map = __this__boolean_byte_map;
    }
    if (other.isSetByte_i16_map()) {
      Map<Byte,Short> __this__byte_i16_map = new HashMap<Byte,Short>(other.byte_i16_map);
      this.byte_i16_map = __this__byte_i16_map;
    }
    if (other.isSetByte_i32_map()) {
      Map<Byte,Integer> __this__byte_i32_map = new HashMap<Byte,Integer>(other.byte_i32_map);
      this.byte_i32_map = __this__byte_i32_map;
    }
    if (other.isSetByte_i64_map()) {
      Map<Byte,Long> __this__byte_i64_map = new HashMap<Byte,Long>(other.byte_i64_map);
      this.byte_i64_map = __this__byte_i64_map;
    }
    if (other.isSetByte_double_map()) {
      Map<Byte,Double> __this__byte_double_map = new HashMap<Byte,Double>(other.byte_double_map);
      this.byte_double_map = __this__byte_double_map;
    }
    if (other.isSetByte_string_map()) {
      Map<Byte,String> __this__byte_string_map = new HashMap<Byte,String>(other.byte_string_map);
      this.byte_string_map = __this__byte_string_map;
    }
    if (other.isSetByte_binary_map()) {
      Map<Byte,ByteBuffer> __this__byte_binary_map = new HashMap<Byte,ByteBuffer>(other.byte_binary_map);
      this.byte_binary_map = __this__byte_binary_map;
    }
    if (other.isSetByte_boolean_map()) {
      Map<Byte,Boolean> __this__byte_boolean_map = new HashMap<Byte,Boolean>(other.byte_boolean_map);
      this.byte_boolean_map = __this__byte_boolean_map;
    }
    if (other.isSetList_byte_map()) {
      Map<List<Byte>,Byte> __this__list_byte_map = new HashMap<List<Byte>,Byte>(other.list_byte_map.size());
      for (Map.Entry<List<Byte>, Byte> other_element : other.list_byte_map.entrySet()) {

        List<Byte> other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        List<Byte> __this__list_byte_map_copy_key = new ArrayList<Byte>(other_element_key);

        Byte __this__list_byte_map_copy_value = other_element_value;

        __this__list_byte_map.put(__this__list_byte_map_copy_key, __this__list_byte_map_copy_value);
      }
      this.list_byte_map = __this__list_byte_map;
    }
    if (other.isSetSet_byte_map()) {
      Map<Set<Byte>,Byte> __this__set_byte_map = new HashMap<Set<Byte>,Byte>(other.set_byte_map.size());
      for (Map.Entry<Set<Byte>, Byte> other_element : other.set_byte_map.entrySet()) {

        Set<Byte> other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        Set<Byte> __this__set_byte_map_copy_key = new HashSet<Byte>(other_element_key);

        Byte __this__set_byte_map_copy_value = other_element_value;

        __this__set_byte_map.put(__this__set_byte_map_copy_key, __this__set_byte_map_copy_value);
      }
      this.set_byte_map = __this__set_byte_map;
    }
    if (other.isSetMap_byte_map()) {
      Map<Map<Byte,Byte>,Byte> __this__map_byte_map = new HashMap<Map<Byte,Byte>,Byte>(other.map_byte_map.size());
      for (Map.Entry<Map<Byte,Byte>, Byte> other_element : other.map_byte_map.entrySet()) {

        Map<Byte,Byte> other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        Map<Byte,Byte> __this__map_byte_map_copy_key = new HashMap<Byte,Byte>(other_element_key);

        Byte __this__map_byte_map_copy_value = other_element_value;

        __this__map_byte_map.put(__this__map_byte_map_copy_key, __this__map_byte_map_copy_value);
      }
      this.map_byte_map = __this__map_byte_map;
    }
    if (other.isSetByte_map_map()) {
      Map<Byte,Map<Byte,Byte>> __this__byte_map_map = new HashMap<Byte,Map<Byte,Byte>>(other.byte_map_map.size());
      for (Map.Entry<Byte, Map<Byte,Byte>> other_element : other.byte_map_map.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Map<Byte,Byte> other_element_value = other_element.getValue();

        Byte __this__byte_map_map_copy_key = other_element_key;

        Map<Byte,Byte> __this__byte_map_map_copy_value = new HashMap<Byte,Byte>(other_element_value);

        __this__byte_map_map.put(__this__byte_map_map_copy_key, __this__byte_map_map_copy_value);
      }
      this.byte_map_map = __this__byte_map_map;
    }
    if (other.isSetByte_set_map()) {
      Map<Byte,Set<Byte>> __this__byte_set_map = new HashMap<Byte,Set<Byte>>(other.byte_set_map.size());
      for (Map.Entry<Byte, Set<Byte>> other_element : other.byte_set_map.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Set<Byte> other_element_value = other_element.getValue();

        Byte __this__byte_set_map_copy_key = other_element_key;

        Set<Byte> __this__byte_set_map_copy_value = new HashSet<Byte>(other_element_value);

        __this__byte_set_map.put(__this__byte_set_map_copy_key, __this__byte_set_map_copy_value);
      }
      this.byte_set_map = __this__byte_set_map;
    }
    if (other.isSetByte_list_map()) {
      Map<Byte,List<Byte>> __this__byte_list_map = new HashMap<Byte,List<Byte>>(other.byte_list_map.size());
      for (Map.Entry<Byte, List<Byte>> other_element : other.byte_list_map.entrySet()) {

        Byte other_element_key = other_element.getKey();
        List<Byte> other_element_value = other_element.getValue();

        Byte __this__byte_list_map_copy_key = other_element_key;

        List<Byte> __this__byte_list_map_copy_value = new ArrayList<Byte>(other_element_value);

        __this__byte_list_map.put(__this__byte_list_map_copy_key, __this__byte_list_map_copy_value);
      }
      this.byte_list_map = __this__byte_list_map;
    }
  }

  public CompactProtoTestStruct deepCopy() {
    return new CompactProtoTestStruct(this);
  }

  @Override
  public void clear() {
    setA_byteIsSet(false);
    this.a_byte = 0;
    setA_i16IsSet(false);
    this.a_i16 = 0;
    setA_i32IsSet(false);
    this.a_i32 = 0;
    setA_i64IsSet(false);
    this.a_i64 = 0;
    setA_doubleIsSet(false);
    this.a_double = 0.0;
    this.a_string = null;
    this.a_binary = null;
    setTrue_fieldIsSet(false);
    this.true_field = false;
    setFalse_fieldIsSet(false);
    this.false_field = false;
    this.empty_struct_field = null;
    this.byte_list = null;
    this.i16_list = null;
    this.i32_list = null;
    this.i64_list = null;
    this.double_list = null;
    this.string_list = null;
    this.binary_list = null;
    this.boolean_list = null;
    this.struct_list = null;
    this.byte_set = null;
    this.i16_set = null;
    this.i32_set = null;
    this.i64_set = null;
    this.double_set = null;
    this.string_set = null;
    this.binary_set = null;
    this.boolean_set = null;
    this.struct_set = null;
    this.byte_byte_map = null;
    this.i16_byte_map = null;
    this.i32_byte_map = null;
    this.i64_byte_map = null;
    this.double_byte_map = null;
    this.string_byte_map = null;
    this.binary_byte_map = null;
    this.boolean_byte_map = null;
    this.byte_i16_map = null;
    this.byte_i32_map = null;
    this.byte_i64_map = null;
    this.byte_double_map = null;
    this.byte_string_map = null;
    this.byte_binary_map = null;
    this.byte_boolean_map = null;
    this.list_byte_map = null;
    this.set_byte_map = null;
    this.map_byte_map = null;
    this.byte_map_map = null;
    this.byte_set_map = null;
    this.byte_list_map = null;
  }

  public byte getA_byte() {
    return this.a_byte;
  }

  public CompactProtoTestStruct setA_byte(byte a_byte) {
    this.a_byte = a_byte;
    setA_byteIsSet(true);
    return this;
  }

  public void unsetA_byte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_BYTE_ISSET_ID);
  }

  /** Returns true if field a_byte is set (has been assigned a value) and false otherwise */
  public boolean isSetA_byte() {
    return EncodingUtils.testBit(__isset_bitfield, __A_BYTE_ISSET_ID);
  }

  public void setA_byteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_BYTE_ISSET_ID, value);
  }

  public short getA_i16() {
    return this.a_i16;
  }

  public CompactProtoTestStruct setA_i16(short a_i16) {
    this.a_i16 = a_i16;
    setA_i16IsSet(true);
    return this;
  }

  public void unsetA_i16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_I16_ISSET_ID);
  }

  /** Returns true if field a_i16 is set (has been assigned a value) and false otherwise */
  public boolean isSetA_i16() {
    return EncodingUtils.testBit(__isset_bitfield, __A_I16_ISSET_ID);
  }

  public void setA_i16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_I16_ISSET_ID, value);
  }

  public int getA_i32() {
    return this.a_i32;
  }

  public CompactProtoTestStruct setA_i32(int a_i32) {
    this.a_i32 = a_i32;
    setA_i32IsSet(true);
    return this;
  }

  public void unsetA_i32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_I32_ISSET_ID);
  }

  /** Returns true if field a_i32 is set (has been assigned a value) and false otherwise */
  public boolean isSetA_i32() {
    return EncodingUtils.testBit(__isset_bitfield, __A_I32_ISSET_ID);
  }

  public void setA_i32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_I32_ISSET_ID, value);
  }

  public long getA_i64() {
    return this.a_i64;
  }

  public CompactProtoTestStruct setA_i64(long a_i64) {
    this.a_i64 = a_i64;
    setA_i64IsSet(true);
    return this;
  }

  public void unsetA_i64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_I64_ISSET_ID);
  }

  /** Returns true if field a_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSetA_i64() {
    return EncodingUtils.testBit(__isset_bitfield, __A_I64_ISSET_ID);
  }

  public void setA_i64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_I64_ISSET_ID, value);
  }

  public double getA_double() {
    return this.a_double;
  }

  public CompactProtoTestStruct setA_double(double a_double) {
    this.a_double = a_double;
    setA_doubleIsSet(true);
    return this;
  }

  public void unsetA_double() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_DOUBLE_ISSET_ID);
  }

  /** Returns true if field a_double is set (has been assigned a value) and false otherwise */
  public boolean isSetA_double() {
    return EncodingUtils.testBit(__isset_bitfield, __A_DOUBLE_ISSET_ID);
  }

  public void setA_doubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_DOUBLE_ISSET_ID, value);
  }

  public String getA_string() {
    return this.a_string;
  }

  public CompactProtoTestStruct setA_string(String a_string) {
    this.a_string = a_string;
    return this;
  }

  public void unsetA_string() {
    this.a_string = null;
  }

  /** Returns true if field a_string is set (has been assigned a value) and false otherwise */
  public boolean isSetA_string() {
    return this.a_string != null;
  }

  public void setA_stringIsSet(boolean value) {
    if (!value) {
      this.a_string = null;
    }
  }

  public byte[] getA_binary() {
    setA_binary(org.apache.thrift.TBaseHelper.rightSize(a_binary));
    return a_binary == null ? null : a_binary.array();
  }

  public ByteBuffer bufferForA_binary() {
    return org.apache.thrift.TBaseHelper.copyBinary(a_binary);
  }

  public CompactProtoTestStruct setA_binary(byte[] a_binary) {
    this.a_binary = a_binary == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(a_binary, a_binary.length));
    return this;
  }

  public CompactProtoTestStruct setA_binary(ByteBuffer a_binary) {
    this.a_binary = org.apache.thrift.TBaseHelper.copyBinary(a_binary);
    return this;
  }

  public void unsetA_binary() {
    this.a_binary = null;
  }

  /** Returns true if field a_binary is set (has been assigned a value) and false otherwise */
  public boolean isSetA_binary() {
    return this.a_binary != null;
  }

  public void setA_binaryIsSet(boolean value) {
    if (!value) {
      this.a_binary = null;
    }
  }

  public boolean isTrue_field() {
    return this.true_field;
  }

  public CompactProtoTestStruct setTrue_field(boolean true_field) {
    this.true_field = true_field;
    setTrue_fieldIsSet(true);
    return this;
  }

  public void unsetTrue_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRUE_FIELD_ISSET_ID);
  }

  /** Returns true if field true_field is set (has been assigned a value) and false otherwise */
  public boolean isSetTrue_field() {
    return EncodingUtils.testBit(__isset_bitfield, __TRUE_FIELD_ISSET_ID);
  }

  public void setTrue_fieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRUE_FIELD_ISSET_ID, value);
  }

  public boolean isFalse_field() {
    return this.false_field;
  }

  public CompactProtoTestStruct setFalse_field(boolean false_field) {
    this.false_field = false_field;
    setFalse_fieldIsSet(true);
    return this;
  }

  public void unsetFalse_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FALSE_FIELD_ISSET_ID);
  }

  /** Returns true if field false_field is set (has been assigned a value) and false otherwise */
  public boolean isSetFalse_field() {
    return EncodingUtils.testBit(__isset_bitfield, __FALSE_FIELD_ISSET_ID);
  }

  public void setFalse_fieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FALSE_FIELD_ISSET_ID, value);
  }

  public Empty getEmpty_struct_field() {
    return this.empty_struct_field;
  }

  public CompactProtoTestStruct setEmpty_struct_field(Empty empty_struct_field) {
    this.empty_struct_field = empty_struct_field;
    return this;
  }

  public void unsetEmpty_struct_field() {
    this.empty_struct_field = null;
  }

  /** Returns true if field empty_struct_field is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpty_struct_field() {
    return this.empty_struct_field != null;
  }

  public void setEmpty_struct_fieldIsSet(boolean value) {
    if (!value) {
      this.empty_struct_field = null;
    }
  }

  public int getByte_listSize() {
    return (this.byte_list == null) ? 0 : this.byte_list.size();
  }

  public java.util.Iterator<Byte> getByte_listIterator() {
    return (this.byte_list == null) ? null : this.byte_list.iterator();
  }

  public void addToByte_list(byte elem) {
    if (this.byte_list == null) {
      this.byte_list = new ArrayList<Byte>();
    }
    this.byte_list.add(elem);
  }

  public List<Byte> getByte_list() {
    return this.byte_list;
  }

  public CompactProtoTestStruct setByte_list(List<Byte> byte_list) {
    this.byte_list = byte_list;
    return this;
  }

  public void unsetByte_list() {
    this.byte_list = null;
  }

  /** Returns true if field byte_list is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_list() {
    return this.byte_list != null;
  }

  public void setByte_listIsSet(boolean value) {
    if (!value) {
      this.byte_list = null;
    }
  }

  public int getI16_listSize() {
    return (this.i16_list == null) ? 0 : this.i16_list.size();
  }

  public java.util.Iterator<Short> getI16_listIterator() {
    return (this.i16_list == null) ? null : this.i16_list.iterator();
  }

  public void addToI16_list(short elem) {
    if (this.i16_list == null) {
      this.i16_list = new ArrayList<Short>();
    }
    this.i16_list.add(elem);
  }

  public List<Short> getI16_list() {
    return this.i16_list;
  }

  public CompactProtoTestStruct setI16_list(List<Short> i16_list) {
    this.i16_list = i16_list;
    return this;
  }

  public void unsetI16_list() {
    this.i16_list = null;
  }

  /** Returns true if field i16_list is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_list() {
    return this.i16_list != null;
  }

  public void setI16_listIsSet(boolean value) {
    if (!value) {
      this.i16_list = null;
    }
  }

  public int getI32_listSize() {
    return (this.i32_list == null) ? 0 : this.i32_list.size();
  }

  public java.util.Iterator<Integer> getI32_listIterator() {
    return (this.i32_list == null) ? null : this.i32_list.iterator();
  }

  public void addToI32_list(int elem) {
    if (this.i32_list == null) {
      this.i32_list = new ArrayList<Integer>();
    }
    this.i32_list.add(elem);
  }

  public List<Integer> getI32_list() {
    return this.i32_list;
  }

  public CompactProtoTestStruct setI32_list(List<Integer> i32_list) {
    this.i32_list = i32_list;
    return this;
  }

  public void unsetI32_list() {
    this.i32_list = null;
  }

  /** Returns true if field i32_list is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_list() {
    return this.i32_list != null;
  }

  public void setI32_listIsSet(boolean value) {
    if (!value) {
      this.i32_list = null;
    }
  }

  public int getI64_listSize() {
    return (this.i64_list == null) ? 0 : this.i64_list.size();
  }

  public java.util.Iterator<Long> getI64_listIterator() {
    return (this.i64_list == null) ? null : this.i64_list.iterator();
  }

  public void addToI64_list(long elem) {
    if (this.i64_list == null) {
      this.i64_list = new ArrayList<Long>();
    }
    this.i64_list.add(elem);
  }

  public List<Long> getI64_list() {
    return this.i64_list;
  }

  public CompactProtoTestStruct setI64_list(List<Long> i64_list) {
    this.i64_list = i64_list;
    return this;
  }

  public void unsetI64_list() {
    this.i64_list = null;
  }

  /** Returns true if field i64_list is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_list() {
    return this.i64_list != null;
  }

  public void setI64_listIsSet(boolean value) {
    if (!value) {
      this.i64_list = null;
    }
  }

  public int getDouble_listSize() {
    return (this.double_list == null) ? 0 : this.double_list.size();
  }

  public java.util.Iterator<Double> getDouble_listIterator() {
    return (this.double_list == null) ? null : this.double_list.iterator();
  }

  public void addToDouble_list(double elem) {
    if (this.double_list == null) {
      this.double_list = new ArrayList<Double>();
    }
    this.double_list.add(elem);
  }

  public List<Double> getDouble_list() {
    return this.double_list;
  }

  public CompactProtoTestStruct setDouble_list(List<Double> double_list) {
    this.double_list = double_list;
    return this;
  }

  public void unsetDouble_list() {
    this.double_list = null;
  }

  /** Returns true if field double_list is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_list() {
    return this.double_list != null;
  }

  public void setDouble_listIsSet(boolean value) {
    if (!value) {
      this.double_list = null;
    }
  }

  public int getString_listSize() {
    return (this.string_list == null) ? 0 : this.string_list.size();
  }

  public java.util.Iterator<String> getString_listIterator() {
    return (this.string_list == null) ? null : this.string_list.iterator();
  }

  public void addToString_list(String elem) {
    if (this.string_list == null) {
      this.string_list = new ArrayList<String>();
    }
    this.string_list.add(elem);
  }

  public List<String> getString_list() {
    return this.string_list;
  }

  public CompactProtoTestStruct setString_list(List<String> string_list) {
    this.string_list = string_list;
    return this;
  }

  public void unsetString_list() {
    this.string_list = null;
  }

  /** Returns true if field string_list is set (has been assigned a value) and false otherwise */
  public boolean isSetString_list() {
    return this.string_list != null;
  }

  public void setString_listIsSet(boolean value) {
    if (!value) {
      this.string_list = null;
    }
  }

  public int getBinary_listSize() {
    return (this.binary_list == null) ? 0 : this.binary_list.size();
  }

  public java.util.Iterator<ByteBuffer> getBinary_listIterator() {
    return (this.binary_list == null) ? null : this.binary_list.iterator();
  }

  public void addToBinary_list(ByteBuffer elem) {
    if (this.binary_list == null) {
      this.binary_list = new ArrayList<ByteBuffer>();
    }
    this.binary_list.add(elem);
  }

  public List<ByteBuffer> getBinary_list() {
    return this.binary_list;
  }

  public CompactProtoTestStruct setBinary_list(List<ByteBuffer> binary_list) {
    this.binary_list = binary_list;
    return this;
  }

  public void unsetBinary_list() {
    this.binary_list = null;
  }

  /** Returns true if field binary_list is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_list() {
    return this.binary_list != null;
  }

  public void setBinary_listIsSet(boolean value) {
    if (!value) {
      this.binary_list = null;
    }
  }

  public int getBoolean_listSize() {
    return (this.boolean_list == null) ? 0 : this.boolean_list.size();
  }

  public java.util.Iterator<Boolean> getBoolean_listIterator() {
    return (this.boolean_list == null) ? null : this.boolean_list.iterator();
  }

  public void addToBoolean_list(boolean elem) {
    if (this.boolean_list == null) {
      this.boolean_list = new ArrayList<Boolean>();
    }
    this.boolean_list.add(elem);
  }

  public List<Boolean> getBoolean_list() {
    return this.boolean_list;
  }

  public CompactProtoTestStruct setBoolean_list(List<Boolean> boolean_list) {
    this.boolean_list = boolean_list;
    return this;
  }

  public void unsetBoolean_list() {
    this.boolean_list = null;
  }

  /** Returns true if field boolean_list is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolean_list() {
    return this.boolean_list != null;
  }

  public void setBoolean_listIsSet(boolean value) {
    if (!value) {
      this.boolean_list = null;
    }
  }

  public int getStruct_listSize() {
    return (this.struct_list == null) ? 0 : this.struct_list.size();
  }

  public java.util.Iterator<Empty> getStruct_listIterator() {
    return (this.struct_list == null) ? null : this.struct_list.iterator();
  }

  public void addToStruct_list(Empty elem) {
    if (this.struct_list == null) {
      this.struct_list = new ArrayList<Empty>();
    }
    this.struct_list.add(elem);
  }

  public List<Empty> getStruct_list() {
    return this.struct_list;
  }

  public CompactProtoTestStruct setStruct_list(List<Empty> struct_list) {
    this.struct_list = struct_list;
    return this;
  }

  public void unsetStruct_list() {
    this.struct_list = null;
  }

  /** Returns true if field struct_list is set (has been assigned a value) and false otherwise */
  public boolean isSetStruct_list() {
    return this.struct_list != null;
  }

  public void setStruct_listIsSet(boolean value) {
    if (!value) {
      this.struct_list = null;
    }
  }

  public int getByte_setSize() {
    return (this.byte_set == null) ? 0 : this.byte_set.size();
  }

  public java.util.Iterator<Byte> getByte_setIterator() {
    return (this.byte_set == null) ? null : this.byte_set.iterator();
  }

  public void addToByte_set(byte elem) {
    if (this.byte_set == null) {
      this.byte_set = new HashSet<Byte>();
    }
    this.byte_set.add(elem);
  }

  public Set<Byte> getByte_set() {
    return this.byte_set;
  }

  public CompactProtoTestStruct setByte_set(Set<Byte> byte_set) {
    this.byte_set = byte_set;
    return this;
  }

  public void unsetByte_set() {
    this.byte_set = null;
  }

  /** Returns true if field byte_set is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_set() {
    return this.byte_set != null;
  }

  public void setByte_setIsSet(boolean value) {
    if (!value) {
      this.byte_set = null;
    }
  }

  public int getI16_setSize() {
    return (this.i16_set == null) ? 0 : this.i16_set.size();
  }

  public java.util.Iterator<Short> getI16_setIterator() {
    return (this.i16_set == null) ? null : this.i16_set.iterator();
  }

  public void addToI16_set(short elem) {
    if (this.i16_set == null) {
      this.i16_set = new HashSet<Short>();
    }
    this.i16_set.add(elem);
  }

  public Set<Short> getI16_set() {
    return this.i16_set;
  }

  public CompactProtoTestStruct setI16_set(Set<Short> i16_set) {
    this.i16_set = i16_set;
    return this;
  }

  public void unsetI16_set() {
    this.i16_set = null;
  }

  /** Returns true if field i16_set is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_set() {
    return this.i16_set != null;
  }

  public void setI16_setIsSet(boolean value) {
    if (!value) {
      this.i16_set = null;
    }
  }

  public int getI32_setSize() {
    return (this.i32_set == null) ? 0 : this.i32_set.size();
  }

  public java.util.Iterator<Integer> getI32_setIterator() {
    return (this.i32_set == null) ? null : this.i32_set.iterator();
  }

  public void addToI32_set(int elem) {
    if (this.i32_set == null) {
      this.i32_set = new HashSet<Integer>();
    }
    this.i32_set.add(elem);
  }

  public Set<Integer> getI32_set() {
    return this.i32_set;
  }

  public CompactProtoTestStruct setI32_set(Set<Integer> i32_set) {
    this.i32_set = i32_set;
    return this;
  }

  public void unsetI32_set() {
    this.i32_set = null;
  }

  /** Returns true if field i32_set is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_set() {
    return this.i32_set != null;
  }

  public void setI32_setIsSet(boolean value) {
    if (!value) {
      this.i32_set = null;
    }
  }

  public int getI64_setSize() {
    return (this.i64_set == null) ? 0 : this.i64_set.size();
  }

  public java.util.Iterator<Long> getI64_setIterator() {
    return (this.i64_set == null) ? null : this.i64_set.iterator();
  }

  public void addToI64_set(long elem) {
    if (this.i64_set == null) {
      this.i64_set = new HashSet<Long>();
    }
    this.i64_set.add(elem);
  }

  public Set<Long> getI64_set() {
    return this.i64_set;
  }

  public CompactProtoTestStruct setI64_set(Set<Long> i64_set) {
    this.i64_set = i64_set;
    return this;
  }

  public void unsetI64_set() {
    this.i64_set = null;
  }

  /** Returns true if field i64_set is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_set() {
    return this.i64_set != null;
  }

  public void setI64_setIsSet(boolean value) {
    if (!value) {
      this.i64_set = null;
    }
  }

  public int getDouble_setSize() {
    return (this.double_set == null) ? 0 : this.double_set.size();
  }

  public java.util.Iterator<Double> getDouble_setIterator() {
    return (this.double_set == null) ? null : this.double_set.iterator();
  }

  public void addToDouble_set(double elem) {
    if (this.double_set == null) {
      this.double_set = new HashSet<Double>();
    }
    this.double_set.add(elem);
  }

  public Set<Double> getDouble_set() {
    return this.double_set;
  }

  public CompactProtoTestStruct setDouble_set(Set<Double> double_set) {
    this.double_set = double_set;
    return this;
  }

  public void unsetDouble_set() {
    this.double_set = null;
  }

  /** Returns true if field double_set is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_set() {
    return this.double_set != null;
  }

  public void setDouble_setIsSet(boolean value) {
    if (!value) {
      this.double_set = null;
    }
  }

  public int getString_setSize() {
    return (this.string_set == null) ? 0 : this.string_set.size();
  }

  public java.util.Iterator<String> getString_setIterator() {
    return (this.string_set == null) ? null : this.string_set.iterator();
  }

  public void addToString_set(String elem) {
    if (this.string_set == null) {
      this.string_set = new HashSet<String>();
    }
    this.string_set.add(elem);
  }

  public Set<String> getString_set() {
    return this.string_set;
  }

  public CompactProtoTestStruct setString_set(Set<String> string_set) {
    this.string_set = string_set;
    return this;
  }

  public void unsetString_set() {
    this.string_set = null;
  }

  /** Returns true if field string_set is set (has been assigned a value) and false otherwise */
  public boolean isSetString_set() {
    return this.string_set != null;
  }

  public void setString_setIsSet(boolean value) {
    if (!value) {
      this.string_set = null;
    }
  }

  public int getBinary_setSize() {
    return (this.binary_set == null) ? 0 : this.binary_set.size();
  }

  public java.util.Iterator<ByteBuffer> getBinary_setIterator() {
    return (this.binary_set == null) ? null : this.binary_set.iterator();
  }

  public void addToBinary_set(ByteBuffer elem) {
    if (this.binary_set == null) {
      this.binary_set = new HashSet<ByteBuffer>();
    }
    this.binary_set.add(elem);
  }

  public Set<ByteBuffer> getBinary_set() {
    return this.binary_set;
  }

  public CompactProtoTestStruct setBinary_set(Set<ByteBuffer> binary_set) {
    this.binary_set = binary_set;
    return this;
  }

  public void unsetBinary_set() {
    this.binary_set = null;
  }

  /** Returns true if field binary_set is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_set() {
    return this.binary_set != null;
  }

  public void setBinary_setIsSet(boolean value) {
    if (!value) {
      this.binary_set = null;
    }
  }

  public int getBoolean_setSize() {
    return (this.boolean_set == null) ? 0 : this.boolean_set.size();
  }

  public java.util.Iterator<Boolean> getBoolean_setIterator() {
    return (this.boolean_set == null) ? null : this.boolean_set.iterator();
  }

  public void addToBoolean_set(boolean elem) {
    if (this.boolean_set == null) {
      this.boolean_set = new HashSet<Boolean>();
    }
    this.boolean_set.add(elem);
  }

  public Set<Boolean> getBoolean_set() {
    return this.boolean_set;
  }

  public CompactProtoTestStruct setBoolean_set(Set<Boolean> boolean_set) {
    this.boolean_set = boolean_set;
    return this;
  }

  public void unsetBoolean_set() {
    this.boolean_set = null;
  }

  /** Returns true if field boolean_set is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolean_set() {
    return this.boolean_set != null;
  }

  public void setBoolean_setIsSet(boolean value) {
    if (!value) {
      this.boolean_set = null;
    }
  }

  public int getStruct_setSize() {
    return (this.struct_set == null) ? 0 : this.struct_set.size();
  }

  public java.util.Iterator<Empty> getStruct_setIterator() {
    return (this.struct_set == null) ? null : this.struct_set.iterator();
  }

  public void addToStruct_set(Empty elem) {
    if (this.struct_set == null) {
      this.struct_set = new HashSet<Empty>();
    }
    this.struct_set.add(elem);
  }

  public Set<Empty> getStruct_set() {
    return this.struct_set;
  }

  public CompactProtoTestStruct setStruct_set(Set<Empty> struct_set) {
    this.struct_set = struct_set;
    return this;
  }

  public void unsetStruct_set() {
    this.struct_set = null;
  }

  /** Returns true if field struct_set is set (has been assigned a value) and false otherwise */
  public boolean isSetStruct_set() {
    return this.struct_set != null;
  }

  public void setStruct_setIsSet(boolean value) {
    if (!value) {
      this.struct_set = null;
    }
  }

  public int getByte_byte_mapSize() {
    return (this.byte_byte_map == null) ? 0 : this.byte_byte_map.size();
  }

  public void putToByte_byte_map(byte key, byte val) {
    if (this.byte_byte_map == null) {
      this.byte_byte_map = new HashMap<Byte,Byte>();
    }
    this.byte_byte_map.put(key, val);
  }

  public Map<Byte,Byte> getByte_byte_map() {
    return this.byte_byte_map;
  }

  public CompactProtoTestStruct setByte_byte_map(Map<Byte,Byte> byte_byte_map) {
    this.byte_byte_map = byte_byte_map;
    return this;
  }

  public void unsetByte_byte_map() {
    this.byte_byte_map = null;
  }

  /** Returns true if field byte_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_byte_map() {
    return this.byte_byte_map != null;
  }

  public void setByte_byte_mapIsSet(boolean value) {
    if (!value) {
      this.byte_byte_map = null;
    }
  }

  public int getI16_byte_mapSize() {
    return (this.i16_byte_map == null) ? 0 : this.i16_byte_map.size();
  }

  public void putToI16_byte_map(short key, byte val) {
    if (this.i16_byte_map == null) {
      this.i16_byte_map = new HashMap<Short,Byte>();
    }
    this.i16_byte_map.put(key, val);
  }

  public Map<Short,Byte> getI16_byte_map() {
    return this.i16_byte_map;
  }

  public CompactProtoTestStruct setI16_byte_map(Map<Short,Byte> i16_byte_map) {
    this.i16_byte_map = i16_byte_map;
    return this;
  }

  public void unsetI16_byte_map() {
    this.i16_byte_map = null;
  }

  /** Returns true if field i16_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_byte_map() {
    return this.i16_byte_map != null;
  }

  public void setI16_byte_mapIsSet(boolean value) {
    if (!value) {
      this.i16_byte_map = null;
    }
  }

  public int getI32_byte_mapSize() {
    return (this.i32_byte_map == null) ? 0 : this.i32_byte_map.size();
  }

  public void putToI32_byte_map(int key, byte val) {
    if (this.i32_byte_map == null) {
      this.i32_byte_map = new HashMap<Integer,Byte>();
    }
    this.i32_byte_map.put(key, val);
  }

  public Map<Integer,Byte> getI32_byte_map() {
    return this.i32_byte_map;
  }

  public CompactProtoTestStruct setI32_byte_map(Map<Integer,Byte> i32_byte_map) {
    this.i32_byte_map = i32_byte_map;
    return this;
  }

  public void unsetI32_byte_map() {
    this.i32_byte_map = null;
  }

  /** Returns true if field i32_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_byte_map() {
    return this.i32_byte_map != null;
  }

  public void setI32_byte_mapIsSet(boolean value) {
    if (!value) {
      this.i32_byte_map = null;
    }
  }

  public int getI64_byte_mapSize() {
    return (this.i64_byte_map == null) ? 0 : this.i64_byte_map.size();
  }

  public void putToI64_byte_map(long key, byte val) {
    if (this.i64_byte_map == null) {
      this.i64_byte_map = new HashMap<Long,Byte>();
    }
    this.i64_byte_map.put(key, val);
  }

  public Map<Long,Byte> getI64_byte_map() {
    return this.i64_byte_map;
  }

  public CompactProtoTestStruct setI64_byte_map(Map<Long,Byte> i64_byte_map) {
    this.i64_byte_map = i64_byte_map;
    return this;
  }

  public void unsetI64_byte_map() {
    this.i64_byte_map = null;
  }

  /** Returns true if field i64_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_byte_map() {
    return this.i64_byte_map != null;
  }

  public void setI64_byte_mapIsSet(boolean value) {
    if (!value) {
      this.i64_byte_map = null;
    }
  }

  public int getDouble_byte_mapSize() {
    return (this.double_byte_map == null) ? 0 : this.double_byte_map.size();
  }

  public void putToDouble_byte_map(double key, byte val) {
    if (this.double_byte_map == null) {
      this.double_byte_map = new HashMap<Double,Byte>();
    }
    this.double_byte_map.put(key, val);
  }

  public Map<Double,Byte> getDouble_byte_map() {
    return this.double_byte_map;
  }

  public CompactProtoTestStruct setDouble_byte_map(Map<Double,Byte> double_byte_map) {
    this.double_byte_map = double_byte_map;
    return this;
  }

  public void unsetDouble_byte_map() {
    this.double_byte_map = null;
  }

  /** Returns true if field double_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_byte_map() {
    return this.double_byte_map != null;
  }

  public void setDouble_byte_mapIsSet(boolean value) {
    if (!value) {
      this.double_byte_map = null;
    }
  }

  public int getString_byte_mapSize() {
    return (this.string_byte_map == null) ? 0 : this.string_byte_map.size();
  }

  public void putToString_byte_map(String key, byte val) {
    if (this.string_byte_map == null) {
      this.string_byte_map = new HashMap<String,Byte>();
    }
    this.string_byte_map.put(key, val);
  }

  public Map<String,Byte> getString_byte_map() {
    return this.string_byte_map;
  }

  public CompactProtoTestStruct setString_byte_map(Map<String,Byte> string_byte_map) {
    this.string_byte_map = string_byte_map;
    return this;
  }

  public void unsetString_byte_map() {
    this.string_byte_map = null;
  }

  /** Returns true if field string_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetString_byte_map() {
    return this.string_byte_map != null;
  }

  public void setString_byte_mapIsSet(boolean value) {
    if (!value) {
      this.string_byte_map = null;
    }
  }

  public int getBinary_byte_mapSize() {
    return (this.binary_byte_map == null) ? 0 : this.binary_byte_map.size();
  }

  public void putToBinary_byte_map(ByteBuffer key, byte val) {
    if (this.binary_byte_map == null) {
      this.binary_byte_map = new HashMap<ByteBuffer,Byte>();
    }
    this.binary_byte_map.put(key, val);
  }

  public Map<ByteBuffer,Byte> getBinary_byte_map() {
    return this.binary_byte_map;
  }

  public CompactProtoTestStruct setBinary_byte_map(Map<ByteBuffer,Byte> binary_byte_map) {
    this.binary_byte_map = binary_byte_map;
    return this;
  }

  public void unsetBinary_byte_map() {
    this.binary_byte_map = null;
  }

  /** Returns true if field binary_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_byte_map() {
    return this.binary_byte_map != null;
  }

  public void setBinary_byte_mapIsSet(boolean value) {
    if (!value) {
      this.binary_byte_map = null;
    }
  }

  public int getBoolean_byte_mapSize() {
    return (this.boolean_byte_map == null) ? 0 : this.boolean_byte_map.size();
  }

  public void putToBoolean_byte_map(boolean key, byte val) {
    if (this.boolean_byte_map == null) {
      this.boolean_byte_map = new HashMap<Boolean,Byte>();
    }
    this.boolean_byte_map.put(key, val);
  }

  public Map<Boolean,Byte> getBoolean_byte_map() {
    return this.boolean_byte_map;
  }

  public CompactProtoTestStruct setBoolean_byte_map(Map<Boolean,Byte> boolean_byte_map) {
    this.boolean_byte_map = boolean_byte_map;
    return this;
  }

  public void unsetBoolean_byte_map() {
    this.boolean_byte_map = null;
  }

  /** Returns true if field boolean_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolean_byte_map() {
    return this.boolean_byte_map != null;
  }

  public void setBoolean_byte_mapIsSet(boolean value) {
    if (!value) {
      this.boolean_byte_map = null;
    }
  }

  public int getByte_i16_mapSize() {
    return (this.byte_i16_map == null) ? 0 : this.byte_i16_map.size();
  }

  public void putToByte_i16_map(byte key, short val) {
    if (this.byte_i16_map == null) {
      this.byte_i16_map = new HashMap<Byte,Short>();
    }
    this.byte_i16_map.put(key, val);
  }

  public Map<Byte,Short> getByte_i16_map() {
    return this.byte_i16_map;
  }

  public CompactProtoTestStruct setByte_i16_map(Map<Byte,Short> byte_i16_map) {
    this.byte_i16_map = byte_i16_map;
    return this;
  }

  public void unsetByte_i16_map() {
    this.byte_i16_map = null;
  }

  /** Returns true if field byte_i16_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_i16_map() {
    return this.byte_i16_map != null;
  }

  public void setByte_i16_mapIsSet(boolean value) {
    if (!value) {
      this.byte_i16_map = null;
    }
  }

  public int getByte_i32_mapSize() {
    return (this.byte_i32_map == null) ? 0 : this.byte_i32_map.size();
  }

  public void putToByte_i32_map(byte key, int val) {
    if (this.byte_i32_map == null) {
      this.byte_i32_map = new HashMap<Byte,Integer>();
    }
    this.byte_i32_map.put(key, val);
  }

  public Map<Byte,Integer> getByte_i32_map() {
    return this.byte_i32_map;
  }

  public CompactProtoTestStruct setByte_i32_map(Map<Byte,Integer> byte_i32_map) {
    this.byte_i32_map = byte_i32_map;
    return this;
  }

  public void unsetByte_i32_map() {
    this.byte_i32_map = null;
  }

  /** Returns true if field byte_i32_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_i32_map() {
    return this.byte_i32_map != null;
  }

  public void setByte_i32_mapIsSet(boolean value) {
    if (!value) {
      this.byte_i32_map = null;
    }
  }

  public int getByte_i64_mapSize() {
    return (this.byte_i64_map == null) ? 0 : this.byte_i64_map.size();
  }

  public void putToByte_i64_map(byte key, long val) {
    if (this.byte_i64_map == null) {
      this.byte_i64_map = new HashMap<Byte,Long>();
    }
    this.byte_i64_map.put(key, val);
  }

  public Map<Byte,Long> getByte_i64_map() {
    return this.byte_i64_map;
  }

  public CompactProtoTestStruct setByte_i64_map(Map<Byte,Long> byte_i64_map) {
    this.byte_i64_map = byte_i64_map;
    return this;
  }

  public void unsetByte_i64_map() {
    this.byte_i64_map = null;
  }

  /** Returns true if field byte_i64_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_i64_map() {
    return this.byte_i64_map != null;
  }

  public void setByte_i64_mapIsSet(boolean value) {
    if (!value) {
      this.byte_i64_map = null;
    }
  }

  public int getByte_double_mapSize() {
    return (this.byte_double_map == null) ? 0 : this.byte_double_map.size();
  }

  public void putToByte_double_map(byte key, double val) {
    if (this.byte_double_map == null) {
      this.byte_double_map = new HashMap<Byte,Double>();
    }
    this.byte_double_map.put(key, val);
  }

  public Map<Byte,Double> getByte_double_map() {
    return this.byte_double_map;
  }

  public CompactProtoTestStruct setByte_double_map(Map<Byte,Double> byte_double_map) {
    this.byte_double_map = byte_double_map;
    return this;
  }

  public void unsetByte_double_map() {
    this.byte_double_map = null;
  }

  /** Returns true if field byte_double_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_double_map() {
    return this.byte_double_map != null;
  }

  public void setByte_double_mapIsSet(boolean value) {
    if (!value) {
      this.byte_double_map = null;
    }
  }

  public int getByte_string_mapSize() {
    return (this.byte_string_map == null) ? 0 : this.byte_string_map.size();
  }

  public void putToByte_string_map(byte key, String val) {
    if (this.byte_string_map == null) {
      this.byte_string_map = new HashMap<Byte,String>();
    }
    this.byte_string_map.put(key, val);
  }

  public Map<Byte,String> getByte_string_map() {
    return this.byte_string_map;
  }

  public CompactProtoTestStruct setByte_string_map(Map<Byte,String> byte_string_map) {
    this.byte_string_map = byte_string_map;
    return this;
  }

  public void unsetByte_string_map() {
    this.byte_string_map = null;
  }

  /** Returns true if field byte_string_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_string_map() {
    return this.byte_string_map != null;
  }

  public void setByte_string_mapIsSet(boolean value) {
    if (!value) {
      this.byte_string_map = null;
    }
  }

  public int getByte_binary_mapSize() {
    return (this.byte_binary_map == null) ? 0 : this.byte_binary_map.size();
  }

  public void putToByte_binary_map(byte key, ByteBuffer val) {
    if (this.byte_binary_map == null) {
      this.byte_binary_map = new HashMap<Byte,ByteBuffer>();
    }
    this.byte_binary_map.put(key, val);
  }

  public Map<Byte,ByteBuffer> getByte_binary_map() {
    return this.byte_binary_map;
  }

  public CompactProtoTestStruct setByte_binary_map(Map<Byte,ByteBuffer> byte_binary_map) {
    this.byte_binary_map = byte_binary_map;
    return this;
  }

  public void unsetByte_binary_map() {
    this.byte_binary_map = null;
  }

  /** Returns true if field byte_binary_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_binary_map() {
    return this.byte_binary_map != null;
  }

  public void setByte_binary_mapIsSet(boolean value) {
    if (!value) {
      this.byte_binary_map = null;
    }
  }

  public int getByte_boolean_mapSize() {
    return (this.byte_boolean_map == null) ? 0 : this.byte_boolean_map.size();
  }

  public void putToByte_boolean_map(byte key, boolean val) {
    if (this.byte_boolean_map == null) {
      this.byte_boolean_map = new HashMap<Byte,Boolean>();
    }
    this.byte_boolean_map.put(key, val);
  }

  public Map<Byte,Boolean> getByte_boolean_map() {
    return this.byte_boolean_map;
  }

  public CompactProtoTestStruct setByte_boolean_map(Map<Byte,Boolean> byte_boolean_map) {
    this.byte_boolean_map = byte_boolean_map;
    return this;
  }

  public void unsetByte_boolean_map() {
    this.byte_boolean_map = null;
  }

  /** Returns true if field byte_boolean_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_boolean_map() {
    return this.byte_boolean_map != null;
  }

  public void setByte_boolean_mapIsSet(boolean value) {
    if (!value) {
      this.byte_boolean_map = null;
    }
  }

  public int getList_byte_mapSize() {
    return (this.list_byte_map == null) ? 0 : this.list_byte_map.size();
  }

  public void putToList_byte_map(List<Byte> key, byte val) {
    if (this.list_byte_map == null) {
      this.list_byte_map = new HashMap<List<Byte>,Byte>();
    }
    this.list_byte_map.put(key, val);
  }

  public Map<List<Byte>,Byte> getList_byte_map() {
    return this.list_byte_map;
  }

  public CompactProtoTestStruct setList_byte_map(Map<List<Byte>,Byte> list_byte_map) {
    this.list_byte_map = list_byte_map;
    return this;
  }

  public void unsetList_byte_map() {
    this.list_byte_map = null;
  }

  /** Returns true if field list_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetList_byte_map() {
    return this.list_byte_map != null;
  }

  public void setList_byte_mapIsSet(boolean value) {
    if (!value) {
      this.list_byte_map = null;
    }
  }

  public int getSet_byte_mapSize() {
    return (this.set_byte_map == null) ? 0 : this.set_byte_map.size();
  }

  public void putToSet_byte_map(Set<Byte> key, byte val) {
    if (this.set_byte_map == null) {
      this.set_byte_map = new HashMap<Set<Byte>,Byte>();
    }
    this.set_byte_map.put(key, val);
  }

  public Map<Set<Byte>,Byte> getSet_byte_map() {
    return this.set_byte_map;
  }

  public CompactProtoTestStruct setSet_byte_map(Map<Set<Byte>,Byte> set_byte_map) {
    this.set_byte_map = set_byte_map;
    return this;
  }

  public void unsetSet_byte_map() {
    this.set_byte_map = null;
  }

  /** Returns true if field set_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_byte_map() {
    return this.set_byte_map != null;
  }

  public void setSet_byte_mapIsSet(boolean value) {
    if (!value) {
      this.set_byte_map = null;
    }
  }

  public int getMap_byte_mapSize() {
    return (this.map_byte_map == null) ? 0 : this.map_byte_map.size();
  }

  public void putToMap_byte_map(Map<Byte,Byte> key, byte val) {
    if (this.map_byte_map == null) {
      this.map_byte_map = new HashMap<Map<Byte,Byte>,Byte>();
    }
    this.map_byte_map.put(key, val);
  }

  public Map<Map<Byte,Byte>,Byte> getMap_byte_map() {
    return this.map_byte_map;
  }

  public CompactProtoTestStruct setMap_byte_map(Map<Map<Byte,Byte>,Byte> map_byte_map) {
    this.map_byte_map = map_byte_map;
    return this;
  }

  public void unsetMap_byte_map() {
    this.map_byte_map = null;
  }

  /** Returns true if field map_byte_map is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_byte_map() {
    return this.map_byte_map != null;
  }

  public void setMap_byte_mapIsSet(boolean value) {
    if (!value) {
      this.map_byte_map = null;
    }
  }

  public int getByte_map_mapSize() {
    return (this.byte_map_map == null) ? 0 : this.byte_map_map.size();
  }

  public void putToByte_map_map(byte key, Map<Byte,Byte> val) {
    if (this.byte_map_map == null) {
      this.byte_map_map = new HashMap<Byte,Map<Byte,Byte>>();
    }
    this.byte_map_map.put(key, val);
  }

  public Map<Byte,Map<Byte,Byte>> getByte_map_map() {
    return this.byte_map_map;
  }

  public CompactProtoTestStruct setByte_map_map(Map<Byte,Map<Byte,Byte>> byte_map_map) {
    this.byte_map_map = byte_map_map;
    return this;
  }

  public void unsetByte_map_map() {
    this.byte_map_map = null;
  }

  /** Returns true if field byte_map_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_map_map() {
    return this.byte_map_map != null;
  }

  public void setByte_map_mapIsSet(boolean value) {
    if (!value) {
      this.byte_map_map = null;
    }
  }

  public int getByte_set_mapSize() {
    return (this.byte_set_map == null) ? 0 : this.byte_set_map.size();
  }

  public void putToByte_set_map(byte key, Set<Byte> val) {
    if (this.byte_set_map == null) {
      this.byte_set_map = new HashMap<Byte,Set<Byte>>();
    }
    this.byte_set_map.put(key, val);
  }

  public Map<Byte,Set<Byte>> getByte_set_map() {
    return this.byte_set_map;
  }

  public CompactProtoTestStruct setByte_set_map(Map<Byte,Set<Byte>> byte_set_map) {
    this.byte_set_map = byte_set_map;
    return this;
  }

  public void unsetByte_set_map() {
    this.byte_set_map = null;
  }

  /** Returns true if field byte_set_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_set_map() {
    return this.byte_set_map != null;
  }

  public void setByte_set_mapIsSet(boolean value) {
    if (!value) {
      this.byte_set_map = null;
    }
  }

  public int getByte_list_mapSize() {
    return (this.byte_list_map == null) ? 0 : this.byte_list_map.size();
  }

  public void putToByte_list_map(byte key, List<Byte> val) {
    if (this.byte_list_map == null) {
      this.byte_list_map = new HashMap<Byte,List<Byte>>();
    }
    this.byte_list_map.put(key, val);
  }

  public Map<Byte,List<Byte>> getByte_list_map() {
    return this.byte_list_map;
  }

  public CompactProtoTestStruct setByte_list_map(Map<Byte,List<Byte>> byte_list_map) {
    this.byte_list_map = byte_list_map;
    return this;
  }

  public void unsetByte_list_map() {
    this.byte_list_map = null;
  }

  /** Returns true if field byte_list_map is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_list_map() {
    return this.byte_list_map != null;
  }

  public void setByte_list_mapIsSet(boolean value) {
    if (!value) {
      this.byte_list_map = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A_BYTE:
      if (value == null) {
        unsetA_byte();
      } else {
        setA_byte((Byte)value);
      }
      break;

    case A_I16:
      if (value == null) {
        unsetA_i16();
      } else {
        setA_i16((Short)value);
      }
      break;

    case A_I32:
      if (value == null) {
        unsetA_i32();
      } else {
        setA_i32((Integer)value);
      }
      break;

    case A_I64:
      if (value == null) {
        unsetA_i64();
      } else {
        setA_i64((Long)value);
      }
      break;

    case A_DOUBLE:
      if (value == null) {
        unsetA_double();
      } else {
        setA_double((Double)value);
      }
      break;

    case A_STRING:
      if (value == null) {
        unsetA_string();
      } else {
        setA_string((String)value);
      }
      break;

    case A_BINARY:
      if (value == null) {
        unsetA_binary();
      } else {
        if (value instanceof byte[]) {
          setA_binary((byte[])value);
        } else {
          setA_binary((ByteBuffer)value);
        }
      }
      break;

    case TRUE_FIELD:
      if (value == null) {
        unsetTrue_field();
      } else {
        setTrue_field((Boolean)value);
      }
      break;

    case FALSE_FIELD:
      if (value == null) {
        unsetFalse_field();
      } else {
        setFalse_field((Boolean)value);
      }
      break;

    case EMPTY_STRUCT_FIELD:
      if (value == null) {
        unsetEmpty_struct_field();
      } else {
        setEmpty_struct_field((Empty)value);
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByte_list();
      } else {
        setByte_list((List<Byte>)value);
      }
      break;

    case I16_LIST:
      if (value == null) {
        unsetI16_list();
      } else {
        setI16_list((List<Short>)value);
      }
      break;

    case I32_LIST:
      if (value == null) {
        unsetI32_list();
      } else {
        setI32_list((List<Integer>)value);
      }
      break;

    case I64_LIST:
      if (value == null) {
        unsetI64_list();
      } else {
        setI64_list((List<Long>)value);
      }
      break;

    case DOUBLE_LIST:
      if (value == null) {
        unsetDouble_list();
      } else {
        setDouble_list((List<Double>)value);
      }
      break;

    case STRING_LIST:
      if (value == null) {
        unsetString_list();
      } else {
        setString_list((List<String>)value);
      }
      break;

    case BINARY_LIST:
      if (value == null) {
        unsetBinary_list();
      } else {
        setBinary_list((List<ByteBuffer>)value);
      }
      break;

    case BOOLEAN_LIST:
      if (value == null) {
        unsetBoolean_list();
      } else {
        setBoolean_list((List<Boolean>)value);
      }
      break;

    case STRUCT_LIST:
      if (value == null) {
        unsetStruct_list();
      } else {
        setStruct_list((List<Empty>)value);
      }
      break;

    case BYTE_SET:
      if (value == null) {
        unsetByte_set();
      } else {
        setByte_set((Set<Byte>)value);
      }
      break;

    case I16_SET:
      if (value == null) {
        unsetI16_set();
      } else {
        setI16_set((Set<Short>)value);
      }
      break;

    case I32_SET:
      if (value == null) {
        unsetI32_set();
      } else {
        setI32_set((Set<Integer>)value);
      }
      break;

    case I64_SET:
      if (value == null) {
        unsetI64_set();
      } else {
        setI64_set((Set<Long>)value);
      }
      break;

    case DOUBLE_SET:
      if (value == null) {
        unsetDouble_set();
      } else {
        setDouble_set((Set<Double>)value);
      }
      break;

    case STRING_SET:
      if (value == null) {
        unsetString_set();
      } else {
        setString_set((Set<String>)value);
      }
      break;

    case BINARY_SET:
      if (value == null) {
        unsetBinary_set();
      } else {
        setBinary_set((Set<ByteBuffer>)value);
      }
      break;

    case BOOLEAN_SET:
      if (value == null) {
        unsetBoolean_set();
      } else {
        setBoolean_set((Set<Boolean>)value);
      }
      break;

    case STRUCT_SET:
      if (value == null) {
        unsetStruct_set();
      } else {
        setStruct_set((Set<Empty>)value);
      }
      break;

    case BYTE_BYTE_MAP:
      if (value == null) {
        unsetByte_byte_map();
      } else {
        setByte_byte_map((Map<Byte,Byte>)value);
      }
      break;

    case I16_BYTE_MAP:
      if (value == null) {
        unsetI16_byte_map();
      } else {
        setI16_byte_map((Map<Short,Byte>)value);
      }
      break;

    case I32_BYTE_MAP:
      if (value == null) {
        unsetI32_byte_map();
      } else {
        setI32_byte_map((Map<Integer,Byte>)value);
      }
      break;

    case I64_BYTE_MAP:
      if (value == null) {
        unsetI64_byte_map();
      } else {
        setI64_byte_map((Map<Long,Byte>)value);
      }
      break;

    case DOUBLE_BYTE_MAP:
      if (value == null) {
        unsetDouble_byte_map();
      } else {
        setDouble_byte_map((Map<Double,Byte>)value);
      }
      break;

    case STRING_BYTE_MAP:
      if (value == null) {
        unsetString_byte_map();
      } else {
        setString_byte_map((Map<String,Byte>)value);
      }
      break;

    case BINARY_BYTE_MAP:
      if (value == null) {
        unsetBinary_byte_map();
      } else {
        setBinary_byte_map((Map<ByteBuffer,Byte>)value);
      }
      break;

    case BOOLEAN_BYTE_MAP:
      if (value == null) {
        unsetBoolean_byte_map();
      } else {
        setBoolean_byte_map((Map<Boolean,Byte>)value);
      }
      break;

    case BYTE_I16_MAP:
      if (value == null) {
        unsetByte_i16_map();
      } else {
        setByte_i16_map((Map<Byte,Short>)value);
      }
      break;

    case BYTE_I32_MAP:
      if (value == null) {
        unsetByte_i32_map();
      } else {
        setByte_i32_map((Map<Byte,Integer>)value);
      }
      break;

    case BYTE_I64_MAP:
      if (value == null) {
        unsetByte_i64_map();
      } else {
        setByte_i64_map((Map<Byte,Long>)value);
      }
      break;

    case BYTE_DOUBLE_MAP:
      if (value == null) {
        unsetByte_double_map();
      } else {
        setByte_double_map((Map<Byte,Double>)value);
      }
      break;

    case BYTE_STRING_MAP:
      if (value == null) {
        unsetByte_string_map();
      } else {
        setByte_string_map((Map<Byte,String>)value);
      }
      break;

    case BYTE_BINARY_MAP:
      if (value == null) {
        unsetByte_binary_map();
      } else {
        setByte_binary_map((Map<Byte,ByteBuffer>)value);
      }
      break;

    case BYTE_BOOLEAN_MAP:
      if (value == null) {
        unsetByte_boolean_map();
      } else {
        setByte_boolean_map((Map<Byte,Boolean>)value);
      }
      break;

    case LIST_BYTE_MAP:
      if (value == null) {
        unsetList_byte_map();
      } else {
        setList_byte_map((Map<List<Byte>,Byte>)value);
      }
      break;

    case SET_BYTE_MAP:
      if (value == null) {
        unsetSet_byte_map();
      } else {
        setSet_byte_map((Map<Set<Byte>,Byte>)value);
      }
      break;

    case MAP_BYTE_MAP:
      if (value == null) {
        unsetMap_byte_map();
      } else {
        setMap_byte_map((Map<Map<Byte,Byte>,Byte>)value);
      }
      break;

    case BYTE_MAP_MAP:
      if (value == null) {
        unsetByte_map_map();
      } else {
        setByte_map_map((Map<Byte,Map<Byte,Byte>>)value);
      }
      break;

    case BYTE_SET_MAP:
      if (value == null) {
        unsetByte_set_map();
      } else {
        setByte_set_map((Map<Byte,Set<Byte>>)value);
      }
      break;

    case BYTE_LIST_MAP:
      if (value == null) {
        unsetByte_list_map();
      } else {
        setByte_list_map((Map<Byte,List<Byte>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A_BYTE:
      return getA_byte();

    case A_I16:
      return getA_i16();

    case A_I32:
      return getA_i32();

    case A_I64:
      return getA_i64();

    case A_DOUBLE:
      return getA_double();

    case A_STRING:
      return getA_string();

    case A_BINARY:
      return getA_binary();

    case TRUE_FIELD:
      return isTrue_field();

    case FALSE_FIELD:
      return isFalse_field();

    case EMPTY_STRUCT_FIELD:
      return getEmpty_struct_field();

    case BYTE_LIST:
      return getByte_list();

    case I16_LIST:
      return getI16_list();

    case I32_LIST:
      return getI32_list();

    case I64_LIST:
      return getI64_list();

    case DOUBLE_LIST:
      return getDouble_list();

    case STRING_LIST:
      return getString_list();

    case BINARY_LIST:
      return getBinary_list();

    case BOOLEAN_LIST:
      return getBoolean_list();

    case STRUCT_LIST:
      return getStruct_list();

    case BYTE_SET:
      return getByte_set();

    case I16_SET:
      return getI16_set();

    case I32_SET:
      return getI32_set();

    case I64_SET:
      return getI64_set();

    case DOUBLE_SET:
      return getDouble_set();

    case STRING_SET:
      return getString_set();

    case BINARY_SET:
      return getBinary_set();

    case BOOLEAN_SET:
      return getBoolean_set();

    case STRUCT_SET:
      return getStruct_set();

    case BYTE_BYTE_MAP:
      return getByte_byte_map();

    case I16_BYTE_MAP:
      return getI16_byte_map();

    case I32_BYTE_MAP:
      return getI32_byte_map();

    case I64_BYTE_MAP:
      return getI64_byte_map();

    case DOUBLE_BYTE_MAP:
      return getDouble_byte_map();

    case STRING_BYTE_MAP:
      return getString_byte_map();

    case BINARY_BYTE_MAP:
      return getBinary_byte_map();

    case BOOLEAN_BYTE_MAP:
      return getBoolean_byte_map();

    case BYTE_I16_MAP:
      return getByte_i16_map();

    case BYTE_I32_MAP:
      return getByte_i32_map();

    case BYTE_I64_MAP:
      return getByte_i64_map();

    case BYTE_DOUBLE_MAP:
      return getByte_double_map();

    case BYTE_STRING_MAP:
      return getByte_string_map();

    case BYTE_BINARY_MAP:
      return getByte_binary_map();

    case BYTE_BOOLEAN_MAP:
      return getByte_boolean_map();

    case LIST_BYTE_MAP:
      return getList_byte_map();

    case SET_BYTE_MAP:
      return getSet_byte_map();

    case MAP_BYTE_MAP:
      return getMap_byte_map();

    case BYTE_MAP_MAP:
      return getByte_map_map();

    case BYTE_SET_MAP:
      return getByte_set_map();

    case BYTE_LIST_MAP:
      return getByte_list_map();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A_BYTE:
      return isSetA_byte();
    case A_I16:
      return isSetA_i16();
    case A_I32:
      return isSetA_i32();
    case A_I64:
      return isSetA_i64();
    case A_DOUBLE:
      return isSetA_double();
    case A_STRING:
      return isSetA_string();
    case A_BINARY:
      return isSetA_binary();
    case TRUE_FIELD:
      return isSetTrue_field();
    case FALSE_FIELD:
      return isSetFalse_field();
    case EMPTY_STRUCT_FIELD:
      return isSetEmpty_struct_field();
    case BYTE_LIST:
      return isSetByte_list();
    case I16_LIST:
      return isSetI16_list();
    case I32_LIST:
      return isSetI32_list();
    case I64_LIST:
      return isSetI64_list();
    case DOUBLE_LIST:
      return isSetDouble_list();
    case STRING_LIST:
      return isSetString_list();
    case BINARY_LIST:
      return isSetBinary_list();
    case BOOLEAN_LIST:
      return isSetBoolean_list();
    case STRUCT_LIST:
      return isSetStruct_list();
    case BYTE_SET:
      return isSetByte_set();
    case I16_SET:
      return isSetI16_set();
    case I32_SET:
      return isSetI32_set();
    case I64_SET:
      return isSetI64_set();
    case DOUBLE_SET:
      return isSetDouble_set();
    case STRING_SET:
      return isSetString_set();
    case BINARY_SET:
      return isSetBinary_set();
    case BOOLEAN_SET:
      return isSetBoolean_set();
    case STRUCT_SET:
      return isSetStruct_set();
    case BYTE_BYTE_MAP:
      return isSetByte_byte_map();
    case I16_BYTE_MAP:
      return isSetI16_byte_map();
    case I32_BYTE_MAP:
      return isSetI32_byte_map();
    case I64_BYTE_MAP:
      return isSetI64_byte_map();
    case DOUBLE_BYTE_MAP:
      return isSetDouble_byte_map();
    case STRING_BYTE_MAP:
      return isSetString_byte_map();
    case BINARY_BYTE_MAP:
      return isSetBinary_byte_map();
    case BOOLEAN_BYTE_MAP:
      return isSetBoolean_byte_map();
    case BYTE_I16_MAP:
      return isSetByte_i16_map();
    case BYTE_I32_MAP:
      return isSetByte_i32_map();
    case BYTE_I64_MAP:
      return isSetByte_i64_map();
    case BYTE_DOUBLE_MAP:
      return isSetByte_double_map();
    case BYTE_STRING_MAP:
      return isSetByte_string_map();
    case BYTE_BINARY_MAP:
      return isSetByte_binary_map();
    case BYTE_BOOLEAN_MAP:
      return isSetByte_boolean_map();
    case LIST_BYTE_MAP:
      return isSetList_byte_map();
    case SET_BYTE_MAP:
      return isSetSet_byte_map();
    case MAP_BYTE_MAP:
      return isSetMap_byte_map();
    case BYTE_MAP_MAP:
      return isSetByte_map_map();
    case BYTE_SET_MAP:
      return isSetByte_set_map();
    case BYTE_LIST_MAP:
      return isSetByte_list_map();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompactProtoTestStruct)
      return this.equals((CompactProtoTestStruct)that);
    return false;
  }

  public boolean equals(CompactProtoTestStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a_byte = true;
    boolean that_present_a_byte = true;
    if (this_present_a_byte || that_present_a_byte) {
      if (!(this_present_a_byte && that_present_a_byte))
        return false;
      if (this.a_byte != that.a_byte)
        return false;
    }

    boolean this_present_a_i16 = true;
    boolean that_present_a_i16 = true;
    if (this_present_a_i16 || that_present_a_i16) {
      if (!(this_present_a_i16 && that_present_a_i16))
        return false;
      if (this.a_i16 != that.a_i16)
        return false;
    }

    boolean this_present_a_i32 = true;
    boolean that_present_a_i32 = true;
    if (this_present_a_i32 || that_present_a_i32) {
      if (!(this_present_a_i32 && that_present_a_i32))
        return false;
      if (this.a_i32 != that.a_i32)
        return false;
    }

    boolean this_present_a_i64 = true;
    boolean that_present_a_i64 = true;
    if (this_present_a_i64 || that_present_a_i64) {
      if (!(this_present_a_i64 && that_present_a_i64))
        return false;
      if (this.a_i64 != that.a_i64)
        return false;
    }

    boolean this_present_a_double = true;
    boolean that_present_a_double = true;
    if (this_present_a_double || that_present_a_double) {
      if (!(this_present_a_double && that_present_a_double))
        return false;
      if (this.a_double != that.a_double)
        return false;
    }

    boolean this_present_a_string = true && this.isSetA_string();
    boolean that_present_a_string = true && that.isSetA_string();
    if (this_present_a_string || that_present_a_string) {
      if (!(this_present_a_string && that_present_a_string))
        return false;
      if (!this.a_string.equals(that.a_string))
        return false;
    }

    boolean this_present_a_binary = true && this.isSetA_binary();
    boolean that_present_a_binary = true && that.isSetA_binary();
    if (this_present_a_binary || that_present_a_binary) {
      if (!(this_present_a_binary && that_present_a_binary))
        return false;
      if (!this.a_binary.equals(that.a_binary))
        return false;
    }

    boolean this_present_true_field = true;
    boolean that_present_true_field = true;
    if (this_present_true_field || that_present_true_field) {
      if (!(this_present_true_field && that_present_true_field))
        return false;
      if (this.true_field != that.true_field)
        return false;
    }

    boolean this_present_false_field = true;
    boolean that_present_false_field = true;
    if (this_present_false_field || that_present_false_field) {
      if (!(this_present_false_field && that_present_false_field))
        return false;
      if (this.false_field != that.false_field)
        return false;
    }

    boolean this_present_empty_struct_field = true && this.isSetEmpty_struct_field();
    boolean that_present_empty_struct_field = true && that.isSetEmpty_struct_field();
    if (this_present_empty_struct_field || that_present_empty_struct_field) {
      if (!(this_present_empty_struct_field && that_present_empty_struct_field))
        return false;
      if (!this.empty_struct_field.equals(that.empty_struct_field))
        return false;
    }

    boolean this_present_byte_list = true && this.isSetByte_list();
    boolean that_present_byte_list = true && that.isSetByte_list();
    if (this_present_byte_list || that_present_byte_list) {
      if (!(this_present_byte_list && that_present_byte_list))
        return false;
      if (!this.byte_list.equals(that.byte_list))
        return false;
    }

    boolean this_present_i16_list = true && this.isSetI16_list();
    boolean that_present_i16_list = true && that.isSetI16_list();
    if (this_present_i16_list || that_present_i16_list) {
      if (!(this_present_i16_list && that_present_i16_list))
        return false;
      if (!this.i16_list.equals(that.i16_list))
        return false;
    }

    boolean this_present_i32_list = true && this.isSetI32_list();
    boolean that_present_i32_list = true && that.isSetI32_list();
    if (this_present_i32_list || that_present_i32_list) {
      if (!(this_present_i32_list && that_present_i32_list))
        return false;
      if (!this.i32_list.equals(that.i32_list))
        return false;
    }

    boolean this_present_i64_list = true && this.isSetI64_list();
    boolean that_present_i64_list = true && that.isSetI64_list();
    if (this_present_i64_list || that_present_i64_list) {
      if (!(this_present_i64_list && that_present_i64_list))
        return false;
      if (!this.i64_list.equals(that.i64_list))
        return false;
    }

    boolean this_present_double_list = true && this.isSetDouble_list();
    boolean that_present_double_list = true && that.isSetDouble_list();
    if (this_present_double_list || that_present_double_list) {
      if (!(this_present_double_list && that_present_double_list))
        return false;
      if (!this.double_list.equals(that.double_list))
        return false;
    }

    boolean this_present_string_list = true && this.isSetString_list();
    boolean that_present_string_list = true && that.isSetString_list();
    if (this_present_string_list || that_present_string_list) {
      if (!(this_present_string_list && that_present_string_list))
        return false;
      if (!this.string_list.equals(that.string_list))
        return false;
    }

    boolean this_present_binary_list = true && this.isSetBinary_list();
    boolean that_present_binary_list = true && that.isSetBinary_list();
    if (this_present_binary_list || that_present_binary_list) {
      if (!(this_present_binary_list && that_present_binary_list))
        return false;
      if (!this.binary_list.equals(that.binary_list))
        return false;
    }

    boolean this_present_boolean_list = true && this.isSetBoolean_list();
    boolean that_present_boolean_list = true && that.isSetBoolean_list();
    if (this_present_boolean_list || that_present_boolean_list) {
      if (!(this_present_boolean_list && that_present_boolean_list))
        return false;
      if (!this.boolean_list.equals(that.boolean_list))
        return false;
    }

    boolean this_present_struct_list = true && this.isSetStruct_list();
    boolean that_present_struct_list = true && that.isSetStruct_list();
    if (this_present_struct_list || that_present_struct_list) {
      if (!(this_present_struct_list && that_present_struct_list))
        return false;
      if (!this.struct_list.equals(that.struct_list))
        return false;
    }

    boolean this_present_byte_set = true && this.isSetByte_set();
    boolean that_present_byte_set = true && that.isSetByte_set();
    if (this_present_byte_set || that_present_byte_set) {
      if (!(this_present_byte_set && that_present_byte_set))
        return false;
      if (!this.byte_set.equals(that.byte_set))
        return false;
    }

    boolean this_present_i16_set = true && this.isSetI16_set();
    boolean that_present_i16_set = true && that.isSetI16_set();
    if (this_present_i16_set || that_present_i16_set) {
      if (!(this_present_i16_set && that_present_i16_set))
        return false;
      if (!this.i16_set.equals(that.i16_set))
        return false;
    }

    boolean this_present_i32_set = true && this.isSetI32_set();
    boolean that_present_i32_set = true && that.isSetI32_set();
    if (this_present_i32_set || that_present_i32_set) {
      if (!(this_present_i32_set && that_present_i32_set))
        return false;
      if (!this.i32_set.equals(that.i32_set))
        return false;
    }

    boolean this_present_i64_set = true && this.isSetI64_set();
    boolean that_present_i64_set = true && that.isSetI64_set();
    if (this_present_i64_set || that_present_i64_set) {
      if (!(this_present_i64_set && that_present_i64_set))
        return false;
      if (!this.i64_set.equals(that.i64_set))
        return false;
    }

    boolean this_present_double_set = true && this.isSetDouble_set();
    boolean that_present_double_set = true && that.isSetDouble_set();
    if (this_present_double_set || that_present_double_set) {
      if (!(this_present_double_set && that_present_double_set))
        return false;
      if (!this.double_set.equals(that.double_set))
        return false;
    }

    boolean this_present_string_set = true && this.isSetString_set();
    boolean that_present_string_set = true && that.isSetString_set();
    if (this_present_string_set || that_present_string_set) {
      if (!(this_present_string_set && that_present_string_set))
        return false;
      if (!this.string_set.equals(that.string_set))
        return false;
    }

    boolean this_present_binary_set = true && this.isSetBinary_set();
    boolean that_present_binary_set = true && that.isSetBinary_set();
    if (this_present_binary_set || that_present_binary_set) {
      if (!(this_present_binary_set && that_present_binary_set))
        return false;
      if (!this.binary_set.equals(that.binary_set))
        return false;
    }

    boolean this_present_boolean_set = true && this.isSetBoolean_set();
    boolean that_present_boolean_set = true && that.isSetBoolean_set();
    if (this_present_boolean_set || that_present_boolean_set) {
      if (!(this_present_boolean_set && that_present_boolean_set))
        return false;
      if (!this.boolean_set.equals(that.boolean_set))
        return false;
    }

    boolean this_present_struct_set = true && this.isSetStruct_set();
    boolean that_present_struct_set = true && that.isSetStruct_set();
    if (this_present_struct_set || that_present_struct_set) {
      if (!(this_present_struct_set && that_present_struct_set))
        return false;
      if (!this.struct_set.equals(that.struct_set))
        return false;
    }

    boolean this_present_byte_byte_map = true && this.isSetByte_byte_map();
    boolean that_present_byte_byte_map = true && that.isSetByte_byte_map();
    if (this_present_byte_byte_map || that_present_byte_byte_map) {
      if (!(this_present_byte_byte_map && that_present_byte_byte_map))
        return false;
      if (!this.byte_byte_map.equals(that.byte_byte_map))
        return false;
    }

    boolean this_present_i16_byte_map = true && this.isSetI16_byte_map();
    boolean that_present_i16_byte_map = true && that.isSetI16_byte_map();
    if (this_present_i16_byte_map || that_present_i16_byte_map) {
      if (!(this_present_i16_byte_map && that_present_i16_byte_map))
        return false;
      if (!this.i16_byte_map.equals(that.i16_byte_map))
        return false;
    }

    boolean this_present_i32_byte_map = true && this.isSetI32_byte_map();
    boolean that_present_i32_byte_map = true && that.isSetI32_byte_map();
    if (this_present_i32_byte_map || that_present_i32_byte_map) {
      if (!(this_present_i32_byte_map && that_present_i32_byte_map))
        return false;
      if (!this.i32_byte_map.equals(that.i32_byte_map))
        return false;
    }

    boolean this_present_i64_byte_map = true && this.isSetI64_byte_map();
    boolean that_present_i64_byte_map = true && that.isSetI64_byte_map();
    if (this_present_i64_byte_map || that_present_i64_byte_map) {
      if (!(this_present_i64_byte_map && that_present_i64_byte_map))
        return false;
      if (!this.i64_byte_map.equals(that.i64_byte_map))
        return false;
    }

    boolean this_present_double_byte_map = true && this.isSetDouble_byte_map();
    boolean that_present_double_byte_map = true && that.isSetDouble_byte_map();
    if (this_present_double_byte_map || that_present_double_byte_map) {
      if (!(this_present_double_byte_map && that_present_double_byte_map))
        return false;
      if (!this.double_byte_map.equals(that.double_byte_map))
        return false;
    }

    boolean this_present_string_byte_map = true && this.isSetString_byte_map();
    boolean that_present_string_byte_map = true && that.isSetString_byte_map();
    if (this_present_string_byte_map || that_present_string_byte_map) {
      if (!(this_present_string_byte_map && that_present_string_byte_map))
        return false;
      if (!this.string_byte_map.equals(that.string_byte_map))
        return false;
    }

    boolean this_present_binary_byte_map = true && this.isSetBinary_byte_map();
    boolean that_present_binary_byte_map = true && that.isSetBinary_byte_map();
    if (this_present_binary_byte_map || that_present_binary_byte_map) {
      if (!(this_present_binary_byte_map && that_present_binary_byte_map))
        return false;
      if (!this.binary_byte_map.equals(that.binary_byte_map))
        return false;
    }

    boolean this_present_boolean_byte_map = true && this.isSetBoolean_byte_map();
    boolean that_present_boolean_byte_map = true && that.isSetBoolean_byte_map();
    if (this_present_boolean_byte_map || that_present_boolean_byte_map) {
      if (!(this_present_boolean_byte_map && that_present_boolean_byte_map))
        return false;
      if (!this.boolean_byte_map.equals(that.boolean_byte_map))
        return false;
    }

    boolean this_present_byte_i16_map = true && this.isSetByte_i16_map();
    boolean that_present_byte_i16_map = true && that.isSetByte_i16_map();
    if (this_present_byte_i16_map || that_present_byte_i16_map) {
      if (!(this_present_byte_i16_map && that_present_byte_i16_map))
        return false;
      if (!this.byte_i16_map.equals(that.byte_i16_map))
        return false;
    }

    boolean this_present_byte_i32_map = true && this.isSetByte_i32_map();
    boolean that_present_byte_i32_map = true && that.isSetByte_i32_map();
    if (this_present_byte_i32_map || that_present_byte_i32_map) {
      if (!(this_present_byte_i32_map && that_present_byte_i32_map))
        return false;
      if (!this.byte_i32_map.equals(that.byte_i32_map))
        return false;
    }

    boolean this_present_byte_i64_map = true && this.isSetByte_i64_map();
    boolean that_present_byte_i64_map = true && that.isSetByte_i64_map();
    if (this_present_byte_i64_map || that_present_byte_i64_map) {
      if (!(this_present_byte_i64_map && that_present_byte_i64_map))
        return false;
      if (!this.byte_i64_map.equals(that.byte_i64_map))
        return false;
    }

    boolean this_present_byte_double_map = true && this.isSetByte_double_map();
    boolean that_present_byte_double_map = true && that.isSetByte_double_map();
    if (this_present_byte_double_map || that_present_byte_double_map) {
      if (!(this_present_byte_double_map && that_present_byte_double_map))
        return false;
      if (!this.byte_double_map.equals(that.byte_double_map))
        return false;
    }

    boolean this_present_byte_string_map = true && this.isSetByte_string_map();
    boolean that_present_byte_string_map = true && that.isSetByte_string_map();
    if (this_present_byte_string_map || that_present_byte_string_map) {
      if (!(this_present_byte_string_map && that_present_byte_string_map))
        return false;
      if (!this.byte_string_map.equals(that.byte_string_map))
        return false;
    }

    boolean this_present_byte_binary_map = true && this.isSetByte_binary_map();
    boolean that_present_byte_binary_map = true && that.isSetByte_binary_map();
    if (this_present_byte_binary_map || that_present_byte_binary_map) {
      if (!(this_present_byte_binary_map && that_present_byte_binary_map))
        return false;
      if (!this.byte_binary_map.equals(that.byte_binary_map))
        return false;
    }

    boolean this_present_byte_boolean_map = true && this.isSetByte_boolean_map();
    boolean that_present_byte_boolean_map = true && that.isSetByte_boolean_map();
    if (this_present_byte_boolean_map || that_present_byte_boolean_map) {
      if (!(this_present_byte_boolean_map && that_present_byte_boolean_map))
        return false;
      if (!this.byte_boolean_map.equals(that.byte_boolean_map))
        return false;
    }

    boolean this_present_list_byte_map = true && this.isSetList_byte_map();
    boolean that_present_list_byte_map = true && that.isSetList_byte_map();
    if (this_present_list_byte_map || that_present_list_byte_map) {
      if (!(this_present_list_byte_map && that_present_list_byte_map))
        return false;
      if (!this.list_byte_map.equals(that.list_byte_map))
        return false;
    }

    boolean this_present_set_byte_map = true && this.isSetSet_byte_map();
    boolean that_present_set_byte_map = true && that.isSetSet_byte_map();
    if (this_present_set_byte_map || that_present_set_byte_map) {
      if (!(this_present_set_byte_map && that_present_set_byte_map))
        return false;
      if (!this.set_byte_map.equals(that.set_byte_map))
        return false;
    }

    boolean this_present_map_byte_map = true && this.isSetMap_byte_map();
    boolean that_present_map_byte_map = true && that.isSetMap_byte_map();
    if (this_present_map_byte_map || that_present_map_byte_map) {
      if (!(this_present_map_byte_map && that_present_map_byte_map))
        return false;
      if (!this.map_byte_map.equals(that.map_byte_map))
        return false;
    }

    boolean this_present_byte_map_map = true && this.isSetByte_map_map();
    boolean that_present_byte_map_map = true && that.isSetByte_map_map();
    if (this_present_byte_map_map || that_present_byte_map_map) {
      if (!(this_present_byte_map_map && that_present_byte_map_map))
        return false;
      if (!this.byte_map_map.equals(that.byte_map_map))
        return false;
    }

    boolean this_present_byte_set_map = true && this.isSetByte_set_map();
    boolean that_present_byte_set_map = true && that.isSetByte_set_map();
    if (this_present_byte_set_map || that_present_byte_set_map) {
      if (!(this_present_byte_set_map && that_present_byte_set_map))
        return false;
      if (!this.byte_set_map.equals(that.byte_set_map))
        return false;
    }

    boolean this_present_byte_list_map = true && this.isSetByte_list_map();
    boolean that_present_byte_list_map = true && that.isSetByte_list_map();
    if (this_present_byte_list_map || that_present_byte_list_map) {
      if (!(this_present_byte_list_map && that_present_byte_list_map))
        return false;
      if (!this.byte_list_map.equals(that.byte_list_map))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (a_byte);

    hashCode = hashCode * 8191 + a_i16;

    hashCode = hashCode * 8191 + a_i32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a_i64);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a_double);

    hashCode = hashCode * 8191 + ((isSetA_string()) ? 131071 : 524287);
    if (isSetA_string())
      hashCode = hashCode * 8191 + a_string.hashCode();

    hashCode = hashCode * 8191 + ((isSetA_binary()) ? 131071 : 524287);
    if (isSetA_binary())
      hashCode = hashCode * 8191 + a_binary.hashCode();

    hashCode = hashCode * 8191 + ((true_field) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((false_field) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEmpty_struct_field()) ? 131071 : 524287);
    if (isSetEmpty_struct_field())
      hashCode = hashCode * 8191 + empty_struct_field.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_list()) ? 131071 : 524287);
    if (isSetByte_list())
      hashCode = hashCode * 8191 + byte_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetI16_list()) ? 131071 : 524287);
    if (isSetI16_list())
      hashCode = hashCode * 8191 + i16_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetI32_list()) ? 131071 : 524287);
    if (isSetI32_list())
      hashCode = hashCode * 8191 + i32_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetI64_list()) ? 131071 : 524287);
    if (isSetI64_list())
      hashCode = hashCode * 8191 + i64_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetDouble_list()) ? 131071 : 524287);
    if (isSetDouble_list())
      hashCode = hashCode * 8191 + double_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_list()) ? 131071 : 524287);
    if (isSetString_list())
      hashCode = hashCode * 8191 + string_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinary_list()) ? 131071 : 524287);
    if (isSetBinary_list())
      hashCode = hashCode * 8191 + binary_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoolean_list()) ? 131071 : 524287);
    if (isSetBoolean_list())
      hashCode = hashCode * 8191 + boolean_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetStruct_list()) ? 131071 : 524287);
    if (isSetStruct_list())
      hashCode = hashCode * 8191 + struct_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_set()) ? 131071 : 524287);
    if (isSetByte_set())
      hashCode = hashCode * 8191 + byte_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetI16_set()) ? 131071 : 524287);
    if (isSetI16_set())
      hashCode = hashCode * 8191 + i16_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetI32_set()) ? 131071 : 524287);
    if (isSetI32_set())
      hashCode = hashCode * 8191 + i32_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetI64_set()) ? 131071 : 524287);
    if (isSetI64_set())
      hashCode = hashCode * 8191 + i64_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetDouble_set()) ? 131071 : 524287);
    if (isSetDouble_set())
      hashCode = hashCode * 8191 + double_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_set()) ? 131071 : 524287);
    if (isSetString_set())
      hashCode = hashCode * 8191 + string_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinary_set()) ? 131071 : 524287);
    if (isSetBinary_set())
      hashCode = hashCode * 8191 + binary_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoolean_set()) ? 131071 : 524287);
    if (isSetBoolean_set())
      hashCode = hashCode * 8191 + boolean_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetStruct_set()) ? 131071 : 524287);
    if (isSetStruct_set())
      hashCode = hashCode * 8191 + struct_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_byte_map()) ? 131071 : 524287);
    if (isSetByte_byte_map())
      hashCode = hashCode * 8191 + byte_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetI16_byte_map()) ? 131071 : 524287);
    if (isSetI16_byte_map())
      hashCode = hashCode * 8191 + i16_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetI32_byte_map()) ? 131071 : 524287);
    if (isSetI32_byte_map())
      hashCode = hashCode * 8191 + i32_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetI64_byte_map()) ? 131071 : 524287);
    if (isSetI64_byte_map())
      hashCode = hashCode * 8191 + i64_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetDouble_byte_map()) ? 131071 : 524287);
    if (isSetDouble_byte_map())
      hashCode = hashCode * 8191 + double_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_byte_map()) ? 131071 : 524287);
    if (isSetString_byte_map())
      hashCode = hashCode * 8191 + string_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinary_byte_map()) ? 131071 : 524287);
    if (isSetBinary_byte_map())
      hashCode = hashCode * 8191 + binary_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoolean_byte_map()) ? 131071 : 524287);
    if (isSetBoolean_byte_map())
      hashCode = hashCode * 8191 + boolean_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_i16_map()) ? 131071 : 524287);
    if (isSetByte_i16_map())
      hashCode = hashCode * 8191 + byte_i16_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_i32_map()) ? 131071 : 524287);
    if (isSetByte_i32_map())
      hashCode = hashCode * 8191 + byte_i32_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_i64_map()) ? 131071 : 524287);
    if (isSetByte_i64_map())
      hashCode = hashCode * 8191 + byte_i64_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_double_map()) ? 131071 : 524287);
    if (isSetByte_double_map())
      hashCode = hashCode * 8191 + byte_double_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_string_map()) ? 131071 : 524287);
    if (isSetByte_string_map())
      hashCode = hashCode * 8191 + byte_string_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_binary_map()) ? 131071 : 524287);
    if (isSetByte_binary_map())
      hashCode = hashCode * 8191 + byte_binary_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_boolean_map()) ? 131071 : 524287);
    if (isSetByte_boolean_map())
      hashCode = hashCode * 8191 + byte_boolean_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_byte_map()) ? 131071 : 524287);
    if (isSetList_byte_map())
      hashCode = hashCode * 8191 + list_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetSet_byte_map()) ? 131071 : 524287);
    if (isSetSet_byte_map())
      hashCode = hashCode * 8191 + set_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetMap_byte_map()) ? 131071 : 524287);
    if (isSetMap_byte_map())
      hashCode = hashCode * 8191 + map_byte_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_map_map()) ? 131071 : 524287);
    if (isSetByte_map_map())
      hashCode = hashCode * 8191 + byte_map_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_set_map()) ? 131071 : 524287);
    if (isSetByte_set_map())
      hashCode = hashCode * 8191 + byte_set_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_list_map()) ? 131071 : 524287);
    if (isSetByte_list_map())
      hashCode = hashCode * 8191 + byte_list_map.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CompactProtoTestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA_byte()).compareTo(other.isSetA_byte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_byte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_byte, other.a_byte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_i16()).compareTo(other.isSetA_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_i16, other.a_i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_i32()).compareTo(other.isSetA_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_i32, other.a_i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_i64()).compareTo(other.isSetA_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_i64, other.a_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_double()).compareTo(other.isSetA_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_double, other.a_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_string()).compareTo(other.isSetA_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_string, other.a_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_binary()).compareTo(other.isSetA_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_binary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_binary, other.a_binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrue_field()).compareTo(other.isSetTrue_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrue_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.true_field, other.true_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFalse_field()).compareTo(other.isSetFalse_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFalse_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.false_field, other.false_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmpty_struct_field()).compareTo(other.isSetEmpty_struct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpty_struct_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empty_struct_field, other.empty_struct_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_list()).compareTo(other.isSetByte_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_list, other.byte_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_list()).compareTo(other.isSetI16_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_list, other.i16_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_list()).compareTo(other.isSetI32_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_list, other.i32_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_list()).compareTo(other.isSetI64_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_list, other.i64_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_list()).compareTo(other.isSetDouble_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_list, other.double_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_list()).compareTo(other.isSetString_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_list, other.string_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_list()).compareTo(other.isSetBinary_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_list, other.binary_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolean_list()).compareTo(other.isSetBoolean_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolean_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_list, other.boolean_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStruct_list()).compareTo(other.isSetStruct_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStruct_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.struct_list, other.struct_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_set()).compareTo(other.isSetByte_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_set, other.byte_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_set()).compareTo(other.isSetI16_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_set, other.i16_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_set()).compareTo(other.isSetI32_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_set, other.i32_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_set()).compareTo(other.isSetI64_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_set, other.i64_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_set()).compareTo(other.isSetDouble_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_set, other.double_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_set()).compareTo(other.isSetString_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_set, other.string_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_set()).compareTo(other.isSetBinary_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_set, other.binary_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolean_set()).compareTo(other.isSetBoolean_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolean_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_set, other.boolean_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStruct_set()).compareTo(other.isSetStruct_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStruct_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.struct_set, other.struct_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_byte_map()).compareTo(other.isSetByte_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_byte_map, other.byte_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_byte_map()).compareTo(other.isSetI16_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_byte_map, other.i16_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_byte_map()).compareTo(other.isSetI32_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_byte_map, other.i32_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_byte_map()).compareTo(other.isSetI64_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_byte_map, other.i64_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_byte_map()).compareTo(other.isSetDouble_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_byte_map, other.double_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_byte_map()).compareTo(other.isSetString_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_byte_map, other.string_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_byte_map()).compareTo(other.isSetBinary_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_byte_map, other.binary_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolean_byte_map()).compareTo(other.isSetBoolean_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolean_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_byte_map, other.boolean_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_i16_map()).compareTo(other.isSetByte_i16_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_i16_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_i16_map, other.byte_i16_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_i32_map()).compareTo(other.isSetByte_i32_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_i32_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_i32_map, other.byte_i32_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_i64_map()).compareTo(other.isSetByte_i64_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_i64_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_i64_map, other.byte_i64_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_double_map()).compareTo(other.isSetByte_double_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_double_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_double_map, other.byte_double_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_string_map()).compareTo(other.isSetByte_string_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_string_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_string_map, other.byte_string_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_binary_map()).compareTo(other.isSetByte_binary_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_binary_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_binary_map, other.byte_binary_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_boolean_map()).compareTo(other.isSetByte_boolean_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_boolean_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_boolean_map, other.byte_boolean_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetList_byte_map()).compareTo(other.isSetList_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_byte_map, other.list_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_byte_map()).compareTo(other.isSetSet_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_byte_map, other.set_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMap_byte_map()).compareTo(other.isSetMap_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_byte_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_byte_map, other.map_byte_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_map_map()).compareTo(other.isSetByte_map_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_map_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_map_map, other.byte_map_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_set_map()).compareTo(other.isSetByte_set_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_set_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_set_map, other.byte_set_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_list_map()).compareTo(other.isSetByte_list_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_list_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_list_map, other.byte_list_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompactProtoTestStruct(");
    boolean first = true;

    sb.append("a_byte:");
    sb.append(this.a_byte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_i16:");
    sb.append(this.a_i16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_i32:");
    sb.append(this.a_i32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_i64:");
    sb.append(this.a_i64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_double:");
    sb.append(this.a_double);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_string:");
    if (this.a_string == null) {
      sb.append("null");
    } else {
      sb.append(this.a_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_binary:");
    if (this.a_binary == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.a_binary, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("true_field:");
    sb.append(this.true_field);
    first = false;
    if (!first) sb.append(", ");
    sb.append("false_field:");
    sb.append(this.false_field);
    first = false;
    if (!first) sb.append(", ");
    sb.append("empty_struct_field:");
    if (this.empty_struct_field == null) {
      sb.append("null");
    } else {
      sb.append(this.empty_struct_field);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_list:");
    if (this.byte_list == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_list:");
    if (this.i16_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i16_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_list:");
    if (this.i32_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i32_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_list:");
    if (this.i64_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i64_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_list:");
    if (this.double_list == null) {
      sb.append("null");
    } else {
      sb.append(this.double_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string_list:");
    if (this.string_list == null) {
      sb.append("null");
    } else {
      sb.append(this.string_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binary_list:");
    if (this.binary_list == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binary_list, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolean_list:");
    if (this.boolean_list == null) {
      sb.append("null");
    } else {
      sb.append(this.boolean_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("struct_list:");
    if (this.struct_list == null) {
      sb.append("null");
    } else {
      sb.append(this.struct_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_set:");
    if (this.byte_set == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_set:");
    if (this.i16_set == null) {
      sb.append("null");
    } else {
      sb.append(this.i16_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_set:");
    if (this.i32_set == null) {
      sb.append("null");
    } else {
      sb.append(this.i32_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_set:");
    if (this.i64_set == null) {
      sb.append("null");
    } else {
      sb.append(this.i64_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_set:");
    if (this.double_set == null) {
      sb.append("null");
    } else {
      sb.append(this.double_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string_set:");
    if (this.string_set == null) {
      sb.append("null");
    } else {
      sb.append(this.string_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binary_set:");
    if (this.binary_set == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binary_set, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolean_set:");
    if (this.boolean_set == null) {
      sb.append("null");
    } else {
      sb.append(this.boolean_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("struct_set:");
    if (this.struct_set == null) {
      sb.append("null");
    } else {
      sb.append(this.struct_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_byte_map:");
    if (this.byte_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_byte_map:");
    if (this.i16_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.i16_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_byte_map:");
    if (this.i32_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.i32_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_byte_map:");
    if (this.i64_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.i64_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_byte_map:");
    if (this.double_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.double_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string_byte_map:");
    if (this.string_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.string_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binary_byte_map:");
    if (this.binary_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.binary_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolean_byte_map:");
    if (this.boolean_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.boolean_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_i16_map:");
    if (this.byte_i16_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_i16_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_i32_map:");
    if (this.byte_i32_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_i32_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_i64_map:");
    if (this.byte_i64_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_i64_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_double_map:");
    if (this.byte_double_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_double_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_string_map:");
    if (this.byte_string_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_string_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_binary_map:");
    if (this.byte_binary_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_binary_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_boolean_map:");
    if (this.byte_boolean_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_boolean_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("list_byte_map:");
    if (this.list_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.list_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("set_byte_map:");
    if (this.set_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.set_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("map_byte_map:");
    if (this.map_byte_map == null) {
      sb.append("null");
    } else {
      sb.append(this.map_byte_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_map_map:");
    if (this.byte_map_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_map_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_set_map:");
    if (this.byte_set_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_set_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_list_map:");
    if (this.byte_list_map == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_list_map);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (empty_struct_field != null) {
      empty_struct_field.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompactProtoTestStructStandardSchemeFactory implements SchemeFactory {
    public CompactProtoTestStructStandardScheme getScheme() {
      return new CompactProtoTestStructStandardScheme();
    }
  }

  private static class CompactProtoTestStructStandardScheme extends StandardScheme<CompactProtoTestStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompactProtoTestStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.a_byte = iprot.readByte();
              struct.setA_byteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // A_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.a_i16 = iprot.readI16();
              struct.setA_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.a_i32 = iprot.readI32();
              struct.setA_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // A_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.a_i64 = iprot.readI64();
              struct.setA_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // A_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a_double = iprot.readDouble();
              struct.setA_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // A_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.a_string = iprot.readString();
              struct.setA_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // A_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.a_binary = iprot.readBinary();
              struct.setA_binaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRUE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.true_field = iprot.readBool();
              struct.setTrue_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FALSE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.false_field = iprot.readBool();
              struct.setFalse_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EMPTY_STRUCT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.empty_struct_field = new Empty();
              struct.empty_struct_field.read(iprot);
              struct.setEmpty_struct_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BYTE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.byte_list = new ArrayList<Byte>(_list84.size);
                byte _elem85;
                for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                {
                  _elem85 = iprot.readByte();
                  struct.byte_list.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setByte_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // I16_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                struct.i16_list = new ArrayList<Short>(_list87.size);
                short _elem88;
                for (int _i89 = 0; _i89 < _list87.size; ++_i89)
                {
                  _elem88 = iprot.readI16();
                  struct.i16_list.add(_elem88);
                }
                iprot.readListEnd();
              }
              struct.setI16_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // I32_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.i32_list = new ArrayList<Integer>(_list90.size);
                int _elem91;
                for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                {
                  _elem91 = iprot.readI32();
                  struct.i32_list.add(_elem91);
                }
                iprot.readListEnd();
              }
              struct.setI32_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // I64_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list93 = iprot.readListBegin();
                struct.i64_list = new ArrayList<Long>(_list93.size);
                long _elem94;
                for (int _i95 = 0; _i95 < _list93.size; ++_i95)
                {
                  _elem94 = iprot.readI64();
                  struct.i64_list.add(_elem94);
                }
                iprot.readListEnd();
              }
              struct.setI64_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DOUBLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.double_list = new ArrayList<Double>(_list96.size);
                double _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readDouble();
                  struct.double_list.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setDouble_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STRING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.string_list = new ArrayList<String>(_list99.size);
                String _elem100;
                for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                {
                  _elem100 = iprot.readString();
                  struct.string_list.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setString_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BINARY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                struct.binary_list = new ArrayList<ByteBuffer>(_list102.size);
                ByteBuffer _elem103;
                for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                {
                  _elem103 = iprot.readBinary();
                  struct.binary_list.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setBinary_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BOOLEAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list105 = iprot.readListBegin();
                struct.boolean_list = new ArrayList<Boolean>(_list105.size);
                boolean _elem106;
                for (int _i107 = 0; _i107 < _list105.size; ++_i107)
                {
                  _elem106 = iprot.readBool();
                  struct.boolean_list.add(_elem106);
                }
                iprot.readListEnd();
              }
              struct.setBoolean_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STRUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                struct.struct_list = new ArrayList<Empty>(_list108.size);
                Empty _elem109;
                for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                {
                  _elem109 = new Empty();
                  _elem109.read(iprot);
                  struct.struct_list.add(_elem109);
                }
                iprot.readListEnd();
              }
              struct.setStruct_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BYTE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set111 = iprot.readSetBegin();
                struct.byte_set = new HashSet<Byte>(2*_set111.size);
                byte _elem112;
                for (int _i113 = 0; _i113 < _set111.size; ++_i113)
                {
                  _elem112 = iprot.readByte();
                  struct.byte_set.add(_elem112);
                }
                iprot.readSetEnd();
              }
              struct.setByte_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // I16_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set114 = iprot.readSetBegin();
                struct.i16_set = new HashSet<Short>(2*_set114.size);
                short _elem115;
                for (int _i116 = 0; _i116 < _set114.size; ++_i116)
                {
                  _elem115 = iprot.readI16();
                  struct.i16_set.add(_elem115);
                }
                iprot.readSetEnd();
              }
              struct.setI16_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // I32_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set117 = iprot.readSetBegin();
                struct.i32_set = new HashSet<Integer>(2*_set117.size);
                int _elem118;
                for (int _i119 = 0; _i119 < _set117.size; ++_i119)
                {
                  _elem118 = iprot.readI32();
                  struct.i32_set.add(_elem118);
                }
                iprot.readSetEnd();
              }
              struct.setI32_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // I64_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set120 = iprot.readSetBegin();
                struct.i64_set = new HashSet<Long>(2*_set120.size);
                long _elem121;
                for (int _i122 = 0; _i122 < _set120.size; ++_i122)
                {
                  _elem121 = iprot.readI64();
                  struct.i64_set.add(_elem121);
                }
                iprot.readSetEnd();
              }
              struct.setI64_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DOUBLE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set123 = iprot.readSetBegin();
                struct.double_set = new HashSet<Double>(2*_set123.size);
                double _elem124;
                for (int _i125 = 0; _i125 < _set123.size; ++_i125)
                {
                  _elem124 = iprot.readDouble();
                  struct.double_set.add(_elem124);
                }
                iprot.readSetEnd();
              }
              struct.setDouble_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // STRING_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set126 = iprot.readSetBegin();
                struct.string_set = new HashSet<String>(2*_set126.size);
                String _elem127;
                for (int _i128 = 0; _i128 < _set126.size; ++_i128)
                {
                  _elem127 = iprot.readString();
                  struct.string_set.add(_elem127);
                }
                iprot.readSetEnd();
              }
              struct.setString_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BINARY_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set129 = iprot.readSetBegin();
                struct.binary_set = new HashSet<ByteBuffer>(2*_set129.size);
                ByteBuffer _elem130;
                for (int _i131 = 0; _i131 < _set129.size; ++_i131)
                {
                  _elem130 = iprot.readBinary();
                  struct.binary_set.add(_elem130);
                }
                iprot.readSetEnd();
              }
              struct.setBinary_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BOOLEAN_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set132 = iprot.readSetBegin();
                struct.boolean_set = new HashSet<Boolean>(2*_set132.size);
                boolean _elem133;
                for (int _i134 = 0; _i134 < _set132.size; ++_i134)
                {
                  _elem133 = iprot.readBool();
                  struct.boolean_set.add(_elem133);
                }
                iprot.readSetEnd();
              }
              struct.setBoolean_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // STRUCT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set135 = iprot.readSetBegin();
                struct.struct_set = new HashSet<Empty>(2*_set135.size);
                Empty _elem136;
                for (int _i137 = 0; _i137 < _set135.size; ++_i137)
                {
                  _elem136 = new Empty();
                  _elem136.read(iprot);
                  struct.struct_set.add(_elem136);
                }
                iprot.readSetEnd();
              }
              struct.setStruct_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // BYTE_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                struct.byte_byte_map = new HashMap<Byte,Byte>(2*_map138.size);
                byte _key139;
                byte _val140;
                for (int _i141 = 0; _i141 < _map138.size; ++_i141)
                {
                  _key139 = iprot.readByte();
                  _val140 = iprot.readByte();
                  struct.byte_byte_map.put(_key139, _val140);
                }
                iprot.readMapEnd();
              }
              struct.setByte_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // I16_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                struct.i16_byte_map = new HashMap<Short,Byte>(2*_map142.size);
                short _key143;
                byte _val144;
                for (int _i145 = 0; _i145 < _map142.size; ++_i145)
                {
                  _key143 = iprot.readI16();
                  _val144 = iprot.readByte();
                  struct.i16_byte_map.put(_key143, _val144);
                }
                iprot.readMapEnd();
              }
              struct.setI16_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // I32_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
                struct.i32_byte_map = new HashMap<Integer,Byte>(2*_map146.size);
                int _key147;
                byte _val148;
                for (int _i149 = 0; _i149 < _map146.size; ++_i149)
                {
                  _key147 = iprot.readI32();
                  _val148 = iprot.readByte();
                  struct.i32_byte_map.put(_key147, _val148);
                }
                iprot.readMapEnd();
              }
              struct.setI32_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // I64_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map150 = iprot.readMapBegin();
                struct.i64_byte_map = new HashMap<Long,Byte>(2*_map150.size);
                long _key151;
                byte _val152;
                for (int _i153 = 0; _i153 < _map150.size; ++_i153)
                {
                  _key151 = iprot.readI64();
                  _val152 = iprot.readByte();
                  struct.i64_byte_map.put(_key151, _val152);
                }
                iprot.readMapEnd();
              }
              struct.setI64_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DOUBLE_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map154 = iprot.readMapBegin();
                struct.double_byte_map = new HashMap<Double,Byte>(2*_map154.size);
                double _key155;
                byte _val156;
                for (int _i157 = 0; _i157 < _map154.size; ++_i157)
                {
                  _key155 = iprot.readDouble();
                  _val156 = iprot.readByte();
                  struct.double_byte_map.put(_key155, _val156);
                }
                iprot.readMapEnd();
              }
              struct.setDouble_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // STRING_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                struct.string_byte_map = new HashMap<String,Byte>(2*_map158.size);
                String _key159;
                byte _val160;
                for (int _i161 = 0; _i161 < _map158.size; ++_i161)
                {
                  _key159 = iprot.readString();
                  _val160 = iprot.readByte();
                  struct.string_byte_map.put(_key159, _val160);
                }
                iprot.readMapEnd();
              }
              struct.setString_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // BINARY_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map162 = iprot.readMapBegin();
                struct.binary_byte_map = new HashMap<ByteBuffer,Byte>(2*_map162.size);
                ByteBuffer _key163;
                byte _val164;
                for (int _i165 = 0; _i165 < _map162.size; ++_i165)
                {
                  _key163 = iprot.readBinary();
                  _val164 = iprot.readByte();
                  struct.binary_byte_map.put(_key163, _val164);
                }
                iprot.readMapEnd();
              }
              struct.setBinary_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // BOOLEAN_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map166 = iprot.readMapBegin();
                struct.boolean_byte_map = new HashMap<Boolean,Byte>(2*_map166.size);
                boolean _key167;
                byte _val168;
                for (int _i169 = 0; _i169 < _map166.size; ++_i169)
                {
                  _key167 = iprot.readBool();
                  _val168 = iprot.readByte();
                  struct.boolean_byte_map.put(_key167, _val168);
                }
                iprot.readMapEnd();
              }
              struct.setBoolean_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // BYTE_I16_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
                struct.byte_i16_map = new HashMap<Byte,Short>(2*_map170.size);
                byte _key171;
                short _val172;
                for (int _i173 = 0; _i173 < _map170.size; ++_i173)
                {
                  _key171 = iprot.readByte();
                  _val172 = iprot.readI16();
                  struct.byte_i16_map.put(_key171, _val172);
                }
                iprot.readMapEnd();
              }
              struct.setByte_i16_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // BYTE_I32_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map174 = iprot.readMapBegin();
                struct.byte_i32_map = new HashMap<Byte,Integer>(2*_map174.size);
                byte _key175;
                int _val176;
                for (int _i177 = 0; _i177 < _map174.size; ++_i177)
                {
                  _key175 = iprot.readByte();
                  _val176 = iprot.readI32();
                  struct.byte_i32_map.put(_key175, _val176);
                }
                iprot.readMapEnd();
              }
              struct.setByte_i32_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // BYTE_I64_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
                struct.byte_i64_map = new HashMap<Byte,Long>(2*_map178.size);
                byte _key179;
                long _val180;
                for (int _i181 = 0; _i181 < _map178.size; ++_i181)
                {
                  _key179 = iprot.readByte();
                  _val180 = iprot.readI64();
                  struct.byte_i64_map.put(_key179, _val180);
                }
                iprot.readMapEnd();
              }
              struct.setByte_i64_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // BYTE_DOUBLE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map182 = iprot.readMapBegin();
                struct.byte_double_map = new HashMap<Byte,Double>(2*_map182.size);
                byte _key183;
                double _val184;
                for (int _i185 = 0; _i185 < _map182.size; ++_i185)
                {
                  _key183 = iprot.readByte();
                  _val184 = iprot.readDouble();
                  struct.byte_double_map.put(_key183, _val184);
                }
                iprot.readMapEnd();
              }
              struct.setByte_double_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // BYTE_STRING_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map186 = iprot.readMapBegin();
                struct.byte_string_map = new HashMap<Byte,String>(2*_map186.size);
                byte _key187;
                String _val188;
                for (int _i189 = 0; _i189 < _map186.size; ++_i189)
                {
                  _key187 = iprot.readByte();
                  _val188 = iprot.readString();
                  struct.byte_string_map.put(_key187, _val188);
                }
                iprot.readMapEnd();
              }
              struct.setByte_string_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // BYTE_BINARY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map190 = iprot.readMapBegin();
                struct.byte_binary_map = new HashMap<Byte,ByteBuffer>(2*_map190.size);
                byte _key191;
                ByteBuffer _val192;
                for (int _i193 = 0; _i193 < _map190.size; ++_i193)
                {
                  _key191 = iprot.readByte();
                  _val192 = iprot.readBinary();
                  struct.byte_binary_map.put(_key191, _val192);
                }
                iprot.readMapEnd();
              }
              struct.setByte_binary_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // BYTE_BOOLEAN_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map194 = iprot.readMapBegin();
                struct.byte_boolean_map = new HashMap<Byte,Boolean>(2*_map194.size);
                byte _key195;
                boolean _val196;
                for (int _i197 = 0; _i197 < _map194.size; ++_i197)
                {
                  _key195 = iprot.readByte();
                  _val196 = iprot.readBool();
                  struct.byte_boolean_map.put(_key195, _val196);
                }
                iprot.readMapEnd();
              }
              struct.setByte_boolean_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // LIST_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                struct.list_byte_map = new HashMap<List<Byte>,Byte>(2*_map198.size);
                List<Byte> _key199;
                byte _val200;
                for (int _i201 = 0; _i201 < _map198.size; ++_i201)
                {
                  {
                    org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                    _key199 = new ArrayList<Byte>(_list202.size);
                    byte _elem203;
                    for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                    {
                      _elem203 = iprot.readByte();
                      _key199.add(_elem203);
                    }
                    iprot.readListEnd();
                  }
                  _val200 = iprot.readByte();
                  struct.list_byte_map.put(_key199, _val200);
                }
                iprot.readMapEnd();
              }
              struct.setList_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // SET_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map205 = iprot.readMapBegin();
                struct.set_byte_map = new HashMap<Set<Byte>,Byte>(2*_map205.size);
                Set<Byte> _key206;
                byte _val207;
                for (int _i208 = 0; _i208 < _map205.size; ++_i208)
                {
                  {
                    org.apache.thrift.protocol.TSet _set209 = iprot.readSetBegin();
                    _key206 = new HashSet<Byte>(2*_set209.size);
                    byte _elem210;
                    for (int _i211 = 0; _i211 < _set209.size; ++_i211)
                    {
                      _elem210 = iprot.readByte();
                      _key206.add(_elem210);
                    }
                    iprot.readSetEnd();
                  }
                  _val207 = iprot.readByte();
                  struct.set_byte_map.put(_key206, _val207);
                }
                iprot.readMapEnd();
              }
              struct.setSet_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // MAP_BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map212 = iprot.readMapBegin();
                struct.map_byte_map = new HashMap<Map<Byte,Byte>,Byte>(2*_map212.size);
                Map<Byte,Byte> _key213;
                byte _val214;
                for (int _i215 = 0; _i215 < _map212.size; ++_i215)
                {
                  {
                    org.apache.thrift.protocol.TMap _map216 = iprot.readMapBegin();
                    _key213 = new HashMap<Byte,Byte>(2*_map216.size);
                    byte _key217;
                    byte _val218;
                    for (int _i219 = 0; _i219 < _map216.size; ++_i219)
                    {
                      _key217 = iprot.readByte();
                      _val218 = iprot.readByte();
                      _key213.put(_key217, _val218);
                    }
                    iprot.readMapEnd();
                  }
                  _val214 = iprot.readByte();
                  struct.map_byte_map.put(_key213, _val214);
                }
                iprot.readMapEnd();
              }
              struct.setMap_byte_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // BYTE_MAP_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map220 = iprot.readMapBegin();
                struct.byte_map_map = new HashMap<Byte,Map<Byte,Byte>>(2*_map220.size);
                byte _key221;
                Map<Byte,Byte> _val222;
                for (int _i223 = 0; _i223 < _map220.size; ++_i223)
                {
                  _key221 = iprot.readByte();
                  {
                    org.apache.thrift.protocol.TMap _map224 = iprot.readMapBegin();
                    _val222 = new HashMap<Byte,Byte>(2*_map224.size);
                    byte _key225;
                    byte _val226;
                    for (int _i227 = 0; _i227 < _map224.size; ++_i227)
                    {
                      _key225 = iprot.readByte();
                      _val226 = iprot.readByte();
                      _val222.put(_key225, _val226);
                    }
                    iprot.readMapEnd();
                  }
                  struct.byte_map_map.put(_key221, _val222);
                }
                iprot.readMapEnd();
              }
              struct.setByte_map_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // BYTE_SET_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map228 = iprot.readMapBegin();
                struct.byte_set_map = new HashMap<Byte,Set<Byte>>(2*_map228.size);
                byte _key229;
                Set<Byte> _val230;
                for (int _i231 = 0; _i231 < _map228.size; ++_i231)
                {
                  _key229 = iprot.readByte();
                  {
                    org.apache.thrift.protocol.TSet _set232 = iprot.readSetBegin();
                    _val230 = new HashSet<Byte>(2*_set232.size);
                    byte _elem233;
                    for (int _i234 = 0; _i234 < _set232.size; ++_i234)
                    {
                      _elem233 = iprot.readByte();
                      _val230.add(_elem233);
                    }
                    iprot.readSetEnd();
                  }
                  struct.byte_set_map.put(_key229, _val230);
                }
                iprot.readMapEnd();
              }
              struct.setByte_set_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // BYTE_LIST_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map235 = iprot.readMapBegin();
                struct.byte_list_map = new HashMap<Byte,List<Byte>>(2*_map235.size);
                byte _key236;
                List<Byte> _val237;
                for (int _i238 = 0; _i238 < _map235.size; ++_i238)
                {
                  _key236 = iprot.readByte();
                  {
                    org.apache.thrift.protocol.TList _list239 = iprot.readListBegin();
                    _val237 = new ArrayList<Byte>(_list239.size);
                    byte _elem240;
                    for (int _i241 = 0; _i241 < _list239.size; ++_i241)
                    {
                      _elem240 = iprot.readByte();
                      _val237.add(_elem240);
                    }
                    iprot.readListEnd();
                  }
                  struct.byte_list_map.put(_key236, _val237);
                }
                iprot.readMapEnd();
              }
              struct.setByte_list_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompactProtoTestStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(A_BYTE_FIELD_DESC);
      oprot.writeByte(struct.a_byte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_I16_FIELD_DESC);
      oprot.writeI16(struct.a_i16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_I32_FIELD_DESC);
      oprot.writeI32(struct.a_i32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_I64_FIELD_DESC);
      oprot.writeI64(struct.a_i64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.a_double);
      oprot.writeFieldEnd();
      if (struct.a_string != null) {
        oprot.writeFieldBegin(A_STRING_FIELD_DESC);
        oprot.writeString(struct.a_string);
        oprot.writeFieldEnd();
      }
      if (struct.a_binary != null) {
        oprot.writeFieldBegin(A_BINARY_FIELD_DESC);
        oprot.writeBinary(struct.a_binary);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRUE_FIELD_FIELD_DESC);
      oprot.writeBool(struct.true_field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FALSE_FIELD_FIELD_DESC);
      oprot.writeBool(struct.false_field);
      oprot.writeFieldEnd();
      if (struct.empty_struct_field != null) {
        oprot.writeFieldBegin(EMPTY_STRUCT_FIELD_FIELD_DESC);
        struct.empty_struct_field.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.byte_list != null) {
        oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byte_list.size()));
          for (byte _iter242 : struct.byte_list)
          {
            oprot.writeByte(_iter242);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i16_list != null) {
        oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.i16_list.size()));
          for (short _iter243 : struct.i16_list)
          {
            oprot.writeI16(_iter243);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i32_list != null) {
        oprot.writeFieldBegin(I32_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.i32_list.size()));
          for (int _iter244 : struct.i32_list)
          {
            oprot.writeI32(_iter244);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i64_list != null) {
        oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64_list.size()));
          for (long _iter245 : struct.i64_list)
          {
            oprot.writeI64(_iter245);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.double_list != null) {
        oprot.writeFieldBegin(DOUBLE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.double_list.size()));
          for (double _iter246 : struct.double_list)
          {
            oprot.writeDouble(_iter246);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.string_list != null) {
        oprot.writeFieldBegin(STRING_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.string_list.size()));
          for (String _iter247 : struct.string_list)
          {
            oprot.writeString(_iter247);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.binary_list != null) {
        oprot.writeFieldBegin(BINARY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binary_list.size()));
          for (ByteBuffer _iter248 : struct.binary_list)
          {
            oprot.writeBinary(_iter248);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.boolean_list != null) {
        oprot.writeFieldBegin(BOOLEAN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.boolean_list.size()));
          for (boolean _iter249 : struct.boolean_list)
          {
            oprot.writeBool(_iter249);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.struct_list != null) {
        oprot.writeFieldBegin(STRUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.struct_list.size()));
          for (Empty _iter250 : struct.struct_list)
          {
            _iter250.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_set != null) {
        oprot.writeFieldBegin(BYTE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.byte_set.size()));
          for (byte _iter251 : struct.byte_set)
          {
            oprot.writeByte(_iter251);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i16_set != null) {
        oprot.writeFieldBegin(I16_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, struct.i16_set.size()));
          for (short _iter252 : struct.i16_set)
          {
            oprot.writeI16(_iter252);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i32_set != null) {
        oprot.writeFieldBegin(I32_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.i32_set.size()));
          for (int _iter253 : struct.i32_set)
          {
            oprot.writeI32(_iter253);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i64_set != null) {
        oprot.writeFieldBegin(I64_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.i64_set.size()));
          for (long _iter254 : struct.i64_set)
          {
            oprot.writeI64(_iter254);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.double_set != null) {
        oprot.writeFieldBegin(DOUBLE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, struct.double_set.size()));
          for (double _iter255 : struct.double_set)
          {
            oprot.writeDouble(_iter255);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.string_set != null) {
        oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.string_set.size()));
          for (String _iter256 : struct.string_set)
          {
            oprot.writeString(_iter256);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.binary_set != null) {
        oprot.writeFieldBegin(BINARY_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.binary_set.size()));
          for (ByteBuffer _iter257 : struct.binary_set)
          {
            oprot.writeBinary(_iter257);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.boolean_set != null) {
        oprot.writeFieldBegin(BOOLEAN_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, struct.boolean_set.size()));
          for (boolean _iter258 : struct.boolean_set)
          {
            oprot.writeBool(_iter258);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.struct_set != null) {
        oprot.writeFieldBegin(STRUCT_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.struct_set.size()));
          for (Empty _iter259 : struct.struct_set)
          {
            _iter259.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_byte_map != null) {
        oprot.writeFieldBegin(BYTE_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, struct.byte_byte_map.size()));
          for (Map.Entry<Byte, Byte> _iter260 : struct.byte_byte_map.entrySet())
          {
            oprot.writeByte(_iter260.getKey());
            oprot.writeByte(_iter260.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i16_byte_map != null) {
        oprot.writeFieldBegin(I16_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.BYTE, struct.i16_byte_map.size()));
          for (Map.Entry<Short, Byte> _iter261 : struct.i16_byte_map.entrySet())
          {
            oprot.writeI16(_iter261.getKey());
            oprot.writeByte(_iter261.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i32_byte_map != null) {
        oprot.writeFieldBegin(I32_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BYTE, struct.i32_byte_map.size()));
          for (Map.Entry<Integer, Byte> _iter262 : struct.i32_byte_map.entrySet())
          {
            oprot.writeI32(_iter262.getKey());
            oprot.writeByte(_iter262.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i64_byte_map != null) {
        oprot.writeFieldBegin(I64_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BYTE, struct.i64_byte_map.size()));
          for (Map.Entry<Long, Byte> _iter263 : struct.i64_byte_map.entrySet())
          {
            oprot.writeI64(_iter263.getKey());
            oprot.writeByte(_iter263.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.double_byte_map != null) {
        oprot.writeFieldBegin(DOUBLE_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.BYTE, struct.double_byte_map.size()));
          for (Map.Entry<Double, Byte> _iter264 : struct.double_byte_map.entrySet())
          {
            oprot.writeDouble(_iter264.getKey());
            oprot.writeByte(_iter264.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.string_byte_map != null) {
        oprot.writeFieldBegin(STRING_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, struct.string_byte_map.size()));
          for (Map.Entry<String, Byte> _iter265 : struct.string_byte_map.entrySet())
          {
            oprot.writeString(_iter265.getKey());
            oprot.writeByte(_iter265.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.binary_byte_map != null) {
        oprot.writeFieldBegin(BINARY_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, struct.binary_byte_map.size()));
          for (Map.Entry<ByteBuffer, Byte> _iter266 : struct.binary_byte_map.entrySet())
          {
            oprot.writeBinary(_iter266.getKey());
            oprot.writeByte(_iter266.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.boolean_byte_map != null) {
        oprot.writeFieldBegin(BOOLEAN_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BOOL, org.apache.thrift.protocol.TType.BYTE, struct.boolean_byte_map.size()));
          for (Map.Entry<Boolean, Byte> _iter267 : struct.boolean_byte_map.entrySet())
          {
            oprot.writeBool(_iter267.getKey());
            oprot.writeByte(_iter267.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_i16_map != null) {
        oprot.writeFieldBegin(BYTE_I16_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I16, struct.byte_i16_map.size()));
          for (Map.Entry<Byte, Short> _iter268 : struct.byte_i16_map.entrySet())
          {
            oprot.writeByte(_iter268.getKey());
            oprot.writeI16(_iter268.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_i32_map != null) {
        oprot.writeFieldBegin(BYTE_I32_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.byte_i32_map.size()));
          for (Map.Entry<Byte, Integer> _iter269 : struct.byte_i32_map.entrySet())
          {
            oprot.writeByte(_iter269.getKey());
            oprot.writeI32(_iter269.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_i64_map != null) {
        oprot.writeFieldBegin(BYTE_I64_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, struct.byte_i64_map.size()));
          for (Map.Entry<Byte, Long> _iter270 : struct.byte_i64_map.entrySet())
          {
            oprot.writeByte(_iter270.getKey());
            oprot.writeI64(_iter270.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_double_map != null) {
        oprot.writeFieldBegin(BYTE_DOUBLE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.DOUBLE, struct.byte_double_map.size()));
          for (Map.Entry<Byte, Double> _iter271 : struct.byte_double_map.entrySet())
          {
            oprot.writeByte(_iter271.getKey());
            oprot.writeDouble(_iter271.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_string_map != null) {
        oprot.writeFieldBegin(BYTE_STRING_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRING, struct.byte_string_map.size()));
          for (Map.Entry<Byte, String> _iter272 : struct.byte_string_map.entrySet())
          {
            oprot.writeByte(_iter272.getKey());
            oprot.writeString(_iter272.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_binary_map != null) {
        oprot.writeFieldBegin(BYTE_BINARY_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRING, struct.byte_binary_map.size()));
          for (Map.Entry<Byte, ByteBuffer> _iter273 : struct.byte_binary_map.entrySet())
          {
            oprot.writeByte(_iter273.getKey());
            oprot.writeBinary(_iter273.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_boolean_map != null) {
        oprot.writeFieldBegin(BYTE_BOOLEAN_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BOOL, struct.byte_boolean_map.size()));
          for (Map.Entry<Byte, Boolean> _iter274 : struct.byte_boolean_map.entrySet())
          {
            oprot.writeByte(_iter274.getKey());
            oprot.writeBool(_iter274.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.list_byte_map != null) {
        oprot.writeFieldBegin(LIST_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.BYTE, struct.list_byte_map.size()));
          for (Map.Entry<List<Byte>, Byte> _iter275 : struct.list_byte_map.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, _iter275.getKey().size()));
              for (byte _iter276 : _iter275.getKey())
              {
                oprot.writeByte(_iter276);
              }
              oprot.writeListEnd();
            }
            oprot.writeByte(_iter275.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.set_byte_map != null) {
        oprot.writeFieldBegin(SET_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.BYTE, struct.set_byte_map.size()));
          for (Map.Entry<Set<Byte>, Byte> _iter277 : struct.set_byte_map.entrySet())
          {
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, _iter277.getKey().size()));
              for (byte _iter278 : _iter277.getKey())
              {
                oprot.writeByte(_iter278);
              }
              oprot.writeSetEnd();
            }
            oprot.writeByte(_iter277.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.map_byte_map != null) {
        oprot.writeFieldBegin(MAP_BYTE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.BYTE, struct.map_byte_map.size()));
          for (Map.Entry<Map<Byte,Byte>, Byte> _iter279 : struct.map_byte_map.entrySet())
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, _iter279.getKey().size()));
              for (Map.Entry<Byte, Byte> _iter280 : _iter279.getKey().entrySet())
              {
                oprot.writeByte(_iter280.getKey());
                oprot.writeByte(_iter280.getValue());
              }
              oprot.writeMapEnd();
            }
            oprot.writeByte(_iter279.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_map_map != null) {
        oprot.writeFieldBegin(BYTE_MAP_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.MAP, struct.byte_map_map.size()));
          for (Map.Entry<Byte, Map<Byte,Byte>> _iter281 : struct.byte_map_map.entrySet())
          {
            oprot.writeByte(_iter281.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, _iter281.getValue().size()));
              for (Map.Entry<Byte, Byte> _iter282 : _iter281.getValue().entrySet())
              {
                oprot.writeByte(_iter282.getKey());
                oprot.writeByte(_iter282.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_set_map != null) {
        oprot.writeFieldBegin(BYTE_SET_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.SET, struct.byte_set_map.size()));
          for (Map.Entry<Byte, Set<Byte>> _iter283 : struct.byte_set_map.entrySet())
          {
            oprot.writeByte(_iter283.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, _iter283.getValue().size()));
              for (byte _iter284 : _iter283.getValue())
              {
                oprot.writeByte(_iter284);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byte_list_map != null) {
        oprot.writeFieldBegin(BYTE_LIST_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.LIST, struct.byte_list_map.size()));
          for (Map.Entry<Byte, List<Byte>> _iter285 : struct.byte_list_map.entrySet())
          {
            oprot.writeByte(_iter285.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, _iter285.getValue().size()));
              for (byte _iter286 : _iter285.getValue())
              {
                oprot.writeByte(_iter286);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompactProtoTestStructTupleSchemeFactory implements SchemeFactory {
    public CompactProtoTestStructTupleScheme getScheme() {
      return new CompactProtoTestStructTupleScheme();
    }
  }

  private static class CompactProtoTestStructTupleScheme extends TupleScheme<CompactProtoTestStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompactProtoTestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetA_byte()) {
        optionals.set(0);
      }
      if (struct.isSetA_i16()) {
        optionals.set(1);
      }
      if (struct.isSetA_i32()) {
        optionals.set(2);
      }
      if (struct.isSetA_i64()) {
        optionals.set(3);
      }
      if (struct.isSetA_double()) {
        optionals.set(4);
      }
      if (struct.isSetA_string()) {
        optionals.set(5);
      }
      if (struct.isSetA_binary()) {
        optionals.set(6);
      }
      if (struct.isSetTrue_field()) {
        optionals.set(7);
      }
      if (struct.isSetFalse_field()) {
        optionals.set(8);
      }
      if (struct.isSetEmpty_struct_field()) {
        optionals.set(9);
      }
      if (struct.isSetByte_list()) {
        optionals.set(10);
      }
      if (struct.isSetI16_list()) {
        optionals.set(11);
      }
      if (struct.isSetI32_list()) {
        optionals.set(12);
      }
      if (struct.isSetI64_list()) {
        optionals.set(13);
      }
      if (struct.isSetDouble_list()) {
        optionals.set(14);
      }
      if (struct.isSetString_list()) {
        optionals.set(15);
      }
      if (struct.isSetBinary_list()) {
        optionals.set(16);
      }
      if (struct.isSetBoolean_list()) {
        optionals.set(17);
      }
      if (struct.isSetStruct_list()) {
        optionals.set(18);
      }
      if (struct.isSetByte_set()) {
        optionals.set(19);
      }
      if (struct.isSetI16_set()) {
        optionals.set(20);
      }
      if (struct.isSetI32_set()) {
        optionals.set(21);
      }
      if (struct.isSetI64_set()) {
        optionals.set(22);
      }
      if (struct.isSetDouble_set()) {
        optionals.set(23);
      }
      if (struct.isSetString_set()) {
        optionals.set(24);
      }
      if (struct.isSetBinary_set()) {
        optionals.set(25);
      }
      if (struct.isSetBoolean_set()) {
        optionals.set(26);
      }
      if (struct.isSetStruct_set()) {
        optionals.set(27);
      }
      if (struct.isSetByte_byte_map()) {
        optionals.set(28);
      }
      if (struct.isSetI16_byte_map()) {
        optionals.set(29);
      }
      if (struct.isSetI32_byte_map()) {
        optionals.set(30);
      }
      if (struct.isSetI64_byte_map()) {
        optionals.set(31);
      }
      if (struct.isSetDouble_byte_map()) {
        optionals.set(32);
      }
      if (struct.isSetString_byte_map()) {
        optionals.set(33);
      }
      if (struct.isSetBinary_byte_map()) {
        optionals.set(34);
      }
      if (struct.isSetBoolean_byte_map()) {
        optionals.set(35);
      }
      if (struct.isSetByte_i16_map()) {
        optionals.set(36);
      }
      if (struct.isSetByte_i32_map()) {
        optionals.set(37);
      }
      if (struct.isSetByte_i64_map()) {
        optionals.set(38);
      }
      if (struct.isSetByte_double_map()) {
        optionals.set(39);
      }
      if (struct.isSetByte_string_map()) {
        optionals.set(40);
      }
      if (struct.isSetByte_binary_map()) {
        optionals.set(41);
      }
      if (struct.isSetByte_boolean_map()) {
        optionals.set(42);
      }
      if (struct.isSetList_byte_map()) {
        optionals.set(43);
      }
      if (struct.isSetSet_byte_map()) {
        optionals.set(44);
      }
      if (struct.isSetMap_byte_map()) {
        optionals.set(45);
      }
      if (struct.isSetByte_map_map()) {
        optionals.set(46);
      }
      if (struct.isSetByte_set_map()) {
        optionals.set(47);
      }
      if (struct.isSetByte_list_map()) {
        optionals.set(48);
      }
      oprot.writeBitSet(optionals, 49);
      if (struct.isSetA_byte()) {
        oprot.writeByte(struct.a_byte);
      }
      if (struct.isSetA_i16()) {
        oprot.writeI16(struct.a_i16);
      }
      if (struct.isSetA_i32()) {
        oprot.writeI32(struct.a_i32);
      }
      if (struct.isSetA_i64()) {
        oprot.writeI64(struct.a_i64);
      }
      if (struct.isSetA_double()) {
        oprot.writeDouble(struct.a_double);
      }
      if (struct.isSetA_string()) {
        oprot.writeString(struct.a_string);
      }
      if (struct.isSetA_binary()) {
        oprot.writeBinary(struct.a_binary);
      }
      if (struct.isSetTrue_field()) {
        oprot.writeBool(struct.true_field);
      }
      if (struct.isSetFalse_field()) {
        oprot.writeBool(struct.false_field);
      }
      if (struct.isSetEmpty_struct_field()) {
        struct.empty_struct_field.write(oprot);
      }
      if (struct.isSetByte_list()) {
        {
          oprot.writeI32(struct.byte_list.size());
          for (byte _iter287 : struct.byte_list)
          {
            oprot.writeByte(_iter287);
          }
        }
      }
      if (struct.isSetI16_list()) {
        {
          oprot.writeI32(struct.i16_list.size());
          for (short _iter288 : struct.i16_list)
          {
            oprot.writeI16(_iter288);
          }
        }
      }
      if (struct.isSetI32_list()) {
        {
          oprot.writeI32(struct.i32_list.size());
          for (int _iter289 : struct.i32_list)
          {
            oprot.writeI32(_iter289);
          }
        }
      }
      if (struct.isSetI64_list()) {
        {
          oprot.writeI32(struct.i64_list.size());
          for (long _iter290 : struct.i64_list)
          {
            oprot.writeI64(_iter290);
          }
        }
      }
      if (struct.isSetDouble_list()) {
        {
          oprot.writeI32(struct.double_list.size());
          for (double _iter291 : struct.double_list)
          {
            oprot.writeDouble(_iter291);
          }
        }
      }
      if (struct.isSetString_list()) {
        {
          oprot.writeI32(struct.string_list.size());
          for (String _iter292 : struct.string_list)
          {
            oprot.writeString(_iter292);
          }
        }
      }
      if (struct.isSetBinary_list()) {
        {
          oprot.writeI32(struct.binary_list.size());
          for (ByteBuffer _iter293 : struct.binary_list)
          {
            oprot.writeBinary(_iter293);
          }
        }
      }
      if (struct.isSetBoolean_list()) {
        {
          oprot.writeI32(struct.boolean_list.size());
          for (boolean _iter294 : struct.boolean_list)
          {
            oprot.writeBool(_iter294);
          }
        }
      }
      if (struct.isSetStruct_list()) {
        {
          oprot.writeI32(struct.struct_list.size());
          for (Empty _iter295 : struct.struct_list)
          {
            _iter295.write(oprot);
          }
        }
      }
      if (struct.isSetByte_set()) {
        {
          oprot.writeI32(struct.byte_set.size());
          for (byte _iter296 : struct.byte_set)
          {
            oprot.writeByte(_iter296);
          }
        }
      }
      if (struct.isSetI16_set()) {
        {
          oprot.writeI32(struct.i16_set.size());
          for (short _iter297 : struct.i16_set)
          {
            oprot.writeI16(_iter297);
          }
        }
      }
      if (struct.isSetI32_set()) {
        {
          oprot.writeI32(struct.i32_set.size());
          for (int _iter298 : struct.i32_set)
          {
            oprot.writeI32(_iter298);
          }
        }
      }
      if (struct.isSetI64_set()) {
        {
          oprot.writeI32(struct.i64_set.size());
          for (long _iter299 : struct.i64_set)
          {
            oprot.writeI64(_iter299);
          }
        }
      }
      if (struct.isSetDouble_set()) {
        {
          oprot.writeI32(struct.double_set.size());
          for (double _iter300 : struct.double_set)
          {
            oprot.writeDouble(_iter300);
          }
        }
      }
      if (struct.isSetString_set()) {
        {
          oprot.writeI32(struct.string_set.size());
          for (String _iter301 : struct.string_set)
          {
            oprot.writeString(_iter301);
          }
        }
      }
      if (struct.isSetBinary_set()) {
        {
          oprot.writeI32(struct.binary_set.size());
          for (ByteBuffer _iter302 : struct.binary_set)
          {
            oprot.writeBinary(_iter302);
          }
        }
      }
      if (struct.isSetBoolean_set()) {
        {
          oprot.writeI32(struct.boolean_set.size());
          for (boolean _iter303 : struct.boolean_set)
          {
            oprot.writeBool(_iter303);
          }
        }
      }
      if (struct.isSetStruct_set()) {
        {
          oprot.writeI32(struct.struct_set.size());
          for (Empty _iter304 : struct.struct_set)
          {
            _iter304.write(oprot);
          }
        }
      }
      if (struct.isSetByte_byte_map()) {
        {
          oprot.writeI32(struct.byte_byte_map.size());
          for (Map.Entry<Byte, Byte> _iter305 : struct.byte_byte_map.entrySet())
          {
            oprot.writeByte(_iter305.getKey());
            oprot.writeByte(_iter305.getValue());
          }
        }
      }
      if (struct.isSetI16_byte_map()) {
        {
          oprot.writeI32(struct.i16_byte_map.size());
          for (Map.Entry<Short, Byte> _iter306 : struct.i16_byte_map.entrySet())
          {
            oprot.writeI16(_iter306.getKey());
            oprot.writeByte(_iter306.getValue());
          }
        }
      }
      if (struct.isSetI32_byte_map()) {
        {
          oprot.writeI32(struct.i32_byte_map.size());
          for (Map.Entry<Integer, Byte> _iter307 : struct.i32_byte_map.entrySet())
          {
            oprot.writeI32(_iter307.getKey());
            oprot.writeByte(_iter307.getValue());
          }
        }
      }
      if (struct.isSetI64_byte_map()) {
        {
          oprot.writeI32(struct.i64_byte_map.size());
          for (Map.Entry<Long, Byte> _iter308 : struct.i64_byte_map.entrySet())
          {
            oprot.writeI64(_iter308.getKey());
            oprot.writeByte(_iter308.getValue());
          }
        }
      }
      if (struct.isSetDouble_byte_map()) {
        {
          oprot.writeI32(struct.double_byte_map.size());
          for (Map.Entry<Double, Byte> _iter309 : struct.double_byte_map.entrySet())
          {
            oprot.writeDouble(_iter309.getKey());
            oprot.writeByte(_iter309.getValue());
          }
        }
      }
      if (struct.isSetString_byte_map()) {
        {
          oprot.writeI32(struct.string_byte_map.size());
          for (Map.Entry<String, Byte> _iter310 : struct.string_byte_map.entrySet())
          {
            oprot.writeString(_iter310.getKey());
            oprot.writeByte(_iter310.getValue());
          }
        }
      }
      if (struct.isSetBinary_byte_map()) {
        {
          oprot.writeI32(struct.binary_byte_map.size());
          for (Map.Entry<ByteBuffer, Byte> _iter311 : struct.binary_byte_map.entrySet())
          {
            oprot.writeBinary(_iter311.getKey());
            oprot.writeByte(_iter311.getValue());
          }
        }
      }
      if (struct.isSetBoolean_byte_map()) {
        {
          oprot.writeI32(struct.boolean_byte_map.size());
          for (Map.Entry<Boolean, Byte> _iter312 : struct.boolean_byte_map.entrySet())
          {
            oprot.writeBool(_iter312.getKey());
            oprot.writeByte(_iter312.getValue());
          }
        }
      }
      if (struct.isSetByte_i16_map()) {
        {
          oprot.writeI32(struct.byte_i16_map.size());
          for (Map.Entry<Byte, Short> _iter313 : struct.byte_i16_map.entrySet())
          {
            oprot.writeByte(_iter313.getKey());
            oprot.writeI16(_iter313.getValue());
          }
        }
      }
      if (struct.isSetByte_i32_map()) {
        {
          oprot.writeI32(struct.byte_i32_map.size());
          for (Map.Entry<Byte, Integer> _iter314 : struct.byte_i32_map.entrySet())
          {
            oprot.writeByte(_iter314.getKey());
            oprot.writeI32(_iter314.getValue());
          }
        }
      }
      if (struct.isSetByte_i64_map()) {
        {
          oprot.writeI32(struct.byte_i64_map.size());
          for (Map.Entry<Byte, Long> _iter315 : struct.byte_i64_map.entrySet())
          {
            oprot.writeByte(_iter315.getKey());
            oprot.writeI64(_iter315.getValue());
          }
        }
      }
      if (struct.isSetByte_double_map()) {
        {
          oprot.writeI32(struct.byte_double_map.size());
          for (Map.Entry<Byte, Double> _iter316 : struct.byte_double_map.entrySet())
          {
            oprot.writeByte(_iter316.getKey());
            oprot.writeDouble(_iter316.getValue());
          }
        }
      }
      if (struct.isSetByte_string_map()) {
        {
          oprot.writeI32(struct.byte_string_map.size());
          for (Map.Entry<Byte, String> _iter317 : struct.byte_string_map.entrySet())
          {
            oprot.writeByte(_iter317.getKey());
            oprot.writeString(_iter317.getValue());
          }
        }
      }
      if (struct.isSetByte_binary_map()) {
        {
          oprot.writeI32(struct.byte_binary_map.size());
          for (Map.Entry<Byte, ByteBuffer> _iter318 : struct.byte_binary_map.entrySet())
          {
            oprot.writeByte(_iter318.getKey());
            oprot.writeBinary(_iter318.getValue());
          }
        }
      }
      if (struct.isSetByte_boolean_map()) {
        {
          oprot.writeI32(struct.byte_boolean_map.size());
          for (Map.Entry<Byte, Boolean> _iter319 : struct.byte_boolean_map.entrySet())
          {
            oprot.writeByte(_iter319.getKey());
            oprot.writeBool(_iter319.getValue());
          }
        }
      }
      if (struct.isSetList_byte_map()) {
        {
          oprot.writeI32(struct.list_byte_map.size());
          for (Map.Entry<List<Byte>, Byte> _iter320 : struct.list_byte_map.entrySet())
          {
            {
              oprot.writeI32(_iter320.getKey().size());
              for (byte _iter321 : _iter320.getKey())
              {
                oprot.writeByte(_iter321);
              }
            }
            oprot.writeByte(_iter320.getValue());
          }
        }
      }
      if (struct.isSetSet_byte_map()) {
        {
          oprot.writeI32(struct.set_byte_map.size());
          for (Map.Entry<Set<Byte>, Byte> _iter322 : struct.set_byte_map.entrySet())
          {
            {
              oprot.writeI32(_iter322.getKey().size());
              for (byte _iter323 : _iter322.getKey())
              {
                oprot.writeByte(_iter323);
              }
            }
            oprot.writeByte(_iter322.getValue());
          }
        }
      }
      if (struct.isSetMap_byte_map()) {
        {
          oprot.writeI32(struct.map_byte_map.size());
          for (Map.Entry<Map<Byte,Byte>, Byte> _iter324 : struct.map_byte_map.entrySet())
          {
            {
              oprot.writeI32(_iter324.getKey().size());
              for (Map.Entry<Byte, Byte> _iter325 : _iter324.getKey().entrySet())
              {
                oprot.writeByte(_iter325.getKey());
                oprot.writeByte(_iter325.getValue());
              }
            }
            oprot.writeByte(_iter324.getValue());
          }
        }
      }
      if (struct.isSetByte_map_map()) {
        {
          oprot.writeI32(struct.byte_map_map.size());
          for (Map.Entry<Byte, Map<Byte,Byte>> _iter326 : struct.byte_map_map.entrySet())
          {
            oprot.writeByte(_iter326.getKey());
            {
              oprot.writeI32(_iter326.getValue().size());
              for (Map.Entry<Byte, Byte> _iter327 : _iter326.getValue().entrySet())
              {
                oprot.writeByte(_iter327.getKey());
                oprot.writeByte(_iter327.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetByte_set_map()) {
        {
          oprot.writeI32(struct.byte_set_map.size());
          for (Map.Entry<Byte, Set<Byte>> _iter328 : struct.byte_set_map.entrySet())
          {
            oprot.writeByte(_iter328.getKey());
            {
              oprot.writeI32(_iter328.getValue().size());
              for (byte _iter329 : _iter328.getValue())
              {
                oprot.writeByte(_iter329);
              }
            }
          }
        }
      }
      if (struct.isSetByte_list_map()) {
        {
          oprot.writeI32(struct.byte_list_map.size());
          for (Map.Entry<Byte, List<Byte>> _iter330 : struct.byte_list_map.entrySet())
          {
            oprot.writeByte(_iter330.getKey());
            {
              oprot.writeI32(_iter330.getValue().size());
              for (byte _iter331 : _iter330.getValue())
              {
                oprot.writeByte(_iter331);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompactProtoTestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(49);
      if (incoming.get(0)) {
        struct.a_byte = iprot.readByte();
        struct.setA_byteIsSet(true);
      }
      if (incoming.get(1)) {
        struct.a_i16 = iprot.readI16();
        struct.setA_i16IsSet(true);
      }
      if (incoming.get(2)) {
        struct.a_i32 = iprot.readI32();
        struct.setA_i32IsSet(true);
      }
      if (incoming.get(3)) {
        struct.a_i64 = iprot.readI64();
        struct.setA_i64IsSet(true);
      }
      if (incoming.get(4)) {
        struct.a_double = iprot.readDouble();
        struct.setA_doubleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.a_string = iprot.readString();
        struct.setA_stringIsSet(true);
      }
      if (incoming.get(6)) {
        struct.a_binary = iprot.readBinary();
        struct.setA_binaryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.true_field = iprot.readBool();
        struct.setTrue_fieldIsSet(true);
      }
      if (incoming.get(8)) {
        struct.false_field = iprot.readBool();
        struct.setFalse_fieldIsSet(true);
      }
      if (incoming.get(9)) {
        struct.empty_struct_field = new Empty();
        struct.empty_struct_field.read(iprot);
        struct.setEmpty_struct_fieldIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list332 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byte_list = new ArrayList<Byte>(_list332.size);
          byte _elem333;
          for (int _i334 = 0; _i334 < _list332.size; ++_i334)
          {
            _elem333 = iprot.readByte();
            struct.byte_list.add(_elem333);
          }
        }
        struct.setByte_listIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list335 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.i16_list = new ArrayList<Short>(_list335.size);
          short _elem336;
          for (int _i337 = 0; _i337 < _list335.size; ++_i337)
          {
            _elem336 = iprot.readI16();
            struct.i16_list.add(_elem336);
          }
        }
        struct.setI16_listIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list338 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.i32_list = new ArrayList<Integer>(_list338.size);
          int _elem339;
          for (int _i340 = 0; _i340 < _list338.size; ++_i340)
          {
            _elem339 = iprot.readI32();
            struct.i32_list.add(_elem339);
          }
        }
        struct.setI32_listIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list341 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.i64_list = new ArrayList<Long>(_list341.size);
          long _elem342;
          for (int _i343 = 0; _i343 < _list341.size; ++_i343)
          {
            _elem342 = iprot.readI64();
            struct.i64_list.add(_elem342);
          }
        }
        struct.setI64_listIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list344 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.double_list = new ArrayList<Double>(_list344.size);
          double _elem345;
          for (int _i346 = 0; _i346 < _list344.size; ++_i346)
          {
            _elem345 = iprot.readDouble();
            struct.double_list.add(_elem345);
          }
        }
        struct.setDouble_listIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list347 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.string_list = new ArrayList<String>(_list347.size);
          String _elem348;
          for (int _i349 = 0; _i349 < _list347.size; ++_i349)
          {
            _elem348 = iprot.readString();
            struct.string_list.add(_elem348);
          }
        }
        struct.setString_listIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list350 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binary_list = new ArrayList<ByteBuffer>(_list350.size);
          ByteBuffer _elem351;
          for (int _i352 = 0; _i352 < _list350.size; ++_i352)
          {
            _elem351 = iprot.readBinary();
            struct.binary_list.add(_elem351);
          }
        }
        struct.setBinary_listIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.boolean_list = new ArrayList<Boolean>(_list353.size);
          boolean _elem354;
          for (int _i355 = 0; _i355 < _list353.size; ++_i355)
          {
            _elem354 = iprot.readBool();
            struct.boolean_list.add(_elem354);
          }
        }
        struct.setBoolean_listIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list356 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.struct_list = new ArrayList<Empty>(_list356.size);
          Empty _elem357;
          for (int _i358 = 0; _i358 < _list356.size; ++_i358)
          {
            _elem357 = new Empty();
            _elem357.read(iprot);
            struct.struct_list.add(_elem357);
          }
        }
        struct.setStruct_listIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TSet _set359 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byte_set = new HashSet<Byte>(2*_set359.size);
          byte _elem360;
          for (int _i361 = 0; _i361 < _set359.size; ++_i361)
          {
            _elem360 = iprot.readByte();
            struct.byte_set.add(_elem360);
          }
        }
        struct.setByte_setIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TSet _set362 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.i16_set = new HashSet<Short>(2*_set362.size);
          short _elem363;
          for (int _i364 = 0; _i364 < _set362.size; ++_i364)
          {
            _elem363 = iprot.readI16();
            struct.i16_set.add(_elem363);
          }
        }
        struct.setI16_setIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TSet _set365 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.i32_set = new HashSet<Integer>(2*_set365.size);
          int _elem366;
          for (int _i367 = 0; _i367 < _set365.size; ++_i367)
          {
            _elem366 = iprot.readI32();
            struct.i32_set.add(_elem366);
          }
        }
        struct.setI32_setIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TSet _set368 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.i64_set = new HashSet<Long>(2*_set368.size);
          long _elem369;
          for (int _i370 = 0; _i370 < _set368.size; ++_i370)
          {
            _elem369 = iprot.readI64();
            struct.i64_set.add(_elem369);
          }
        }
        struct.setI64_setIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TSet _set371 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.double_set = new HashSet<Double>(2*_set371.size);
          double _elem372;
          for (int _i373 = 0; _i373 < _set371.size; ++_i373)
          {
            _elem372 = iprot.readDouble();
            struct.double_set.add(_elem372);
          }
        }
        struct.setDouble_setIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TSet _set374 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.string_set = new HashSet<String>(2*_set374.size);
          String _elem375;
          for (int _i376 = 0; _i376 < _set374.size; ++_i376)
          {
            _elem375 = iprot.readString();
            struct.string_set.add(_elem375);
          }
        }
        struct.setString_setIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TSet _set377 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binary_set = new HashSet<ByteBuffer>(2*_set377.size);
          ByteBuffer _elem378;
          for (int _i379 = 0; _i379 < _set377.size; ++_i379)
          {
            _elem378 = iprot.readBinary();
            struct.binary_set.add(_elem378);
          }
        }
        struct.setBinary_setIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TSet _set380 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.boolean_set = new HashSet<Boolean>(2*_set380.size);
          boolean _elem381;
          for (int _i382 = 0; _i382 < _set380.size; ++_i382)
          {
            _elem381 = iprot.readBool();
            struct.boolean_set.add(_elem381);
          }
        }
        struct.setBoolean_setIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TSet _set383 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.struct_set = new HashSet<Empty>(2*_set383.size);
          Empty _elem384;
          for (int _i385 = 0; _i385 < _set383.size; ++_i385)
          {
            _elem384 = new Empty();
            _elem384.read(iprot);
            struct.struct_set.add(_elem384);
          }
        }
        struct.setStruct_setIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TMap _map386 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byte_byte_map = new HashMap<Byte,Byte>(2*_map386.size);
          byte _key387;
          byte _val388;
          for (int _i389 = 0; _i389 < _map386.size; ++_i389)
          {
            _key387 = iprot.readByte();
            _val388 = iprot.readByte();
            struct.byte_byte_map.put(_key387, _val388);
          }
        }
        struct.setByte_byte_mapIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TMap _map390 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.i16_byte_map = new HashMap<Short,Byte>(2*_map390.size);
          short _key391;
          byte _val392;
          for (int _i393 = 0; _i393 < _map390.size; ++_i393)
          {
            _key391 = iprot.readI16();
            _val392 = iprot.readByte();
            struct.i16_byte_map.put(_key391, _val392);
          }
        }
        struct.setI16_byte_mapIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TMap _map394 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.i32_byte_map = new HashMap<Integer,Byte>(2*_map394.size);
          int _key395;
          byte _val396;
          for (int _i397 = 0; _i397 < _map394.size; ++_i397)
          {
            _key395 = iprot.readI32();
            _val396 = iprot.readByte();
            struct.i32_byte_map.put(_key395, _val396);
          }
        }
        struct.setI32_byte_mapIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TMap _map398 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.i64_byte_map = new HashMap<Long,Byte>(2*_map398.size);
          long _key399;
          byte _val400;
          for (int _i401 = 0; _i401 < _map398.size; ++_i401)
          {
            _key399 = iprot.readI64();
            _val400 = iprot.readByte();
            struct.i64_byte_map.put(_key399, _val400);
          }
        }
        struct.setI64_byte_mapIsSet(true);
      }
      if (incoming.get(32)) {
        {
          org.apache.thrift.protocol.TMap _map402 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.double_byte_map = new HashMap<Double,Byte>(2*_map402.size);
          double _key403;
          byte _val404;
          for (int _i405 = 0; _i405 < _map402.size; ++_i405)
          {
            _key403 = iprot.readDouble();
            _val404 = iprot.readByte();
            struct.double_byte_map.put(_key403, _val404);
          }
        }
        struct.setDouble_byte_mapIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TMap _map406 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.string_byte_map = new HashMap<String,Byte>(2*_map406.size);
          String _key407;
          byte _val408;
          for (int _i409 = 0; _i409 < _map406.size; ++_i409)
          {
            _key407 = iprot.readString();
            _val408 = iprot.readByte();
            struct.string_byte_map.put(_key407, _val408);
          }
        }
        struct.setString_byte_mapIsSet(true);
      }
      if (incoming.get(34)) {
        {
          org.apache.thrift.protocol.TMap _map410 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.binary_byte_map = new HashMap<ByteBuffer,Byte>(2*_map410.size);
          ByteBuffer _key411;
          byte _val412;
          for (int _i413 = 0; _i413 < _map410.size; ++_i413)
          {
            _key411 = iprot.readBinary();
            _val412 = iprot.readByte();
            struct.binary_byte_map.put(_key411, _val412);
          }
        }
        struct.setBinary_byte_mapIsSet(true);
      }
      if (incoming.get(35)) {
        {
          org.apache.thrift.protocol.TMap _map414 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BOOL, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.boolean_byte_map = new HashMap<Boolean,Byte>(2*_map414.size);
          boolean _key415;
          byte _val416;
          for (int _i417 = 0; _i417 < _map414.size; ++_i417)
          {
            _key415 = iprot.readBool();
            _val416 = iprot.readByte();
            struct.boolean_byte_map.put(_key415, _val416);
          }
        }
        struct.setBoolean_byte_mapIsSet(true);
      }
      if (incoming.get(36)) {
        {
          org.apache.thrift.protocol.TMap _map418 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.byte_i16_map = new HashMap<Byte,Short>(2*_map418.size);
          byte _key419;
          short _val420;
          for (int _i421 = 0; _i421 < _map418.size; ++_i421)
          {
            _key419 = iprot.readByte();
            _val420 = iprot.readI16();
            struct.byte_i16_map.put(_key419, _val420);
          }
        }
        struct.setByte_i16_mapIsSet(true);
      }
      if (incoming.get(37)) {
        {
          org.apache.thrift.protocol.TMap _map422 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.byte_i32_map = new HashMap<Byte,Integer>(2*_map422.size);
          byte _key423;
          int _val424;
          for (int _i425 = 0; _i425 < _map422.size; ++_i425)
          {
            _key423 = iprot.readByte();
            _val424 = iprot.readI32();
            struct.byte_i32_map.put(_key423, _val424);
          }
        }
        struct.setByte_i32_mapIsSet(true);
      }
      if (incoming.get(38)) {
        {
          org.apache.thrift.protocol.TMap _map426 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.byte_i64_map = new HashMap<Byte,Long>(2*_map426.size);
          byte _key427;
          long _val428;
          for (int _i429 = 0; _i429 < _map426.size; ++_i429)
          {
            _key427 = iprot.readByte();
            _val428 = iprot.readI64();
            struct.byte_i64_map.put(_key427, _val428);
          }
        }
        struct.setByte_i64_mapIsSet(true);
      }
      if (incoming.get(39)) {
        {
          org.apache.thrift.protocol.TMap _map430 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.byte_double_map = new HashMap<Byte,Double>(2*_map430.size);
          byte _key431;
          double _val432;
          for (int _i433 = 0; _i433 < _map430.size; ++_i433)
          {
            _key431 = iprot.readByte();
            _val432 = iprot.readDouble();
            struct.byte_double_map.put(_key431, _val432);
          }
        }
        struct.setByte_double_mapIsSet(true);
      }
      if (incoming.get(40)) {
        {
          org.apache.thrift.protocol.TMap _map434 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.byte_string_map = new HashMap<Byte,String>(2*_map434.size);
          byte _key435;
          String _val436;
          for (int _i437 = 0; _i437 < _map434.size; ++_i437)
          {
            _key435 = iprot.readByte();
            _val436 = iprot.readString();
            struct.byte_string_map.put(_key435, _val436);
          }
        }
        struct.setByte_string_mapIsSet(true);
      }
      if (incoming.get(41)) {
        {
          org.apache.thrift.protocol.TMap _map438 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.byte_binary_map = new HashMap<Byte,ByteBuffer>(2*_map438.size);
          byte _key439;
          ByteBuffer _val440;
          for (int _i441 = 0; _i441 < _map438.size; ++_i441)
          {
            _key439 = iprot.readByte();
            _val440 = iprot.readBinary();
            struct.byte_binary_map.put(_key439, _val440);
          }
        }
        struct.setByte_binary_mapIsSet(true);
      }
      if (incoming.get(42)) {
        {
          org.apache.thrift.protocol.TMap _map442 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.byte_boolean_map = new HashMap<Byte,Boolean>(2*_map442.size);
          byte _key443;
          boolean _val444;
          for (int _i445 = 0; _i445 < _map442.size; ++_i445)
          {
            _key443 = iprot.readByte();
            _val444 = iprot.readBool();
            struct.byte_boolean_map.put(_key443, _val444);
          }
        }
        struct.setByte_boolean_mapIsSet(true);
      }
      if (incoming.get(43)) {
        {
          org.apache.thrift.protocol.TMap _map446 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.list_byte_map = new HashMap<List<Byte>,Byte>(2*_map446.size);
          List<Byte> _key447;
          byte _val448;
          for (int _i449 = 0; _i449 < _map446.size; ++_i449)
          {
            {
              org.apache.thrift.protocol.TList _list450 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _key447 = new ArrayList<Byte>(_list450.size);
              byte _elem451;
              for (int _i452 = 0; _i452 < _list450.size; ++_i452)
              {
                _elem451 = iprot.readByte();
                _key447.add(_elem451);
              }
            }
            _val448 = iprot.readByte();
            struct.list_byte_map.put(_key447, _val448);
          }
        }
        struct.setList_byte_mapIsSet(true);
      }
      if (incoming.get(44)) {
        {
          org.apache.thrift.protocol.TMap _map453 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.set_byte_map = new HashMap<Set<Byte>,Byte>(2*_map453.size);
          Set<Byte> _key454;
          byte _val455;
          for (int _i456 = 0; _i456 < _map453.size; ++_i456)
          {
            {
              org.apache.thrift.protocol.TSet _set457 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _key454 = new HashSet<Byte>(2*_set457.size);
              byte _elem458;
              for (int _i459 = 0; _i459 < _set457.size; ++_i459)
              {
                _elem458 = iprot.readByte();
                _key454.add(_elem458);
              }
            }
            _val455 = iprot.readByte();
            struct.set_byte_map.put(_key454, _val455);
          }
        }
        struct.setSet_byte_mapIsSet(true);
      }
      if (incoming.get(45)) {
        {
          org.apache.thrift.protocol.TMap _map460 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.map_byte_map = new HashMap<Map<Byte,Byte>,Byte>(2*_map460.size);
          Map<Byte,Byte> _key461;
          byte _val462;
          for (int _i463 = 0; _i463 < _map460.size; ++_i463)
          {
            {
              org.apache.thrift.protocol.TMap _map464 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _key461 = new HashMap<Byte,Byte>(2*_map464.size);
              byte _key465;
              byte _val466;
              for (int _i467 = 0; _i467 < _map464.size; ++_i467)
              {
                _key465 = iprot.readByte();
                _val466 = iprot.readByte();
                _key461.put(_key465, _val466);
              }
            }
            _val462 = iprot.readByte();
            struct.map_byte_map.put(_key461, _val462);
          }
        }
        struct.setMap_byte_mapIsSet(true);
      }
      if (incoming.get(46)) {
        {
          org.apache.thrift.protocol.TMap _map468 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.byte_map_map = new HashMap<Byte,Map<Byte,Byte>>(2*_map468.size);
          byte _key469;
          Map<Byte,Byte> _val470;
          for (int _i471 = 0; _i471 < _map468.size; ++_i471)
          {
            _key469 = iprot.readByte();
            {
              org.apache.thrift.protocol.TMap _map472 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _val470 = new HashMap<Byte,Byte>(2*_map472.size);
              byte _key473;
              byte _val474;
              for (int _i475 = 0; _i475 < _map472.size; ++_i475)
              {
                _key473 = iprot.readByte();
                _val474 = iprot.readByte();
                _val470.put(_key473, _val474);
              }
            }
            struct.byte_map_map.put(_key469, _val470);
          }
        }
        struct.setByte_map_mapIsSet(true);
      }
      if (incoming.get(47)) {
        {
          org.apache.thrift.protocol.TMap _map476 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.byte_set_map = new HashMap<Byte,Set<Byte>>(2*_map476.size);
          byte _key477;
          Set<Byte> _val478;
          for (int _i479 = 0; _i479 < _map476.size; ++_i479)
          {
            _key477 = iprot.readByte();
            {
              org.apache.thrift.protocol.TSet _set480 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _val478 = new HashSet<Byte>(2*_set480.size);
              byte _elem481;
              for (int _i482 = 0; _i482 < _set480.size; ++_i482)
              {
                _elem481 = iprot.readByte();
                _val478.add(_elem481);
              }
            }
            struct.byte_set_map.put(_key477, _val478);
          }
        }
        struct.setByte_set_mapIsSet(true);
      }
      if (incoming.get(48)) {
        {
          org.apache.thrift.protocol.TMap _map483 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.byte_list_map = new HashMap<Byte,List<Byte>>(2*_map483.size);
          byte _key484;
          List<Byte> _val485;
          for (int _i486 = 0; _i486 < _map483.size; ++_i486)
          {
            _key484 = iprot.readByte();
            {
              org.apache.thrift.protocol.TList _list487 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _val485 = new ArrayList<Byte>(_list487.size);
              byte _elem488;
              for (int _i489 = 0; _i489 < _list487.size; ++_i489)
              {
                _elem488 = iprot.readByte();
                _val485.add(_elem488);
              }
            }
            struct.byte_list_map.put(_key484, _val485);
          }
        }
        struct.setByte_list_mapIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

