/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Opt4 implements org.apache.thrift.TBase<Opt4, Opt4._Fields>, java.io.Serializable, Cloneable, Comparable<Opt4> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Opt4");

  private static final org.apache.thrift.protocol.TField DEF1_FIELD_DESC = new org.apache.thrift.protocol.TField("def1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEF2_FIELD_DESC = new org.apache.thrift.protocol.TField("def2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DEF3_FIELD_DESC = new org.apache.thrift.protocol.TField("def3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEF4_FIELD_DESC = new org.apache.thrift.protocol.TField("def4", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new Opt4StandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new Opt4TupleSchemeFactory();

  public int def1; // required
  public int def2; // required
  public int def3; // required
  public int def4; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEF1((short)1, "def1"),
    DEF2((short)2, "def2"),
    DEF3((short)3, "def3"),
    DEF4((short)4, "def4");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEF1
          return DEF1;
        case 2: // DEF2
          return DEF2;
        case 3: // DEF3
          return DEF3;
        case 4: // DEF4
          return DEF4;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEF1_ISSET_ID = 0;
  private static final int __DEF2_ISSET_ID = 1;
  private static final int __DEF3_ISSET_ID = 2;
  private static final int __DEF4_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEF1, new org.apache.thrift.meta_data.FieldMetaData("def1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF2, new org.apache.thrift.meta_data.FieldMetaData("def2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF3, new org.apache.thrift.meta_data.FieldMetaData("def3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF4, new org.apache.thrift.meta_data.FieldMetaData("def4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Opt4.class, metaDataMap);
  }

  public Opt4() {
  }

  public Opt4(
    int def1,
    int def2,
    int def3,
    int def4)
  {
    this();
    this.def1 = def1;
    setDef1IsSet(true);
    this.def2 = def2;
    setDef2IsSet(true);
    this.def3 = def3;
    setDef3IsSet(true);
    this.def4 = def4;
    setDef4IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Opt4(Opt4 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.def1 = other.def1;
    this.def2 = other.def2;
    this.def3 = other.def3;
    this.def4 = other.def4;
  }

  public Opt4 deepCopy() {
    return new Opt4(this);
  }

  @Override
  public void clear() {
    setDef1IsSet(false);
    this.def1 = 0;
    setDef2IsSet(false);
    this.def2 = 0;
    setDef3IsSet(false);
    this.def3 = 0;
    setDef4IsSet(false);
    this.def4 = 0;
  }

  public int getDef1() {
    return this.def1;
  }

  public Opt4 setDef1(int def1) {
    this.def1 = def1;
    setDef1IsSet(true);
    return this;
  }

  public void unsetDef1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  /** Returns true if field def1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef1() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  public void setDef1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF1_ISSET_ID, value);
  }

  public int getDef2() {
    return this.def2;
  }

  public Opt4 setDef2(int def2) {
    this.def2 = def2;
    setDef2IsSet(true);
    return this;
  }

  public void unsetDef2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  /** Returns true if field def2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef2() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  public void setDef2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF2_ISSET_ID, value);
  }

  public int getDef3() {
    return this.def3;
  }

  public Opt4 setDef3(int def3) {
    this.def3 = def3;
    setDef3IsSet(true);
    return this;
  }

  public void unsetDef3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  /** Returns true if field def3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef3() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  public void setDef3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF3_ISSET_ID, value);
  }

  public int getDef4() {
    return this.def4;
  }

  public Opt4 setDef4(int def4) {
    this.def4 = def4;
    setDef4IsSet(true);
    return this;
  }

  public void unsetDef4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  /** Returns true if field def4 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef4() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  public void setDef4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF4_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEF1:
      if (value == null) {
        unsetDef1();
      } else {
        setDef1((Integer)value);
      }
      break;

    case DEF2:
      if (value == null) {
        unsetDef2();
      } else {
        setDef2((Integer)value);
      }
      break;

    case DEF3:
      if (value == null) {
        unsetDef3();
      } else {
        setDef3((Integer)value);
      }
      break;

    case DEF4:
      if (value == null) {
        unsetDef4();
      } else {
        setDef4((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEF1:
      return getDef1();

    case DEF2:
      return getDef2();

    case DEF3:
      return getDef3();

    case DEF4:
      return getDef4();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEF1:
      return isSetDef1();
    case DEF2:
      return isSetDef2();
    case DEF3:
      return isSetDef3();
    case DEF4:
      return isSetDef4();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Opt4)
      return this.equals((Opt4)that);
    return false;
  }

  public boolean equals(Opt4 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_def1 = true;
    boolean that_present_def1 = true;
    if (this_present_def1 || that_present_def1) {
      if (!(this_present_def1 && that_present_def1))
        return false;
      if (this.def1 != that.def1)
        return false;
    }

    boolean this_present_def2 = true;
    boolean that_present_def2 = true;
    if (this_present_def2 || that_present_def2) {
      if (!(this_present_def2 && that_present_def2))
        return false;
      if (this.def2 != that.def2)
        return false;
    }

    boolean this_present_def3 = true;
    boolean that_present_def3 = true;
    if (this_present_def3 || that_present_def3) {
      if (!(this_present_def3 && that_present_def3))
        return false;
      if (this.def3 != that.def3)
        return false;
    }

    boolean this_present_def4 = true;
    boolean that_present_def4 = true;
    if (this_present_def4 || that_present_def4) {
      if (!(this_present_def4 && that_present_def4))
        return false;
      if (this.def4 != that.def4)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + def1;

    hashCode = hashCode * 8191 + def2;

    hashCode = hashCode * 8191 + def3;

    hashCode = hashCode * 8191 + def4;

    return hashCode;
  }

  @Override
  public int compareTo(Opt4 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDef1()).compareTo(other.isSetDef1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def1, other.def1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef2()).compareTo(other.isSetDef2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def2, other.def2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef3()).compareTo(other.isSetDef3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def3, other.def3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef4()).compareTo(other.isSetDef4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def4, other.def4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Opt4(");
    boolean first = true;

    sb.append("def1:");
    sb.append(this.def1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def2:");
    sb.append(this.def2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def3:");
    sb.append(this.def3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def4:");
    sb.append(this.def4);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Opt4StandardSchemeFactory implements SchemeFactory {
    public Opt4StandardScheme getScheme() {
      return new Opt4StandardScheme();
    }
  }

  private static class Opt4StandardScheme extends StandardScheme<Opt4> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Opt4 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEF1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def1 = iprot.readI32();
              struct.setDef1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEF2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def2 = iprot.readI32();
              struct.setDef2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEF3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def3 = iprot.readI32();
              struct.setDef3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEF4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def4 = iprot.readI32();
              struct.setDef4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Opt4 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEF1_FIELD_DESC);
      oprot.writeI32(struct.def1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF2_FIELD_DESC);
      oprot.writeI32(struct.def2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF3_FIELD_DESC);
      oprot.writeI32(struct.def3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF4_FIELD_DESC);
      oprot.writeI32(struct.def4);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Opt4TupleSchemeFactory implements SchemeFactory {
    public Opt4TupleScheme getScheme() {
      return new Opt4TupleScheme();
    }
  }

  private static class Opt4TupleScheme extends TupleScheme<Opt4> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Opt4 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDef1()) {
        optionals.set(0);
      }
      if (struct.isSetDef2()) {
        optionals.set(1);
      }
      if (struct.isSetDef3()) {
        optionals.set(2);
      }
      if (struct.isSetDef4()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDef1()) {
        oprot.writeI32(struct.def1);
      }
      if (struct.isSetDef2()) {
        oprot.writeI32(struct.def2);
      }
      if (struct.isSetDef3()) {
        oprot.writeI32(struct.def3);
      }
      if (struct.isSetDef4()) {
        oprot.writeI32(struct.def4);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Opt4 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.def1 = iprot.readI32();
        struct.setDef1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.def2 = iprot.readI32();
        struct.setDef2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.def3 = iprot.readI32();
        struct.setDef3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.def4 = iprot.readI32();
        struct.setDef4IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

