/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TestUnion extends org.apache.thrift.TUnion<TestUnion, TestUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestUnion");
  private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("string_field", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField I32_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_field", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STRUCT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_field", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField STRUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_list", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OTHER_I32_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("other_i32_field", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ENUM_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("enum_field", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField I32_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_set", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField I32_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_map", org.apache.thrift.protocol.TType.MAP, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * A doc string
     */
    STRING_FIELD((short)1, "string_field"),
    I32_FIELD((short)2, "i32_field"),
    STRUCT_FIELD((short)3, "struct_field"),
    STRUCT_LIST((short)4, "struct_list"),
    OTHER_I32_FIELD((short)5, "other_i32_field"),
    /**
     * 
     * @see SomeEnum
     */
    ENUM_FIELD((short)6, "enum_field"),
    I32_SET((short)7, "i32_set"),
    I32_MAP((short)8, "i32_map");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_FIELD
          return STRING_FIELD;
        case 2: // I32_FIELD
          return I32_FIELD;
        case 3: // STRUCT_FIELD
          return STRUCT_FIELD;
        case 4: // STRUCT_LIST
          return STRUCT_LIST;
        case 5: // OTHER_I32_FIELD
          return OTHER_I32_FIELD;
        case 6: // ENUM_FIELD
          return ENUM_FIELD;
        case 7: // I32_SET
          return I32_SET;
        case 8: // I32_MAP
          return I32_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("string_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I32_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i32_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("struct_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OneOfEach.class)));
    tmpMap.put(_Fields.STRUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("struct_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RandomStuff.class))));
    tmpMap.put(_Fields.OTHER_I32_FIELD, new org.apache.thrift.meta_data.FieldMetaData("other_i32_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENUM_FIELD, new org.apache.thrift.meta_data.FieldMetaData("enum_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SomeEnum.class)));
    tmpMap.put(_Fields.I32_SET, new org.apache.thrift.meta_data.FieldMetaData("i32_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.I32_MAP, new org.apache.thrift.meta_data.FieldMetaData("i32_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestUnion.class, metaDataMap);
  }

  public TestUnion() {
    super();
  }

  public TestUnion(_Fields setField, Object value) {
    super(setField, value);
  }

  public TestUnion(TestUnion other) {
    super(other);
  }
  public TestUnion deepCopy() {
    return new TestUnion(this);
  }

  public static TestUnion string_field(String value) {
    TestUnion x = new TestUnion();
    x.setString_field(value);
    return x;
  }

  public static TestUnion i32_field(int value) {
    TestUnion x = new TestUnion();
    x.setI32_field(value);
    return x;
  }

  public static TestUnion struct_field(OneOfEach value) {
    TestUnion x = new TestUnion();
    x.setStruct_field(value);
    return x;
  }

  public static TestUnion struct_list(List<RandomStuff> value) {
    TestUnion x = new TestUnion();
    x.setStruct_list(value);
    return x;
  }

  public static TestUnion other_i32_field(int value) {
    TestUnion x = new TestUnion();
    x.setOther_i32_field(value);
    return x;
  }

  public static TestUnion enum_field(SomeEnum value) {
    TestUnion x = new TestUnion();
    x.setEnum_field(value);
    return x;
  }

  public static TestUnion i32_set(Set<Integer> value) {
    TestUnion x = new TestUnion();
    x.setI32_set(value);
    return x;
  }

  public static TestUnion i32_map(Map<Integer,Integer> value) {
    TestUnion x = new TestUnion();
    x.setI32_map(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case STRING_FIELD:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'string_field', but got " + value.getClass().getSimpleName());
      case I32_FIELD:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'i32_field', but got " + value.getClass().getSimpleName());
      case STRUCT_FIELD:
        if (value instanceof OneOfEach) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OneOfEach for field 'struct_field', but got " + value.getClass().getSimpleName());
      case STRUCT_LIST:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<RandomStuff> for field 'struct_list', but got " + value.getClass().getSimpleName());
      case OTHER_I32_FIELD:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'other_i32_field', but got " + value.getClass().getSimpleName());
      case ENUM_FIELD:
        if (value instanceof SomeEnum) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SomeEnum for field 'enum_field', but got " + value.getClass().getSimpleName());
      case I32_SET:
        if (value instanceof Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Set<Integer> for field 'i32_set', but got " + value.getClass().getSimpleName());
      case I32_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<Integer,Integer> for field 'i32_map', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STRING_FIELD:
          if (field.type == STRING_FIELD_FIELD_DESC.type) {
            String string_field;
            string_field = iprot.readString();
            return string_field;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_FIELD:
          if (field.type == I32_FIELD_FIELD_DESC.type) {
            Integer i32_field;
            i32_field = iprot.readI32();
            return i32_field;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRUCT_FIELD:
          if (field.type == STRUCT_FIELD_FIELD_DESC.type) {
            OneOfEach struct_field;
            struct_field = new OneOfEach();
            struct_field.read(iprot);
            return struct_field;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRUCT_LIST:
          if (field.type == STRUCT_LIST_FIELD_DESC.type) {
            List<RandomStuff> struct_list;
            {
              org.apache.thrift.protocol.TList _list654 = iprot.readListBegin();
              struct_list = new ArrayList<RandomStuff>(_list654.size);
              RandomStuff _elem655;
              for (int _i656 = 0; _i656 < _list654.size; ++_i656)
              {
                _elem655 = new RandomStuff();
                _elem655.read(iprot);
                struct_list.add(_elem655);
              }
              iprot.readListEnd();
            }
            return struct_list;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OTHER_I32_FIELD:
          if (field.type == OTHER_I32_FIELD_FIELD_DESC.type) {
            Integer other_i32_field;
            other_i32_field = iprot.readI32();
            return other_i32_field;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENUM_FIELD:
          if (field.type == ENUM_FIELD_FIELD_DESC.type) {
            SomeEnum enum_field;
            enum_field = thrift.test.SomeEnum.findByValue(iprot.readI32());
            return enum_field;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_SET:
          if (field.type == I32_SET_FIELD_DESC.type) {
            Set<Integer> i32_set;
            {
              org.apache.thrift.protocol.TSet _set657 = iprot.readSetBegin();
              i32_set = new HashSet<Integer>(2*_set657.size);
              int _elem658;
              for (int _i659 = 0; _i659 < _set657.size; ++_i659)
              {
                _elem658 = iprot.readI32();
                i32_set.add(_elem658);
              }
              iprot.readSetEnd();
            }
            return i32_set;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_MAP:
          if (field.type == I32_MAP_FIELD_DESC.type) {
            Map<Integer,Integer> i32_map;
            {
              org.apache.thrift.protocol.TMap _map660 = iprot.readMapBegin();
              i32_map = new HashMap<Integer,Integer>(2*_map660.size);
              int _key661;
              int _val662;
              for (int _i663 = 0; _i663 < _map660.size; ++_i663)
              {
                _key661 = iprot.readI32();
                _val662 = iprot.readI32();
                i32_map.put(_key661, _val662);
              }
              iprot.readMapEnd();
            }
            return i32_map;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_FIELD:
        String string_field = (String)value_;
        oprot.writeString(string_field);
        return;
      case I32_FIELD:
        Integer i32_field = (Integer)value_;
        oprot.writeI32(i32_field);
        return;
      case STRUCT_FIELD:
        OneOfEach struct_field = (OneOfEach)value_;
        struct_field.write(oprot);
        return;
      case STRUCT_LIST:
        List<RandomStuff> struct_list = (List<RandomStuff>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct_list.size()));
          for (RandomStuff _iter664 : struct_list)
          {
            _iter664.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case OTHER_I32_FIELD:
        Integer other_i32_field = (Integer)value_;
        oprot.writeI32(other_i32_field);
        return;
      case ENUM_FIELD:
        SomeEnum enum_field = (SomeEnum)value_;
        oprot.writeI32(enum_field.getValue());
        return;
      case I32_SET:
        Set<Integer> i32_set = (Set<Integer>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, i32_set.size()));
          for (int _iter665 : i32_set)
          {
            oprot.writeI32(_iter665);
          }
          oprot.writeSetEnd();
        }
        return;
      case I32_MAP:
        Map<Integer,Integer> i32_map = (Map<Integer,Integer>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, i32_map.size()));
          for (Map.Entry<Integer, Integer> _iter666 : i32_map.entrySet())
          {
            oprot.writeI32(_iter666.getKey());
            oprot.writeI32(_iter666.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STRING_FIELD:
          String string_field;
          string_field = iprot.readString();
          return string_field;
        case I32_FIELD:
          Integer i32_field;
          i32_field = iprot.readI32();
          return i32_field;
        case STRUCT_FIELD:
          OneOfEach struct_field;
          struct_field = new OneOfEach();
          struct_field.read(iprot);
          return struct_field;
        case STRUCT_LIST:
          List<RandomStuff> struct_list;
          {
            org.apache.thrift.protocol.TList _list667 = iprot.readListBegin();
            struct_list = new ArrayList<RandomStuff>(_list667.size);
            RandomStuff _elem668;
            for (int _i669 = 0; _i669 < _list667.size; ++_i669)
            {
              _elem668 = new RandomStuff();
              _elem668.read(iprot);
              struct_list.add(_elem668);
            }
            iprot.readListEnd();
          }
          return struct_list;
        case OTHER_I32_FIELD:
          Integer other_i32_field;
          other_i32_field = iprot.readI32();
          return other_i32_field;
        case ENUM_FIELD:
          SomeEnum enum_field;
          enum_field = thrift.test.SomeEnum.findByValue(iprot.readI32());
          return enum_field;
        case I32_SET:
          Set<Integer> i32_set;
          {
            org.apache.thrift.protocol.TSet _set670 = iprot.readSetBegin();
            i32_set = new HashSet<Integer>(2*_set670.size);
            int _elem671;
            for (int _i672 = 0; _i672 < _set670.size; ++_i672)
            {
              _elem671 = iprot.readI32();
              i32_set.add(_elem671);
            }
            iprot.readSetEnd();
          }
          return i32_set;
        case I32_MAP:
          Map<Integer,Integer> i32_map;
          {
            org.apache.thrift.protocol.TMap _map673 = iprot.readMapBegin();
            i32_map = new HashMap<Integer,Integer>(2*_map673.size);
            int _key674;
            int _val675;
            for (int _i676 = 0; _i676 < _map673.size; ++_i676)
            {
              _key674 = iprot.readI32();
              _val675 = iprot.readI32();
              i32_map.put(_key674, _val675);
            }
            iprot.readMapEnd();
          }
          return i32_map;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_FIELD:
        String string_field = (String)value_;
        oprot.writeString(string_field);
        return;
      case I32_FIELD:
        Integer i32_field = (Integer)value_;
        oprot.writeI32(i32_field);
        return;
      case STRUCT_FIELD:
        OneOfEach struct_field = (OneOfEach)value_;
        struct_field.write(oprot);
        return;
      case STRUCT_LIST:
        List<RandomStuff> struct_list = (List<RandomStuff>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct_list.size()));
          for (RandomStuff _iter677 : struct_list)
          {
            _iter677.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case OTHER_I32_FIELD:
        Integer other_i32_field = (Integer)value_;
        oprot.writeI32(other_i32_field);
        return;
      case ENUM_FIELD:
        SomeEnum enum_field = (SomeEnum)value_;
        oprot.writeI32(enum_field.getValue());
        return;
      case I32_SET:
        Set<Integer> i32_set = (Set<Integer>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, i32_set.size()));
          for (int _iter678 : i32_set)
          {
            oprot.writeI32(_iter678);
          }
          oprot.writeSetEnd();
        }
        return;
      case I32_MAP:
        Map<Integer,Integer> i32_map = (Map<Integer,Integer>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, i32_map.size()));
          for (Map.Entry<Integer, Integer> _iter679 : i32_map.entrySet())
          {
            oprot.writeI32(_iter679.getKey());
            oprot.writeI32(_iter679.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STRING_FIELD:
        return STRING_FIELD_FIELD_DESC;
      case I32_FIELD:
        return I32_FIELD_FIELD_DESC;
      case STRUCT_FIELD:
        return STRUCT_FIELD_FIELD_DESC;
      case STRUCT_LIST:
        return STRUCT_LIST_FIELD_DESC;
      case OTHER_I32_FIELD:
        return OTHER_I32_FIELD_FIELD_DESC;
      case ENUM_FIELD:
        return ENUM_FIELD_FIELD_DESC;
      case I32_SET:
        return I32_SET_FIELD_DESC;
      case I32_MAP:
        return I32_MAP_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * A doc string
   */
  public String getString_field() {
    if (getSetField() == _Fields.STRING_FIELD) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'string_field' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A doc string
   */
  public void setString_field(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_FIELD;
    value_ = value;
  }

  public int getI32_field() {
    if (getSetField() == _Fields.I32_FIELD) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32_field' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_field(int value) {
    setField_ = _Fields.I32_FIELD;
    value_ = value;
  }

  public OneOfEach getStruct_field() {
    if (getSetField() == _Fields.STRUCT_FIELD) {
      return (OneOfEach)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'struct_field' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStruct_field(OneOfEach value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRUCT_FIELD;
    value_ = value;
  }

  public List<RandomStuff> getStruct_list() {
    if (getSetField() == _Fields.STRUCT_LIST) {
      return (List<RandomStuff>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'struct_list' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStruct_list(List<RandomStuff> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRUCT_LIST;
    value_ = value;
  }

  public int getOther_i32_field() {
    if (getSetField() == _Fields.OTHER_I32_FIELD) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'other_i32_field' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOther_i32_field(int value) {
    setField_ = _Fields.OTHER_I32_FIELD;
    value_ = value;
  }

  /**
   * 
   * @see SomeEnum
   */
  public SomeEnum getEnum_field() {
    if (getSetField() == _Fields.ENUM_FIELD) {
      return (SomeEnum)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'enum_field' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see SomeEnum
   */
  public void setEnum_field(SomeEnum value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ENUM_FIELD;
    value_ = value;
  }

  public Set<Integer> getI32_set() {
    if (getSetField() == _Fields.I32_SET) {
      return (Set<Integer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32_set' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_set(Set<Integer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I32_SET;
    value_ = value;
  }

  public Map<Integer,Integer> getI32_map() {
    if (getSetField() == _Fields.I32_MAP) {
      return (Map<Integer,Integer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32_map' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_map(Map<Integer,Integer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I32_MAP;
    value_ = value;
  }

  public boolean isSetString_field() {
    return setField_ == _Fields.STRING_FIELD;
  }


  public boolean isSetI32_field() {
    return setField_ == _Fields.I32_FIELD;
  }


  public boolean isSetStruct_field() {
    return setField_ == _Fields.STRUCT_FIELD;
  }


  public boolean isSetStruct_list() {
    return setField_ == _Fields.STRUCT_LIST;
  }


  public boolean isSetOther_i32_field() {
    return setField_ == _Fields.OTHER_I32_FIELD;
  }


  public boolean isSetEnum_field() {
    return setField_ == _Fields.ENUM_FIELD;
  }


  public boolean isSetI32_set() {
    return setField_ == _Fields.I32_SET;
  }


  public boolean isSetI32_map() {
    return setField_ == _Fields.I32_MAP;
  }


  public boolean equals(Object other) {
    if (other instanceof TestUnion) {
      return equals((TestUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TestUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TestUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
