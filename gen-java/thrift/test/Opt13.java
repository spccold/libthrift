/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Opt13 implements org.apache.thrift.TBase<Opt13, Opt13._Fields>, java.io.Serializable, Cloneable, Comparable<Opt13> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Opt13");

  private static final org.apache.thrift.protocol.TField DEF1_FIELD_DESC = new org.apache.thrift.protocol.TField("def1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEF2_FIELD_DESC = new org.apache.thrift.protocol.TField("def2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DEF3_FIELD_DESC = new org.apache.thrift.protocol.TField("def3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEF4_FIELD_DESC = new org.apache.thrift.protocol.TField("def4", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEF5_FIELD_DESC = new org.apache.thrift.protocol.TField("def5", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEF6_FIELD_DESC = new org.apache.thrift.protocol.TField("def6", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEF7_FIELD_DESC = new org.apache.thrift.protocol.TField("def7", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEF8_FIELD_DESC = new org.apache.thrift.protocol.TField("def8", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DEF9_FIELD_DESC = new org.apache.thrift.protocol.TField("def9", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DEF10_FIELD_DESC = new org.apache.thrift.protocol.TField("def10", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DEF11_FIELD_DESC = new org.apache.thrift.protocol.TField("def11", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DEF12_FIELD_DESC = new org.apache.thrift.protocol.TField("def12", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DEF13_FIELD_DESC = new org.apache.thrift.protocol.TField("def13", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new Opt13StandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new Opt13TupleSchemeFactory();

  public int def1; // required
  public int def2; // required
  public int def3; // required
  public int def4; // required
  public int def5; // required
  public int def6; // required
  public int def7; // required
  public int def8; // required
  public int def9; // required
  public int def10; // required
  public int def11; // required
  public int def12; // required
  public int def13; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEF1((short)1, "def1"),
    DEF2((short)2, "def2"),
    DEF3((short)3, "def3"),
    DEF4((short)4, "def4"),
    DEF5((short)5, "def5"),
    DEF6((short)6, "def6"),
    DEF7((short)7, "def7"),
    DEF8((short)8, "def8"),
    DEF9((short)9, "def9"),
    DEF10((short)10, "def10"),
    DEF11((short)11, "def11"),
    DEF12((short)12, "def12"),
    DEF13((short)13, "def13");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEF1
          return DEF1;
        case 2: // DEF2
          return DEF2;
        case 3: // DEF3
          return DEF3;
        case 4: // DEF4
          return DEF4;
        case 5: // DEF5
          return DEF5;
        case 6: // DEF6
          return DEF6;
        case 7: // DEF7
          return DEF7;
        case 8: // DEF8
          return DEF8;
        case 9: // DEF9
          return DEF9;
        case 10: // DEF10
          return DEF10;
        case 11: // DEF11
          return DEF11;
        case 12: // DEF12
          return DEF12;
        case 13: // DEF13
          return DEF13;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEF1_ISSET_ID = 0;
  private static final int __DEF2_ISSET_ID = 1;
  private static final int __DEF3_ISSET_ID = 2;
  private static final int __DEF4_ISSET_ID = 3;
  private static final int __DEF5_ISSET_ID = 4;
  private static final int __DEF6_ISSET_ID = 5;
  private static final int __DEF7_ISSET_ID = 6;
  private static final int __DEF8_ISSET_ID = 7;
  private static final int __DEF9_ISSET_ID = 8;
  private static final int __DEF10_ISSET_ID = 9;
  private static final int __DEF11_ISSET_ID = 10;
  private static final int __DEF12_ISSET_ID = 11;
  private static final int __DEF13_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEF1, new org.apache.thrift.meta_data.FieldMetaData("def1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF2, new org.apache.thrift.meta_data.FieldMetaData("def2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF3, new org.apache.thrift.meta_data.FieldMetaData("def3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF4, new org.apache.thrift.meta_data.FieldMetaData("def4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF5, new org.apache.thrift.meta_data.FieldMetaData("def5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF6, new org.apache.thrift.meta_data.FieldMetaData("def6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF7, new org.apache.thrift.meta_data.FieldMetaData("def7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF8, new org.apache.thrift.meta_data.FieldMetaData("def8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF9, new org.apache.thrift.meta_data.FieldMetaData("def9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF10, new org.apache.thrift.meta_data.FieldMetaData("def10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF11, new org.apache.thrift.meta_data.FieldMetaData("def11", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF12, new org.apache.thrift.meta_data.FieldMetaData("def12", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF13, new org.apache.thrift.meta_data.FieldMetaData("def13", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Opt13.class, metaDataMap);
  }

  public Opt13() {
  }

  public Opt13(
    int def1,
    int def2,
    int def3,
    int def4,
    int def5,
    int def6,
    int def7,
    int def8,
    int def9,
    int def10,
    int def11,
    int def12,
    int def13)
  {
    this();
    this.def1 = def1;
    setDef1IsSet(true);
    this.def2 = def2;
    setDef2IsSet(true);
    this.def3 = def3;
    setDef3IsSet(true);
    this.def4 = def4;
    setDef4IsSet(true);
    this.def5 = def5;
    setDef5IsSet(true);
    this.def6 = def6;
    setDef6IsSet(true);
    this.def7 = def7;
    setDef7IsSet(true);
    this.def8 = def8;
    setDef8IsSet(true);
    this.def9 = def9;
    setDef9IsSet(true);
    this.def10 = def10;
    setDef10IsSet(true);
    this.def11 = def11;
    setDef11IsSet(true);
    this.def12 = def12;
    setDef12IsSet(true);
    this.def13 = def13;
    setDef13IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Opt13(Opt13 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.def1 = other.def1;
    this.def2 = other.def2;
    this.def3 = other.def3;
    this.def4 = other.def4;
    this.def5 = other.def5;
    this.def6 = other.def6;
    this.def7 = other.def7;
    this.def8 = other.def8;
    this.def9 = other.def9;
    this.def10 = other.def10;
    this.def11 = other.def11;
    this.def12 = other.def12;
    this.def13 = other.def13;
  }

  public Opt13 deepCopy() {
    return new Opt13(this);
  }

  @Override
  public void clear() {
    setDef1IsSet(false);
    this.def1 = 0;
    setDef2IsSet(false);
    this.def2 = 0;
    setDef3IsSet(false);
    this.def3 = 0;
    setDef4IsSet(false);
    this.def4 = 0;
    setDef5IsSet(false);
    this.def5 = 0;
    setDef6IsSet(false);
    this.def6 = 0;
    setDef7IsSet(false);
    this.def7 = 0;
    setDef8IsSet(false);
    this.def8 = 0;
    setDef9IsSet(false);
    this.def9 = 0;
    setDef10IsSet(false);
    this.def10 = 0;
    setDef11IsSet(false);
    this.def11 = 0;
    setDef12IsSet(false);
    this.def12 = 0;
    setDef13IsSet(false);
    this.def13 = 0;
  }

  public int getDef1() {
    return this.def1;
  }

  public Opt13 setDef1(int def1) {
    this.def1 = def1;
    setDef1IsSet(true);
    return this;
  }

  public void unsetDef1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  /** Returns true if field def1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef1() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  public void setDef1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF1_ISSET_ID, value);
  }

  public int getDef2() {
    return this.def2;
  }

  public Opt13 setDef2(int def2) {
    this.def2 = def2;
    setDef2IsSet(true);
    return this;
  }

  public void unsetDef2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  /** Returns true if field def2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef2() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  public void setDef2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF2_ISSET_ID, value);
  }

  public int getDef3() {
    return this.def3;
  }

  public Opt13 setDef3(int def3) {
    this.def3 = def3;
    setDef3IsSet(true);
    return this;
  }

  public void unsetDef3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  /** Returns true if field def3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef3() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  public void setDef3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF3_ISSET_ID, value);
  }

  public int getDef4() {
    return this.def4;
  }

  public Opt13 setDef4(int def4) {
    this.def4 = def4;
    setDef4IsSet(true);
    return this;
  }

  public void unsetDef4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  /** Returns true if field def4 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef4() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  public void setDef4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF4_ISSET_ID, value);
  }

  public int getDef5() {
    return this.def5;
  }

  public Opt13 setDef5(int def5) {
    this.def5 = def5;
    setDef5IsSet(true);
    return this;
  }

  public void unsetDef5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF5_ISSET_ID);
  }

  /** Returns true if field def5 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef5() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF5_ISSET_ID);
  }

  public void setDef5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF5_ISSET_ID, value);
  }

  public int getDef6() {
    return this.def6;
  }

  public Opt13 setDef6(int def6) {
    this.def6 = def6;
    setDef6IsSet(true);
    return this;
  }

  public void unsetDef6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF6_ISSET_ID);
  }

  /** Returns true if field def6 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef6() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF6_ISSET_ID);
  }

  public void setDef6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF6_ISSET_ID, value);
  }

  public int getDef7() {
    return this.def7;
  }

  public Opt13 setDef7(int def7) {
    this.def7 = def7;
    setDef7IsSet(true);
    return this;
  }

  public void unsetDef7() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF7_ISSET_ID);
  }

  /** Returns true if field def7 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef7() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF7_ISSET_ID);
  }

  public void setDef7IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF7_ISSET_ID, value);
  }

  public int getDef8() {
    return this.def8;
  }

  public Opt13 setDef8(int def8) {
    this.def8 = def8;
    setDef8IsSet(true);
    return this;
  }

  public void unsetDef8() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF8_ISSET_ID);
  }

  /** Returns true if field def8 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef8() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF8_ISSET_ID);
  }

  public void setDef8IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF8_ISSET_ID, value);
  }

  public int getDef9() {
    return this.def9;
  }

  public Opt13 setDef9(int def9) {
    this.def9 = def9;
    setDef9IsSet(true);
    return this;
  }

  public void unsetDef9() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF9_ISSET_ID);
  }

  /** Returns true if field def9 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef9() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF9_ISSET_ID);
  }

  public void setDef9IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF9_ISSET_ID, value);
  }

  public int getDef10() {
    return this.def10;
  }

  public Opt13 setDef10(int def10) {
    this.def10 = def10;
    setDef10IsSet(true);
    return this;
  }

  public void unsetDef10() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF10_ISSET_ID);
  }

  /** Returns true if field def10 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef10() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF10_ISSET_ID);
  }

  public void setDef10IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF10_ISSET_ID, value);
  }

  public int getDef11() {
    return this.def11;
  }

  public Opt13 setDef11(int def11) {
    this.def11 = def11;
    setDef11IsSet(true);
    return this;
  }

  public void unsetDef11() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF11_ISSET_ID);
  }

  /** Returns true if field def11 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef11() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF11_ISSET_ID);
  }

  public void setDef11IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF11_ISSET_ID, value);
  }

  public int getDef12() {
    return this.def12;
  }

  public Opt13 setDef12(int def12) {
    this.def12 = def12;
    setDef12IsSet(true);
    return this;
  }

  public void unsetDef12() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF12_ISSET_ID);
  }

  /** Returns true if field def12 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef12() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF12_ISSET_ID);
  }

  public void setDef12IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF12_ISSET_ID, value);
  }

  public int getDef13() {
    return this.def13;
  }

  public Opt13 setDef13(int def13) {
    this.def13 = def13;
    setDef13IsSet(true);
    return this;
  }

  public void unsetDef13() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF13_ISSET_ID);
  }

  /** Returns true if field def13 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef13() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF13_ISSET_ID);
  }

  public void setDef13IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF13_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEF1:
      if (value == null) {
        unsetDef1();
      } else {
        setDef1((Integer)value);
      }
      break;

    case DEF2:
      if (value == null) {
        unsetDef2();
      } else {
        setDef2((Integer)value);
      }
      break;

    case DEF3:
      if (value == null) {
        unsetDef3();
      } else {
        setDef3((Integer)value);
      }
      break;

    case DEF4:
      if (value == null) {
        unsetDef4();
      } else {
        setDef4((Integer)value);
      }
      break;

    case DEF5:
      if (value == null) {
        unsetDef5();
      } else {
        setDef5((Integer)value);
      }
      break;

    case DEF6:
      if (value == null) {
        unsetDef6();
      } else {
        setDef6((Integer)value);
      }
      break;

    case DEF7:
      if (value == null) {
        unsetDef7();
      } else {
        setDef7((Integer)value);
      }
      break;

    case DEF8:
      if (value == null) {
        unsetDef8();
      } else {
        setDef8((Integer)value);
      }
      break;

    case DEF9:
      if (value == null) {
        unsetDef9();
      } else {
        setDef9((Integer)value);
      }
      break;

    case DEF10:
      if (value == null) {
        unsetDef10();
      } else {
        setDef10((Integer)value);
      }
      break;

    case DEF11:
      if (value == null) {
        unsetDef11();
      } else {
        setDef11((Integer)value);
      }
      break;

    case DEF12:
      if (value == null) {
        unsetDef12();
      } else {
        setDef12((Integer)value);
      }
      break;

    case DEF13:
      if (value == null) {
        unsetDef13();
      } else {
        setDef13((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEF1:
      return getDef1();

    case DEF2:
      return getDef2();

    case DEF3:
      return getDef3();

    case DEF4:
      return getDef4();

    case DEF5:
      return getDef5();

    case DEF6:
      return getDef6();

    case DEF7:
      return getDef7();

    case DEF8:
      return getDef8();

    case DEF9:
      return getDef9();

    case DEF10:
      return getDef10();

    case DEF11:
      return getDef11();

    case DEF12:
      return getDef12();

    case DEF13:
      return getDef13();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEF1:
      return isSetDef1();
    case DEF2:
      return isSetDef2();
    case DEF3:
      return isSetDef3();
    case DEF4:
      return isSetDef4();
    case DEF5:
      return isSetDef5();
    case DEF6:
      return isSetDef6();
    case DEF7:
      return isSetDef7();
    case DEF8:
      return isSetDef8();
    case DEF9:
      return isSetDef9();
    case DEF10:
      return isSetDef10();
    case DEF11:
      return isSetDef11();
    case DEF12:
      return isSetDef12();
    case DEF13:
      return isSetDef13();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Opt13)
      return this.equals((Opt13)that);
    return false;
  }

  public boolean equals(Opt13 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_def1 = true;
    boolean that_present_def1 = true;
    if (this_present_def1 || that_present_def1) {
      if (!(this_present_def1 && that_present_def1))
        return false;
      if (this.def1 != that.def1)
        return false;
    }

    boolean this_present_def2 = true;
    boolean that_present_def2 = true;
    if (this_present_def2 || that_present_def2) {
      if (!(this_present_def2 && that_present_def2))
        return false;
      if (this.def2 != that.def2)
        return false;
    }

    boolean this_present_def3 = true;
    boolean that_present_def3 = true;
    if (this_present_def3 || that_present_def3) {
      if (!(this_present_def3 && that_present_def3))
        return false;
      if (this.def3 != that.def3)
        return false;
    }

    boolean this_present_def4 = true;
    boolean that_present_def4 = true;
    if (this_present_def4 || that_present_def4) {
      if (!(this_present_def4 && that_present_def4))
        return false;
      if (this.def4 != that.def4)
        return false;
    }

    boolean this_present_def5 = true;
    boolean that_present_def5 = true;
    if (this_present_def5 || that_present_def5) {
      if (!(this_present_def5 && that_present_def5))
        return false;
      if (this.def5 != that.def5)
        return false;
    }

    boolean this_present_def6 = true;
    boolean that_present_def6 = true;
    if (this_present_def6 || that_present_def6) {
      if (!(this_present_def6 && that_present_def6))
        return false;
      if (this.def6 != that.def6)
        return false;
    }

    boolean this_present_def7 = true;
    boolean that_present_def7 = true;
    if (this_present_def7 || that_present_def7) {
      if (!(this_present_def7 && that_present_def7))
        return false;
      if (this.def7 != that.def7)
        return false;
    }

    boolean this_present_def8 = true;
    boolean that_present_def8 = true;
    if (this_present_def8 || that_present_def8) {
      if (!(this_present_def8 && that_present_def8))
        return false;
      if (this.def8 != that.def8)
        return false;
    }

    boolean this_present_def9 = true;
    boolean that_present_def9 = true;
    if (this_present_def9 || that_present_def9) {
      if (!(this_present_def9 && that_present_def9))
        return false;
      if (this.def9 != that.def9)
        return false;
    }

    boolean this_present_def10 = true;
    boolean that_present_def10 = true;
    if (this_present_def10 || that_present_def10) {
      if (!(this_present_def10 && that_present_def10))
        return false;
      if (this.def10 != that.def10)
        return false;
    }

    boolean this_present_def11 = true;
    boolean that_present_def11 = true;
    if (this_present_def11 || that_present_def11) {
      if (!(this_present_def11 && that_present_def11))
        return false;
      if (this.def11 != that.def11)
        return false;
    }

    boolean this_present_def12 = true;
    boolean that_present_def12 = true;
    if (this_present_def12 || that_present_def12) {
      if (!(this_present_def12 && that_present_def12))
        return false;
      if (this.def12 != that.def12)
        return false;
    }

    boolean this_present_def13 = true;
    boolean that_present_def13 = true;
    if (this_present_def13 || that_present_def13) {
      if (!(this_present_def13 && that_present_def13))
        return false;
      if (this.def13 != that.def13)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + def1;

    hashCode = hashCode * 8191 + def2;

    hashCode = hashCode * 8191 + def3;

    hashCode = hashCode * 8191 + def4;

    hashCode = hashCode * 8191 + def5;

    hashCode = hashCode * 8191 + def6;

    hashCode = hashCode * 8191 + def7;

    hashCode = hashCode * 8191 + def8;

    hashCode = hashCode * 8191 + def9;

    hashCode = hashCode * 8191 + def10;

    hashCode = hashCode * 8191 + def11;

    hashCode = hashCode * 8191 + def12;

    hashCode = hashCode * 8191 + def13;

    return hashCode;
  }

  @Override
  public int compareTo(Opt13 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDef1()).compareTo(other.isSetDef1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def1, other.def1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef2()).compareTo(other.isSetDef2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def2, other.def2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef3()).compareTo(other.isSetDef3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def3, other.def3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef4()).compareTo(other.isSetDef4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def4, other.def4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef5()).compareTo(other.isSetDef5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def5, other.def5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef6()).compareTo(other.isSetDef6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def6, other.def6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef7()).compareTo(other.isSetDef7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def7, other.def7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef8()).compareTo(other.isSetDef8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def8, other.def8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef9()).compareTo(other.isSetDef9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def9, other.def9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef10()).compareTo(other.isSetDef10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def10, other.def10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef11()).compareTo(other.isSetDef11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def11, other.def11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef12()).compareTo(other.isSetDef12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def12, other.def12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef13()).compareTo(other.isSetDef13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def13, other.def13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Opt13(");
    boolean first = true;

    sb.append("def1:");
    sb.append(this.def1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def2:");
    sb.append(this.def2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def3:");
    sb.append(this.def3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def4:");
    sb.append(this.def4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def5:");
    sb.append(this.def5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def6:");
    sb.append(this.def6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def7:");
    sb.append(this.def7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def8:");
    sb.append(this.def8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def9:");
    sb.append(this.def9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def10:");
    sb.append(this.def10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def11:");
    sb.append(this.def11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def12:");
    sb.append(this.def12);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def13:");
    sb.append(this.def13);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Opt13StandardSchemeFactory implements SchemeFactory {
    public Opt13StandardScheme getScheme() {
      return new Opt13StandardScheme();
    }
  }

  private static class Opt13StandardScheme extends StandardScheme<Opt13> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Opt13 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEF1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def1 = iprot.readI32();
              struct.setDef1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEF2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def2 = iprot.readI32();
              struct.setDef2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEF3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def3 = iprot.readI32();
              struct.setDef3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEF4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def4 = iprot.readI32();
              struct.setDef4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEF5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def5 = iprot.readI32();
              struct.setDef5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEF6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def6 = iprot.readI32();
              struct.setDef6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEF7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def7 = iprot.readI32();
              struct.setDef7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEF8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def8 = iprot.readI32();
              struct.setDef8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEF9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def9 = iprot.readI32();
              struct.setDef9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEF10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def10 = iprot.readI32();
              struct.setDef10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEF11
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def11 = iprot.readI32();
              struct.setDef11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEF12
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def12 = iprot.readI32();
              struct.setDef12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEF13
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def13 = iprot.readI32();
              struct.setDef13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Opt13 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEF1_FIELD_DESC);
      oprot.writeI32(struct.def1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF2_FIELD_DESC);
      oprot.writeI32(struct.def2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF3_FIELD_DESC);
      oprot.writeI32(struct.def3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF4_FIELD_DESC);
      oprot.writeI32(struct.def4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF5_FIELD_DESC);
      oprot.writeI32(struct.def5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF6_FIELD_DESC);
      oprot.writeI32(struct.def6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF7_FIELD_DESC);
      oprot.writeI32(struct.def7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF8_FIELD_DESC);
      oprot.writeI32(struct.def8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF9_FIELD_DESC);
      oprot.writeI32(struct.def9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF10_FIELD_DESC);
      oprot.writeI32(struct.def10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF11_FIELD_DESC);
      oprot.writeI32(struct.def11);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF12_FIELD_DESC);
      oprot.writeI32(struct.def12);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF13_FIELD_DESC);
      oprot.writeI32(struct.def13);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Opt13TupleSchemeFactory implements SchemeFactory {
    public Opt13TupleScheme getScheme() {
      return new Opt13TupleScheme();
    }
  }

  private static class Opt13TupleScheme extends TupleScheme<Opt13> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Opt13 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDef1()) {
        optionals.set(0);
      }
      if (struct.isSetDef2()) {
        optionals.set(1);
      }
      if (struct.isSetDef3()) {
        optionals.set(2);
      }
      if (struct.isSetDef4()) {
        optionals.set(3);
      }
      if (struct.isSetDef5()) {
        optionals.set(4);
      }
      if (struct.isSetDef6()) {
        optionals.set(5);
      }
      if (struct.isSetDef7()) {
        optionals.set(6);
      }
      if (struct.isSetDef8()) {
        optionals.set(7);
      }
      if (struct.isSetDef9()) {
        optionals.set(8);
      }
      if (struct.isSetDef10()) {
        optionals.set(9);
      }
      if (struct.isSetDef11()) {
        optionals.set(10);
      }
      if (struct.isSetDef12()) {
        optionals.set(11);
      }
      if (struct.isSetDef13()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetDef1()) {
        oprot.writeI32(struct.def1);
      }
      if (struct.isSetDef2()) {
        oprot.writeI32(struct.def2);
      }
      if (struct.isSetDef3()) {
        oprot.writeI32(struct.def3);
      }
      if (struct.isSetDef4()) {
        oprot.writeI32(struct.def4);
      }
      if (struct.isSetDef5()) {
        oprot.writeI32(struct.def5);
      }
      if (struct.isSetDef6()) {
        oprot.writeI32(struct.def6);
      }
      if (struct.isSetDef7()) {
        oprot.writeI32(struct.def7);
      }
      if (struct.isSetDef8()) {
        oprot.writeI32(struct.def8);
      }
      if (struct.isSetDef9()) {
        oprot.writeI32(struct.def9);
      }
      if (struct.isSetDef10()) {
        oprot.writeI32(struct.def10);
      }
      if (struct.isSetDef11()) {
        oprot.writeI32(struct.def11);
      }
      if (struct.isSetDef12()) {
        oprot.writeI32(struct.def12);
      }
      if (struct.isSetDef13()) {
        oprot.writeI32(struct.def13);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Opt13 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.def1 = iprot.readI32();
        struct.setDef1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.def2 = iprot.readI32();
        struct.setDef2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.def3 = iprot.readI32();
        struct.setDef3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.def4 = iprot.readI32();
        struct.setDef4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.def5 = iprot.readI32();
        struct.setDef5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.def6 = iprot.readI32();
        struct.setDef6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.def7 = iprot.readI32();
        struct.setDef7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.def8 = iprot.readI32();
        struct.setDef8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.def9 = iprot.readI32();
        struct.setDef9IsSet(true);
      }
      if (incoming.get(9)) {
        struct.def10 = iprot.readI32();
        struct.setDef10IsSet(true);
      }
      if (incoming.get(10)) {
        struct.def11 = iprot.readI32();
        struct.setDef11IsSet(true);
      }
      if (incoming.get(11)) {
        struct.def12 = iprot.readI32();
        struct.setDef12IsSet(true);
      }
      if (incoming.get(12)) {
        struct.def13 = iprot.readI32();
        struct.setDef13IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

