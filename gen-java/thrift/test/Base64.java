/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Base64 implements org.apache.thrift.TBase<Base64, Base64._Fields>, java.io.Serializable, Cloneable, Comparable<Base64> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Base64");

  private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField B2_FIELD_DESC = new org.apache.thrift.protocol.TField("b2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField B3_FIELD_DESC = new org.apache.thrift.protocol.TField("b3", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField B4_FIELD_DESC = new org.apache.thrift.protocol.TField("b4", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField B5_FIELD_DESC = new org.apache.thrift.protocol.TField("b5", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField B6_FIELD_DESC = new org.apache.thrift.protocol.TField("b6", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new Base64StandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new Base64TupleSchemeFactory();

  public int a; // required
  public ByteBuffer b1; // required
  public ByteBuffer b2; // required
  public ByteBuffer b3; // required
  public ByteBuffer b4; // required
  public ByteBuffer b5; // required
  public ByteBuffer b6; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A((short)1, "a"),
    B1((short)2, "b1"),
    B2((short)3, "b2"),
    B3((short)4, "b3"),
    B4((short)5, "b4"),
    B5((short)6, "b5"),
    B6((short)7, "b6");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A
          return A;
        case 2: // B1
          return B1;
        case 3: // B2
          return B2;
        case 4: // B3
          return B3;
        case 5: // B4
          return B4;
        case 6: // B5
          return B5;
        case 7: // B6
          return B6;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.B2, new org.apache.thrift.meta_data.FieldMetaData("b2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.B3, new org.apache.thrift.meta_data.FieldMetaData("b3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.B4, new org.apache.thrift.meta_data.FieldMetaData("b4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.B5, new org.apache.thrift.meta_data.FieldMetaData("b5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.B6, new org.apache.thrift.meta_data.FieldMetaData("b6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Base64.class, metaDataMap);
  }

  public Base64() {
  }

  public Base64(
    int a,
    ByteBuffer b1,
    ByteBuffer b2,
    ByteBuffer b3,
    ByteBuffer b4,
    ByteBuffer b5,
    ByteBuffer b6)
  {
    this();
    this.a = a;
    setAIsSet(true);
    this.b1 = org.apache.thrift.TBaseHelper.copyBinary(b1);
    this.b2 = org.apache.thrift.TBaseHelper.copyBinary(b2);
    this.b3 = org.apache.thrift.TBaseHelper.copyBinary(b3);
    this.b4 = org.apache.thrift.TBaseHelper.copyBinary(b4);
    this.b5 = org.apache.thrift.TBaseHelper.copyBinary(b5);
    this.b6 = org.apache.thrift.TBaseHelper.copyBinary(b6);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Base64(Base64 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a = other.a;
    if (other.isSetB1()) {
      this.b1 = org.apache.thrift.TBaseHelper.copyBinary(other.b1);
    }
    if (other.isSetB2()) {
      this.b2 = org.apache.thrift.TBaseHelper.copyBinary(other.b2);
    }
    if (other.isSetB3()) {
      this.b3 = org.apache.thrift.TBaseHelper.copyBinary(other.b3);
    }
    if (other.isSetB4()) {
      this.b4 = org.apache.thrift.TBaseHelper.copyBinary(other.b4);
    }
    if (other.isSetB5()) {
      this.b5 = org.apache.thrift.TBaseHelper.copyBinary(other.b5);
    }
    if (other.isSetB6()) {
      this.b6 = org.apache.thrift.TBaseHelper.copyBinary(other.b6);
    }
  }

  public Base64 deepCopy() {
    return new Base64(this);
  }

  @Override
  public void clear() {
    setAIsSet(false);
    this.a = 0;
    this.b1 = null;
    this.b2 = null;
    this.b3 = null;
    this.b4 = null;
    this.b5 = null;
    this.b6 = null;
  }

  public int getA() {
    return this.a;
  }

  public Base64 setA(int a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_ISSET_ID);
  }

  /** Returns true if field a is set (has been assigned a value) and false otherwise */
  public boolean isSetA() {
    return EncodingUtils.testBit(__isset_bitfield, __A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_ISSET_ID, value);
  }

  public byte[] getB1() {
    setB1(org.apache.thrift.TBaseHelper.rightSize(b1));
    return b1 == null ? null : b1.array();
  }

  public ByteBuffer bufferForB1() {
    return org.apache.thrift.TBaseHelper.copyBinary(b1);
  }

  public Base64 setB1(byte[] b1) {
    this.b1 = b1 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b1, b1.length));
    return this;
  }

  public Base64 setB1(ByteBuffer b1) {
    this.b1 = org.apache.thrift.TBaseHelper.copyBinary(b1);
    return this;
  }

  public void unsetB1() {
    this.b1 = null;
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return this.b1 != null;
  }

  public void setB1IsSet(boolean value) {
    if (!value) {
      this.b1 = null;
    }
  }

  public byte[] getB2() {
    setB2(org.apache.thrift.TBaseHelper.rightSize(b2));
    return b2 == null ? null : b2.array();
  }

  public ByteBuffer bufferForB2() {
    return org.apache.thrift.TBaseHelper.copyBinary(b2);
  }

  public Base64 setB2(byte[] b2) {
    this.b2 = b2 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b2, b2.length));
    return this;
  }

  public Base64 setB2(ByteBuffer b2) {
    this.b2 = org.apache.thrift.TBaseHelper.copyBinary(b2);
    return this;
  }

  public void unsetB2() {
    this.b2 = null;
  }

  /** Returns true if field b2 is set (has been assigned a value) and false otherwise */
  public boolean isSetB2() {
    return this.b2 != null;
  }

  public void setB2IsSet(boolean value) {
    if (!value) {
      this.b2 = null;
    }
  }

  public byte[] getB3() {
    setB3(org.apache.thrift.TBaseHelper.rightSize(b3));
    return b3 == null ? null : b3.array();
  }

  public ByteBuffer bufferForB3() {
    return org.apache.thrift.TBaseHelper.copyBinary(b3);
  }

  public Base64 setB3(byte[] b3) {
    this.b3 = b3 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b3, b3.length));
    return this;
  }

  public Base64 setB3(ByteBuffer b3) {
    this.b3 = org.apache.thrift.TBaseHelper.copyBinary(b3);
    return this;
  }

  public void unsetB3() {
    this.b3 = null;
  }

  /** Returns true if field b3 is set (has been assigned a value) and false otherwise */
  public boolean isSetB3() {
    return this.b3 != null;
  }

  public void setB3IsSet(boolean value) {
    if (!value) {
      this.b3 = null;
    }
  }

  public byte[] getB4() {
    setB4(org.apache.thrift.TBaseHelper.rightSize(b4));
    return b4 == null ? null : b4.array();
  }

  public ByteBuffer bufferForB4() {
    return org.apache.thrift.TBaseHelper.copyBinary(b4);
  }

  public Base64 setB4(byte[] b4) {
    this.b4 = b4 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b4, b4.length));
    return this;
  }

  public Base64 setB4(ByteBuffer b4) {
    this.b4 = org.apache.thrift.TBaseHelper.copyBinary(b4);
    return this;
  }

  public void unsetB4() {
    this.b4 = null;
  }

  /** Returns true if field b4 is set (has been assigned a value) and false otherwise */
  public boolean isSetB4() {
    return this.b4 != null;
  }

  public void setB4IsSet(boolean value) {
    if (!value) {
      this.b4 = null;
    }
  }

  public byte[] getB5() {
    setB5(org.apache.thrift.TBaseHelper.rightSize(b5));
    return b5 == null ? null : b5.array();
  }

  public ByteBuffer bufferForB5() {
    return org.apache.thrift.TBaseHelper.copyBinary(b5);
  }

  public Base64 setB5(byte[] b5) {
    this.b5 = b5 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b5, b5.length));
    return this;
  }

  public Base64 setB5(ByteBuffer b5) {
    this.b5 = org.apache.thrift.TBaseHelper.copyBinary(b5);
    return this;
  }

  public void unsetB5() {
    this.b5 = null;
  }

  /** Returns true if field b5 is set (has been assigned a value) and false otherwise */
  public boolean isSetB5() {
    return this.b5 != null;
  }

  public void setB5IsSet(boolean value) {
    if (!value) {
      this.b5 = null;
    }
  }

  public byte[] getB6() {
    setB6(org.apache.thrift.TBaseHelper.rightSize(b6));
    return b6 == null ? null : b6.array();
  }

  public ByteBuffer bufferForB6() {
    return org.apache.thrift.TBaseHelper.copyBinary(b6);
  }

  public Base64 setB6(byte[] b6) {
    this.b6 = b6 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b6, b6.length));
    return this;
  }

  public Base64 setB6(ByteBuffer b6) {
    this.b6 = org.apache.thrift.TBaseHelper.copyBinary(b6);
    return this;
  }

  public void unsetB6() {
    this.b6 = null;
  }

  /** Returns true if field b6 is set (has been assigned a value) and false otherwise */
  public boolean isSetB6() {
    return this.b6 != null;
  }

  public void setB6IsSet(boolean value) {
    if (!value) {
      this.b6 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((Integer)value);
      }
      break;

    case B1:
      if (value == null) {
        unsetB1();
      } else {
        if (value instanceof byte[]) {
          setB1((byte[])value);
        } else {
          setB1((ByteBuffer)value);
        }
      }
      break;

    case B2:
      if (value == null) {
        unsetB2();
      } else {
        if (value instanceof byte[]) {
          setB2((byte[])value);
        } else {
          setB2((ByteBuffer)value);
        }
      }
      break;

    case B3:
      if (value == null) {
        unsetB3();
      } else {
        if (value instanceof byte[]) {
          setB3((byte[])value);
        } else {
          setB3((ByteBuffer)value);
        }
      }
      break;

    case B4:
      if (value == null) {
        unsetB4();
      } else {
        if (value instanceof byte[]) {
          setB4((byte[])value);
        } else {
          setB4((ByteBuffer)value);
        }
      }
      break;

    case B5:
      if (value == null) {
        unsetB5();
      } else {
        if (value instanceof byte[]) {
          setB5((byte[])value);
        } else {
          setB5((ByteBuffer)value);
        }
      }
      break;

    case B6:
      if (value == null) {
        unsetB6();
      } else {
        if (value instanceof byte[]) {
          setB6((byte[])value);
        } else {
          setB6((ByteBuffer)value);
        }
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A:
      return getA();

    case B1:
      return getB1();

    case B2:
      return getB2();

    case B3:
      return getB3();

    case B4:
      return getB4();

    case B5:
      return getB5();

    case B6:
      return getB6();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A:
      return isSetA();
    case B1:
      return isSetB1();
    case B2:
      return isSetB2();
    case B3:
      return isSetB3();
    case B4:
      return isSetB4();
    case B5:
      return isSetB5();
    case B6:
      return isSetB6();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Base64)
      return this.equals((Base64)that);
    return false;
  }

  public boolean equals(Base64 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (this.a != that.a)
        return false;
    }

    boolean this_present_b1 = true && this.isSetB1();
    boolean that_present_b1 = true && that.isSetB1();
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (!this.b1.equals(that.b1))
        return false;
    }

    boolean this_present_b2 = true && this.isSetB2();
    boolean that_present_b2 = true && that.isSetB2();
    if (this_present_b2 || that_present_b2) {
      if (!(this_present_b2 && that_present_b2))
        return false;
      if (!this.b2.equals(that.b2))
        return false;
    }

    boolean this_present_b3 = true && this.isSetB3();
    boolean that_present_b3 = true && that.isSetB3();
    if (this_present_b3 || that_present_b3) {
      if (!(this_present_b3 && that_present_b3))
        return false;
      if (!this.b3.equals(that.b3))
        return false;
    }

    boolean this_present_b4 = true && this.isSetB4();
    boolean that_present_b4 = true && that.isSetB4();
    if (this_present_b4 || that_present_b4) {
      if (!(this_present_b4 && that_present_b4))
        return false;
      if (!this.b4.equals(that.b4))
        return false;
    }

    boolean this_present_b5 = true && this.isSetB5();
    boolean that_present_b5 = true && that.isSetB5();
    if (this_present_b5 || that_present_b5) {
      if (!(this_present_b5 && that_present_b5))
        return false;
      if (!this.b5.equals(that.b5))
        return false;
    }

    boolean this_present_b6 = true && this.isSetB6();
    boolean that_present_b6 = true && that.isSetB6();
    if (this_present_b6 || that_present_b6) {
      if (!(this_present_b6 && that_present_b6))
        return false;
      if (!this.b6.equals(that.b6))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + a;

    hashCode = hashCode * 8191 + ((isSetB1()) ? 131071 : 524287);
    if (isSetB1())
      hashCode = hashCode * 8191 + b1.hashCode();

    hashCode = hashCode * 8191 + ((isSetB2()) ? 131071 : 524287);
    if (isSetB2())
      hashCode = hashCode * 8191 + b2.hashCode();

    hashCode = hashCode * 8191 + ((isSetB3()) ? 131071 : 524287);
    if (isSetB3())
      hashCode = hashCode * 8191 + b3.hashCode();

    hashCode = hashCode * 8191 + ((isSetB4()) ? 131071 : 524287);
    if (isSetB4())
      hashCode = hashCode * 8191 + b4.hashCode();

    hashCode = hashCode * 8191 + ((isSetB5()) ? 131071 : 524287);
    if (isSetB5())
      hashCode = hashCode * 8191 + b5.hashCode();

    hashCode = hashCode * 8191 + ((isSetB6()) ? 131071 : 524287);
    if (isSetB6())
      hashCode = hashCode * 8191 + b6.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Base64 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2()).compareTo(other.isSetB2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b2, other.b2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB3()).compareTo(other.isSetB3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b3, other.b3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB4()).compareTo(other.isSetB4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b4, other.b4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB5()).compareTo(other.isSetB5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b5, other.b5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB6()).compareTo(other.isSetB6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b6, other.b6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Base64(");
    boolean first = true;

    sb.append("a:");
    sb.append(this.a);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b1:");
    if (this.b1 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.b1, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b2:");
    if (this.b2 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.b2, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b3:");
    if (this.b3 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.b3, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b4:");
    if (this.b4 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.b4, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b5:");
    if (this.b5 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.b5, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b6:");
    if (this.b6 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.b6, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Base64StandardSchemeFactory implements SchemeFactory {
    public Base64StandardScheme getScheme() {
      return new Base64StandardScheme();
    }
  }

  private static class Base64StandardScheme extends StandardScheme<Base64> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Base64 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.a = iprot.readI32();
              struct.setAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b1 = iprot.readBinary();
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b2 = iprot.readBinary();
              struct.setB2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b3 = iprot.readBinary();
              struct.setB3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // B4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b4 = iprot.readBinary();
              struct.setB4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // B5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b5 = iprot.readBinary();
              struct.setB5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // B6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b6 = iprot.readBinary();
              struct.setB6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Base64 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(A_FIELD_DESC);
      oprot.writeI32(struct.a);
      oprot.writeFieldEnd();
      if (struct.b1 != null) {
        oprot.writeFieldBegin(B1_FIELD_DESC);
        oprot.writeBinary(struct.b1);
        oprot.writeFieldEnd();
      }
      if (struct.b2 != null) {
        oprot.writeFieldBegin(B2_FIELD_DESC);
        oprot.writeBinary(struct.b2);
        oprot.writeFieldEnd();
      }
      if (struct.b3 != null) {
        oprot.writeFieldBegin(B3_FIELD_DESC);
        oprot.writeBinary(struct.b3);
        oprot.writeFieldEnd();
      }
      if (struct.b4 != null) {
        oprot.writeFieldBegin(B4_FIELD_DESC);
        oprot.writeBinary(struct.b4);
        oprot.writeFieldEnd();
      }
      if (struct.b5 != null) {
        oprot.writeFieldBegin(B5_FIELD_DESC);
        oprot.writeBinary(struct.b5);
        oprot.writeFieldEnd();
      }
      if (struct.b6 != null) {
        oprot.writeFieldBegin(B6_FIELD_DESC);
        oprot.writeBinary(struct.b6);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Base64TupleSchemeFactory implements SchemeFactory {
    public Base64TupleScheme getScheme() {
      return new Base64TupleScheme();
    }
  }

  private static class Base64TupleScheme extends TupleScheme<Base64> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Base64 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetA()) {
        optionals.set(0);
      }
      if (struct.isSetB1()) {
        optionals.set(1);
      }
      if (struct.isSetB2()) {
        optionals.set(2);
      }
      if (struct.isSetB3()) {
        optionals.set(3);
      }
      if (struct.isSetB4()) {
        optionals.set(4);
      }
      if (struct.isSetB5()) {
        optionals.set(5);
      }
      if (struct.isSetB6()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetA()) {
        oprot.writeI32(struct.a);
      }
      if (struct.isSetB1()) {
        oprot.writeBinary(struct.b1);
      }
      if (struct.isSetB2()) {
        oprot.writeBinary(struct.b2);
      }
      if (struct.isSetB3()) {
        oprot.writeBinary(struct.b3);
      }
      if (struct.isSetB4()) {
        oprot.writeBinary(struct.b4);
      }
      if (struct.isSetB5()) {
        oprot.writeBinary(struct.b5);
      }
      if (struct.isSetB6()) {
        oprot.writeBinary(struct.b6);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Base64 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.a = iprot.readI32();
        struct.setAIsSet(true);
      }
      if (incoming.get(1)) {
        struct.b1 = iprot.readBinary();
        struct.setB1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.b2 = iprot.readBinary();
        struct.setB2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.b3 = iprot.readBinary();
        struct.setB3IsSet(true);
      }
      if (incoming.get(4)) {
        struct.b4 = iprot.readBinary();
        struct.setB4IsSet(true);
      }
      if (incoming.get(5)) {
        struct.b5 = iprot.readBinary();
        struct.setB5IsSet(true);
      }
      if (incoming.get(6)) {
        struct.b6 = iprot.readBinary();
        struct.setB6IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

