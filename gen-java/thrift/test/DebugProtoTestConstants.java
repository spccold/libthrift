/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class DebugProtoTestConstants {

  public static final CompactProtoTestStruct COMPACT_TEST = new CompactProtoTestStruct();
  static {
    COMPACT_TEST.setA_byte((byte)127);
    COMPACT_TEST.setA_i16((short)32000);
    COMPACT_TEST.setA_i32(1000000000);
    COMPACT_TEST.setA_i64(1099511627775L);
    COMPACT_TEST.setA_double(5.6789);
    COMPACT_TEST.setA_string("my string");
    COMPACT_TEST.setTrue_field(true);
    COMPACT_TEST.setFalse_field(false);
    Empty tmp724 = new Empty();

    COMPACT_TEST.setEmpty_struct_field(tmp724);
    List<Byte> tmp725 = new ArrayList<Byte>();
    tmp725.add((byte)-127);
    tmp725.add((byte)-1);
    tmp725.add((byte)0);
    tmp725.add((byte)1);
    tmp725.add((byte)127);

    COMPACT_TEST.setByte_list(tmp725);
    List<Short> tmp726 = new ArrayList<Short>();
    tmp726.add((short)-1);
    tmp726.add((short)0);
    tmp726.add((short)1);
    tmp726.add((short)32767);

    COMPACT_TEST.setI16_list(tmp726);
    List<Integer> tmp727 = new ArrayList<Integer>();
    tmp727.add(-1);
    tmp727.add(0);
    tmp727.add(255);
    tmp727.add(65535);
    tmp727.add(16777215);
    tmp727.add(2147483647);

    COMPACT_TEST.setI32_list(tmp727);
    List<Long> tmp728 = new ArrayList<Long>();
    tmp728.add(-1L);
    tmp728.add(0L);
    tmp728.add(255L);
    tmp728.add(65535L);
    tmp728.add(16777215L);
    tmp728.add(4294967295L);
    tmp728.add(1099511627775L);
    tmp728.add(281474976710655L);
    tmp728.add(72057594037927935L);
    tmp728.add(9223372036854775807L);

    COMPACT_TEST.setI64_list(tmp728);
    List<Double> tmp729 = new ArrayList<Double>();
    tmp729.add(0.1);
    tmp729.add(0.2);
    tmp729.add(0.3);

    COMPACT_TEST.setDouble_list(tmp729);
    List<String> tmp730 = new ArrayList<String>();
    tmp730.add("first");
    tmp730.add("second");
    tmp730.add("third");

    COMPACT_TEST.setString_list(tmp730);
    List<Boolean> tmp731 = new ArrayList<Boolean>();
    tmp731.add(true);
    tmp731.add(true);
    tmp731.add(true);
    tmp731.add(false);
    tmp731.add(false);
    tmp731.add(false);

    COMPACT_TEST.setBoolean_list(tmp731);
    List<Empty> tmp732 = new ArrayList<Empty>();
    Empty tmp733 = new Empty();

    tmp732.add(tmp733);
    Empty tmp734 = new Empty();

    tmp732.add(tmp734);

    COMPACT_TEST.setStruct_list(tmp732);
    Set<Byte> tmp735 = new HashSet<Byte>();
    tmp735.add((byte)-127);
    tmp735.add((byte)-1);
    tmp735.add((byte)0);
    tmp735.add((byte)1);
    tmp735.add((byte)127);

    COMPACT_TEST.setByte_set(tmp735);
    Set<Short> tmp736 = new HashSet<Short>();
    tmp736.add((short)-1);
    tmp736.add((short)0);
    tmp736.add((short)1);
    tmp736.add((short)32767);

    COMPACT_TEST.setI16_set(tmp736);
    Set<Integer> tmp737 = new HashSet<Integer>();
    tmp737.add(1);
    tmp737.add(2);
    tmp737.add(3);

    COMPACT_TEST.setI32_set(tmp737);
    Set<Long> tmp738 = new HashSet<Long>();
    tmp738.add(-1L);
    tmp738.add(0L);
    tmp738.add(255L);
    tmp738.add(65535L);
    tmp738.add(16777215L);
    tmp738.add(4294967295L);
    tmp738.add(1099511627775L);
    tmp738.add(281474976710655L);
    tmp738.add(72057594037927935L);
    tmp738.add(9223372036854775807L);

    COMPACT_TEST.setI64_set(tmp738);
    Set<Double> tmp739 = new HashSet<Double>();
    tmp739.add(0.1);
    tmp739.add(0.2);
    tmp739.add(0.3);

    COMPACT_TEST.setDouble_set(tmp739);
    Set<String> tmp740 = new HashSet<String>();
    tmp740.add("first");
    tmp740.add("second");
    tmp740.add("third");

    COMPACT_TEST.setString_set(tmp740);
    Set<Boolean> tmp741 = new HashSet<Boolean>();
    tmp741.add(true);
    tmp741.add(false);

    COMPACT_TEST.setBoolean_set(tmp741);
    Set<Empty> tmp742 = new HashSet<Empty>();
    Empty tmp743 = new Empty();

    tmp742.add(tmp743);

    COMPACT_TEST.setStruct_set(tmp742);
    Map<Byte,Byte> tmp744 = new HashMap<Byte,Byte>();
    tmp744.put((byte)1, (byte)2);

    COMPACT_TEST.setByte_byte_map(tmp744);
    Map<Short,Byte> tmp745 = new HashMap<Short,Byte>();
    tmp745.put((short)1, (byte)1);
    tmp745.put((short)-1, (byte)1);
    tmp745.put((short)32767, (byte)1);

    COMPACT_TEST.setI16_byte_map(tmp745);
    Map<Integer,Byte> tmp746 = new HashMap<Integer,Byte>();
    tmp746.put(1, (byte)1);
    tmp746.put(-1, (byte)1);
    tmp746.put(2147483647, (byte)1);

    COMPACT_TEST.setI32_byte_map(tmp746);
    Map<Long,Byte> tmp747 = new HashMap<Long,Byte>();
    tmp747.put(0L, (byte)1);
    tmp747.put(1L, (byte)1);
    tmp747.put(-1L, (byte)1);
    tmp747.put(9223372036854775807L, (byte)1);

    COMPACT_TEST.setI64_byte_map(tmp747);
    Map<Double,Byte> tmp748 = new HashMap<Double,Byte>();
    tmp748.put(-1.1, (byte)1);
    tmp748.put(1.1, (byte)1);

    COMPACT_TEST.setDouble_byte_map(tmp748);
    Map<String,Byte> tmp749 = new HashMap<String,Byte>();
    tmp749.put("first", (byte)1);
    tmp749.put("second", (byte)2);
    tmp749.put("third", (byte)3);
    tmp749.put("", (byte)0);

    COMPACT_TEST.setString_byte_map(tmp749);
    Map<Boolean,Byte> tmp750 = new HashMap<Boolean,Byte>();
    tmp750.put(true, (byte)1);
    tmp750.put(false, (byte)0);

    COMPACT_TEST.setBoolean_byte_map(tmp750);
    Map<Byte,Short> tmp751 = new HashMap<Byte,Short>();
    tmp751.put((byte)1, (short)1);
    tmp751.put((byte)2, (short)-1);
    tmp751.put((byte)3, (short)32767);

    COMPACT_TEST.setByte_i16_map(tmp751);
    Map<Byte,Integer> tmp752 = new HashMap<Byte,Integer>();
    tmp752.put((byte)1, 1);
    tmp752.put((byte)2, -1);
    tmp752.put((byte)3, 2147483647);

    COMPACT_TEST.setByte_i32_map(tmp752);
    Map<Byte,Long> tmp753 = new HashMap<Byte,Long>();
    tmp753.put((byte)1, 1L);
    tmp753.put((byte)2, -1L);
    tmp753.put((byte)3, 9223372036854775807L);

    COMPACT_TEST.setByte_i64_map(tmp753);
    Map<Byte,Double> tmp754 = new HashMap<Byte,Double>();
    tmp754.put((byte)1, 0.1);
    tmp754.put((byte)2, -0.1);
    tmp754.put((byte)3, 1e+06);

    COMPACT_TEST.setByte_double_map(tmp754);
    Map<Byte,String> tmp755 = new HashMap<Byte,String>();
    tmp755.put((byte)1, "");
    tmp755.put((byte)2, "blah");
    tmp755.put((byte)3, "loooooooooooooong string");

    COMPACT_TEST.setByte_string_map(tmp755);
    Map<Byte,Boolean> tmp756 = new HashMap<Byte,Boolean>();
    tmp756.put((byte)1, true);
    tmp756.put((byte)2, false);

    COMPACT_TEST.setByte_boolean_map(tmp756);
    Map<List<Byte>,Byte> tmp757 = new HashMap<List<Byte>,Byte>();
    List<Byte> tmp758 = new ArrayList<Byte>();
    tmp758.add((byte)1);
    tmp758.add((byte)2);
    tmp758.add((byte)3);

    tmp757.put(tmp758, (byte)1);
    List<Byte> tmp759 = new ArrayList<Byte>();
    tmp759.add((byte)0);
    tmp759.add((byte)1);

    tmp757.put(tmp759, (byte)2);
    List<Byte> tmp760 = new ArrayList<Byte>();

    tmp757.put(tmp760, (byte)0);

    COMPACT_TEST.setList_byte_map(tmp757);
    Map<Set<Byte>,Byte> tmp761 = new HashMap<Set<Byte>,Byte>();
    Set<Byte> tmp762 = new HashSet<Byte>();
    tmp762.add((byte)1);
    tmp762.add((byte)2);
    tmp762.add((byte)3);

    tmp761.put(tmp762, (byte)1);
    Set<Byte> tmp763 = new HashSet<Byte>();
    tmp763.add((byte)0);
    tmp763.add((byte)1);

    tmp761.put(tmp763, (byte)2);
    Set<Byte> tmp764 = new HashSet<Byte>();

    tmp761.put(tmp764, (byte)0);

    COMPACT_TEST.setSet_byte_map(tmp761);
    Map<Map<Byte,Byte>,Byte> tmp765 = new HashMap<Map<Byte,Byte>,Byte>();
    Map<Byte,Byte> tmp766 = new HashMap<Byte,Byte>();
    tmp766.put((byte)1, (byte)1);

    tmp765.put(tmp766, (byte)1);
    Map<Byte,Byte> tmp767 = new HashMap<Byte,Byte>();
    tmp767.put((byte)2, (byte)2);

    tmp765.put(tmp767, (byte)2);
    Map<Byte,Byte> tmp768 = new HashMap<Byte,Byte>();

    tmp765.put(tmp768, (byte)0);

    COMPACT_TEST.setMap_byte_map(tmp765);
    Map<Byte,Map<Byte,Byte>> tmp769 = new HashMap<Byte,Map<Byte,Byte>>();
    Map<Byte,Byte> tmp770 = new HashMap<Byte,Byte>();

    tmp769.put((byte)0, tmp770);
    Map<Byte,Byte> tmp771 = new HashMap<Byte,Byte>();
    tmp771.put((byte)1, (byte)1);

    tmp769.put((byte)1, tmp771);
    Map<Byte,Byte> tmp772 = new HashMap<Byte,Byte>();
    tmp772.put((byte)1, (byte)1);
    tmp772.put((byte)2, (byte)2);

    tmp769.put((byte)2, tmp772);

    COMPACT_TEST.setByte_map_map(tmp769);
    Map<Byte,Set<Byte>> tmp773 = new HashMap<Byte,Set<Byte>>();
    Set<Byte> tmp774 = new HashSet<Byte>();

    tmp773.put((byte)0, tmp774);
    Set<Byte> tmp775 = new HashSet<Byte>();
    tmp775.add((byte)1);

    tmp773.put((byte)1, tmp775);
    Set<Byte> tmp776 = new HashSet<Byte>();
    tmp776.add((byte)1);
    tmp776.add((byte)2);

    tmp773.put((byte)2, tmp776);

    COMPACT_TEST.setByte_set_map(tmp773);
    Map<Byte,List<Byte>> tmp777 = new HashMap<Byte,List<Byte>>();
    List<Byte> tmp778 = new ArrayList<Byte>();

    tmp777.put((byte)0, tmp778);
    List<Byte> tmp779 = new ArrayList<Byte>();
    tmp779.add((byte)1);

    tmp777.put((byte)1, tmp779);
    List<Byte> tmp780 = new ArrayList<Byte>();
    tmp780.add((byte)1);
    tmp780.add((byte)2);

    tmp777.put((byte)2, tmp780);

    COMPACT_TEST.setByte_list_map(tmp777);
  }

  public static final int MYCONST = 2;

  /**
   * This is a docstring on a constant!
   */
  public static final SomeEnum MY_SOME_ENUM = thrift.test.SomeEnum.ONE;

  public static final SomeEnum MY_SOME_ENUM_1 = thrift.test.SomeEnum.ONE;

  public static final Map<SomeEnum,SomeEnum> MY_ENUM_MAP = new HashMap<SomeEnum,SomeEnum>();
  static {
    MY_ENUM_MAP.put(thrift.test.SomeEnum.ONE, thrift.test.SomeEnum.TWO);
  }

  public static final Map<SomeEnum,StructWithSomeEnum> EXTRA_CRAZY_MAP = new HashMap<SomeEnum,StructWithSomeEnum>();
  static {
    StructWithSomeEnum tmp781 = new StructWithSomeEnum();
    tmp781.setBlah(thrift.test.SomeEnum.TWO);

    EXTRA_CRAZY_MAP.put(thrift.test.SomeEnum.ONE, tmp781);
  }

}
