/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Opt64 implements org.apache.thrift.TBase<Opt64, Opt64._Fields>, java.io.Serializable, Cloneable, Comparable<Opt64> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Opt64");

  private static final org.apache.thrift.protocol.TField DEF1_FIELD_DESC = new org.apache.thrift.protocol.TField("def1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEF2_FIELD_DESC = new org.apache.thrift.protocol.TField("def2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DEF3_FIELD_DESC = new org.apache.thrift.protocol.TField("def3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEF4_FIELD_DESC = new org.apache.thrift.protocol.TField("def4", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEF5_FIELD_DESC = new org.apache.thrift.protocol.TField("def5", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEF6_FIELD_DESC = new org.apache.thrift.protocol.TField("def6", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEF7_FIELD_DESC = new org.apache.thrift.protocol.TField("def7", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEF8_FIELD_DESC = new org.apache.thrift.protocol.TField("def8", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DEF9_FIELD_DESC = new org.apache.thrift.protocol.TField("def9", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DEF10_FIELD_DESC = new org.apache.thrift.protocol.TField("def10", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DEF11_FIELD_DESC = new org.apache.thrift.protocol.TField("def11", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DEF12_FIELD_DESC = new org.apache.thrift.protocol.TField("def12", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DEF13_FIELD_DESC = new org.apache.thrift.protocol.TField("def13", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DEF14_FIELD_DESC = new org.apache.thrift.protocol.TField("def14", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEF15_FIELD_DESC = new org.apache.thrift.protocol.TField("def15", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField DEF16_FIELD_DESC = new org.apache.thrift.protocol.TField("def16", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DEF17_FIELD_DESC = new org.apache.thrift.protocol.TField("def17", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField DEF18_FIELD_DESC = new org.apache.thrift.protocol.TField("def18", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField DEF19_FIELD_DESC = new org.apache.thrift.protocol.TField("def19", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField DEF20_FIELD_DESC = new org.apache.thrift.protocol.TField("def20", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField DEF21_FIELD_DESC = new org.apache.thrift.protocol.TField("def21", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField DEF22_FIELD_DESC = new org.apache.thrift.protocol.TField("def22", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField DEF23_FIELD_DESC = new org.apache.thrift.protocol.TField("def23", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField DEF24_FIELD_DESC = new org.apache.thrift.protocol.TField("def24", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField DEF25_FIELD_DESC = new org.apache.thrift.protocol.TField("def25", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField DEF26_FIELD_DESC = new org.apache.thrift.protocol.TField("def26", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField DEF27_FIELD_DESC = new org.apache.thrift.protocol.TField("def27", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField DEF28_FIELD_DESC = new org.apache.thrift.protocol.TField("def28", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField DEF29_FIELD_DESC = new org.apache.thrift.protocol.TField("def29", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField DEF30_FIELD_DESC = new org.apache.thrift.protocol.TField("def30", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField DEF31_FIELD_DESC = new org.apache.thrift.protocol.TField("def31", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField DEF32_FIELD_DESC = new org.apache.thrift.protocol.TField("def32", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField DEF33_FIELD_DESC = new org.apache.thrift.protocol.TField("def33", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField DEF34_FIELD_DESC = new org.apache.thrift.protocol.TField("def34", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField DEF35_FIELD_DESC = new org.apache.thrift.protocol.TField("def35", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField DEF36_FIELD_DESC = new org.apache.thrift.protocol.TField("def36", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField DEF37_FIELD_DESC = new org.apache.thrift.protocol.TField("def37", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField DEF38_FIELD_DESC = new org.apache.thrift.protocol.TField("def38", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField DEF39_FIELD_DESC = new org.apache.thrift.protocol.TField("def39", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField DEF40_FIELD_DESC = new org.apache.thrift.protocol.TField("def40", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField DEF41_FIELD_DESC = new org.apache.thrift.protocol.TField("def41", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField DEF42_FIELD_DESC = new org.apache.thrift.protocol.TField("def42", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField DEF43_FIELD_DESC = new org.apache.thrift.protocol.TField("def43", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField DEF44_FIELD_DESC = new org.apache.thrift.protocol.TField("def44", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField DEF45_FIELD_DESC = new org.apache.thrift.protocol.TField("def45", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField DEF46_FIELD_DESC = new org.apache.thrift.protocol.TField("def46", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField DEF47_FIELD_DESC = new org.apache.thrift.protocol.TField("def47", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField DEF48_FIELD_DESC = new org.apache.thrift.protocol.TField("def48", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField DEF49_FIELD_DESC = new org.apache.thrift.protocol.TField("def49", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField DEF50_FIELD_DESC = new org.apache.thrift.protocol.TField("def50", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField DEF51_FIELD_DESC = new org.apache.thrift.protocol.TField("def51", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField DEF52_FIELD_DESC = new org.apache.thrift.protocol.TField("def52", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField DEF53_FIELD_DESC = new org.apache.thrift.protocol.TField("def53", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField DEF54_FIELD_DESC = new org.apache.thrift.protocol.TField("def54", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField DEF55_FIELD_DESC = new org.apache.thrift.protocol.TField("def55", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField DEF56_FIELD_DESC = new org.apache.thrift.protocol.TField("def56", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField DEF57_FIELD_DESC = new org.apache.thrift.protocol.TField("def57", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField DEF58_FIELD_DESC = new org.apache.thrift.protocol.TField("def58", org.apache.thrift.protocol.TType.I32, (short)58);
  private static final org.apache.thrift.protocol.TField DEF59_FIELD_DESC = new org.apache.thrift.protocol.TField("def59", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField DEF60_FIELD_DESC = new org.apache.thrift.protocol.TField("def60", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField DEF61_FIELD_DESC = new org.apache.thrift.protocol.TField("def61", org.apache.thrift.protocol.TType.I32, (short)61);
  private static final org.apache.thrift.protocol.TField DEF62_FIELD_DESC = new org.apache.thrift.protocol.TField("def62", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField DEF63_FIELD_DESC = new org.apache.thrift.protocol.TField("def63", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField DEF64_FIELD_DESC = new org.apache.thrift.protocol.TField("def64", org.apache.thrift.protocol.TType.I32, (short)64);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new Opt64StandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new Opt64TupleSchemeFactory();

  public int def1; // required
  public int def2; // required
  public int def3; // required
  public int def4; // required
  public int def5; // required
  public int def6; // required
  public int def7; // required
  public int def8; // required
  public int def9; // required
  public int def10; // required
  public int def11; // required
  public int def12; // required
  public int def13; // required
  public int def14; // required
  public int def15; // required
  public int def16; // required
  public int def17; // required
  public int def18; // required
  public int def19; // required
  public int def20; // required
  public int def21; // required
  public int def22; // required
  public int def23; // required
  public int def24; // required
  public int def25; // required
  public int def26; // required
  public int def27; // required
  public int def28; // required
  public int def29; // required
  public int def30; // required
  public int def31; // required
  public int def32; // required
  public int def33; // required
  public int def34; // required
  public int def35; // required
  public int def36; // required
  public int def37; // required
  public int def38; // required
  public int def39; // required
  public int def40; // required
  public int def41; // required
  public int def42; // required
  public int def43; // required
  public int def44; // required
  public int def45; // required
  public int def46; // required
  public int def47; // required
  public int def48; // required
  public int def49; // required
  public int def50; // required
  public int def51; // required
  public int def52; // required
  public int def53; // required
  public int def54; // required
  public int def55; // required
  public int def56; // required
  public int def57; // required
  public int def58; // required
  public int def59; // required
  public int def60; // required
  public int def61; // required
  public int def62; // required
  public int def63; // required
  public int def64; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEF1((short)1, "def1"),
    DEF2((short)2, "def2"),
    DEF3((short)3, "def3"),
    DEF4((short)4, "def4"),
    DEF5((short)5, "def5"),
    DEF6((short)6, "def6"),
    DEF7((short)7, "def7"),
    DEF8((short)8, "def8"),
    DEF9((short)9, "def9"),
    DEF10((short)10, "def10"),
    DEF11((short)11, "def11"),
    DEF12((short)12, "def12"),
    DEF13((short)13, "def13"),
    DEF14((short)14, "def14"),
    DEF15((short)15, "def15"),
    DEF16((short)16, "def16"),
    DEF17((short)17, "def17"),
    DEF18((short)18, "def18"),
    DEF19((short)19, "def19"),
    DEF20((short)20, "def20"),
    DEF21((short)21, "def21"),
    DEF22((short)22, "def22"),
    DEF23((short)23, "def23"),
    DEF24((short)24, "def24"),
    DEF25((short)25, "def25"),
    DEF26((short)26, "def26"),
    DEF27((short)27, "def27"),
    DEF28((short)28, "def28"),
    DEF29((short)29, "def29"),
    DEF30((short)30, "def30"),
    DEF31((short)31, "def31"),
    DEF32((short)32, "def32"),
    DEF33((short)33, "def33"),
    DEF34((short)34, "def34"),
    DEF35((short)35, "def35"),
    DEF36((short)36, "def36"),
    DEF37((short)37, "def37"),
    DEF38((short)38, "def38"),
    DEF39((short)39, "def39"),
    DEF40((short)40, "def40"),
    DEF41((short)41, "def41"),
    DEF42((short)42, "def42"),
    DEF43((short)43, "def43"),
    DEF44((short)44, "def44"),
    DEF45((short)45, "def45"),
    DEF46((short)46, "def46"),
    DEF47((short)47, "def47"),
    DEF48((short)48, "def48"),
    DEF49((short)49, "def49"),
    DEF50((short)50, "def50"),
    DEF51((short)51, "def51"),
    DEF52((short)52, "def52"),
    DEF53((short)53, "def53"),
    DEF54((short)54, "def54"),
    DEF55((short)55, "def55"),
    DEF56((short)56, "def56"),
    DEF57((short)57, "def57"),
    DEF58((short)58, "def58"),
    DEF59((short)59, "def59"),
    DEF60((short)60, "def60"),
    DEF61((short)61, "def61"),
    DEF62((short)62, "def62"),
    DEF63((short)63, "def63"),
    DEF64((short)64, "def64");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEF1
          return DEF1;
        case 2: // DEF2
          return DEF2;
        case 3: // DEF3
          return DEF3;
        case 4: // DEF4
          return DEF4;
        case 5: // DEF5
          return DEF5;
        case 6: // DEF6
          return DEF6;
        case 7: // DEF7
          return DEF7;
        case 8: // DEF8
          return DEF8;
        case 9: // DEF9
          return DEF9;
        case 10: // DEF10
          return DEF10;
        case 11: // DEF11
          return DEF11;
        case 12: // DEF12
          return DEF12;
        case 13: // DEF13
          return DEF13;
        case 14: // DEF14
          return DEF14;
        case 15: // DEF15
          return DEF15;
        case 16: // DEF16
          return DEF16;
        case 17: // DEF17
          return DEF17;
        case 18: // DEF18
          return DEF18;
        case 19: // DEF19
          return DEF19;
        case 20: // DEF20
          return DEF20;
        case 21: // DEF21
          return DEF21;
        case 22: // DEF22
          return DEF22;
        case 23: // DEF23
          return DEF23;
        case 24: // DEF24
          return DEF24;
        case 25: // DEF25
          return DEF25;
        case 26: // DEF26
          return DEF26;
        case 27: // DEF27
          return DEF27;
        case 28: // DEF28
          return DEF28;
        case 29: // DEF29
          return DEF29;
        case 30: // DEF30
          return DEF30;
        case 31: // DEF31
          return DEF31;
        case 32: // DEF32
          return DEF32;
        case 33: // DEF33
          return DEF33;
        case 34: // DEF34
          return DEF34;
        case 35: // DEF35
          return DEF35;
        case 36: // DEF36
          return DEF36;
        case 37: // DEF37
          return DEF37;
        case 38: // DEF38
          return DEF38;
        case 39: // DEF39
          return DEF39;
        case 40: // DEF40
          return DEF40;
        case 41: // DEF41
          return DEF41;
        case 42: // DEF42
          return DEF42;
        case 43: // DEF43
          return DEF43;
        case 44: // DEF44
          return DEF44;
        case 45: // DEF45
          return DEF45;
        case 46: // DEF46
          return DEF46;
        case 47: // DEF47
          return DEF47;
        case 48: // DEF48
          return DEF48;
        case 49: // DEF49
          return DEF49;
        case 50: // DEF50
          return DEF50;
        case 51: // DEF51
          return DEF51;
        case 52: // DEF52
          return DEF52;
        case 53: // DEF53
          return DEF53;
        case 54: // DEF54
          return DEF54;
        case 55: // DEF55
          return DEF55;
        case 56: // DEF56
          return DEF56;
        case 57: // DEF57
          return DEF57;
        case 58: // DEF58
          return DEF58;
        case 59: // DEF59
          return DEF59;
        case 60: // DEF60
          return DEF60;
        case 61: // DEF61
          return DEF61;
        case 62: // DEF62
          return DEF62;
        case 63: // DEF63
          return DEF63;
        case 64: // DEF64
          return DEF64;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEF1_ISSET_ID = 0;
  private static final int __DEF2_ISSET_ID = 1;
  private static final int __DEF3_ISSET_ID = 2;
  private static final int __DEF4_ISSET_ID = 3;
  private static final int __DEF5_ISSET_ID = 4;
  private static final int __DEF6_ISSET_ID = 5;
  private static final int __DEF7_ISSET_ID = 6;
  private static final int __DEF8_ISSET_ID = 7;
  private static final int __DEF9_ISSET_ID = 8;
  private static final int __DEF10_ISSET_ID = 9;
  private static final int __DEF11_ISSET_ID = 10;
  private static final int __DEF12_ISSET_ID = 11;
  private static final int __DEF13_ISSET_ID = 12;
  private static final int __DEF14_ISSET_ID = 13;
  private static final int __DEF15_ISSET_ID = 14;
  private static final int __DEF16_ISSET_ID = 15;
  private static final int __DEF17_ISSET_ID = 16;
  private static final int __DEF18_ISSET_ID = 17;
  private static final int __DEF19_ISSET_ID = 18;
  private static final int __DEF20_ISSET_ID = 19;
  private static final int __DEF21_ISSET_ID = 20;
  private static final int __DEF22_ISSET_ID = 21;
  private static final int __DEF23_ISSET_ID = 22;
  private static final int __DEF24_ISSET_ID = 23;
  private static final int __DEF25_ISSET_ID = 24;
  private static final int __DEF26_ISSET_ID = 25;
  private static final int __DEF27_ISSET_ID = 26;
  private static final int __DEF28_ISSET_ID = 27;
  private static final int __DEF29_ISSET_ID = 28;
  private static final int __DEF30_ISSET_ID = 29;
  private static final int __DEF31_ISSET_ID = 30;
  private static final int __DEF32_ISSET_ID = 31;
  private static final int __DEF33_ISSET_ID = 32;
  private static final int __DEF34_ISSET_ID = 33;
  private static final int __DEF35_ISSET_ID = 34;
  private static final int __DEF36_ISSET_ID = 35;
  private static final int __DEF37_ISSET_ID = 36;
  private static final int __DEF38_ISSET_ID = 37;
  private static final int __DEF39_ISSET_ID = 38;
  private static final int __DEF40_ISSET_ID = 39;
  private static final int __DEF41_ISSET_ID = 40;
  private static final int __DEF42_ISSET_ID = 41;
  private static final int __DEF43_ISSET_ID = 42;
  private static final int __DEF44_ISSET_ID = 43;
  private static final int __DEF45_ISSET_ID = 44;
  private static final int __DEF46_ISSET_ID = 45;
  private static final int __DEF47_ISSET_ID = 46;
  private static final int __DEF48_ISSET_ID = 47;
  private static final int __DEF49_ISSET_ID = 48;
  private static final int __DEF50_ISSET_ID = 49;
  private static final int __DEF51_ISSET_ID = 50;
  private static final int __DEF52_ISSET_ID = 51;
  private static final int __DEF53_ISSET_ID = 52;
  private static final int __DEF54_ISSET_ID = 53;
  private static final int __DEF55_ISSET_ID = 54;
  private static final int __DEF56_ISSET_ID = 55;
  private static final int __DEF57_ISSET_ID = 56;
  private static final int __DEF58_ISSET_ID = 57;
  private static final int __DEF59_ISSET_ID = 58;
  private static final int __DEF60_ISSET_ID = 59;
  private static final int __DEF61_ISSET_ID = 60;
  private static final int __DEF62_ISSET_ID = 61;
  private static final int __DEF63_ISSET_ID = 62;
  private static final int __DEF64_ISSET_ID = 63;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEF1, new org.apache.thrift.meta_data.FieldMetaData("def1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF2, new org.apache.thrift.meta_data.FieldMetaData("def2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF3, new org.apache.thrift.meta_data.FieldMetaData("def3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF4, new org.apache.thrift.meta_data.FieldMetaData("def4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF5, new org.apache.thrift.meta_data.FieldMetaData("def5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF6, new org.apache.thrift.meta_data.FieldMetaData("def6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF7, new org.apache.thrift.meta_data.FieldMetaData("def7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF8, new org.apache.thrift.meta_data.FieldMetaData("def8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF9, new org.apache.thrift.meta_data.FieldMetaData("def9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF10, new org.apache.thrift.meta_data.FieldMetaData("def10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF11, new org.apache.thrift.meta_data.FieldMetaData("def11", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF12, new org.apache.thrift.meta_data.FieldMetaData("def12", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF13, new org.apache.thrift.meta_data.FieldMetaData("def13", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF14, new org.apache.thrift.meta_data.FieldMetaData("def14", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF15, new org.apache.thrift.meta_data.FieldMetaData("def15", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF16, new org.apache.thrift.meta_data.FieldMetaData("def16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF17, new org.apache.thrift.meta_data.FieldMetaData("def17", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF18, new org.apache.thrift.meta_data.FieldMetaData("def18", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF19, new org.apache.thrift.meta_data.FieldMetaData("def19", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF20, new org.apache.thrift.meta_data.FieldMetaData("def20", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF21, new org.apache.thrift.meta_data.FieldMetaData("def21", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF22, new org.apache.thrift.meta_data.FieldMetaData("def22", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF23, new org.apache.thrift.meta_data.FieldMetaData("def23", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF24, new org.apache.thrift.meta_data.FieldMetaData("def24", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF25, new org.apache.thrift.meta_data.FieldMetaData("def25", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF26, new org.apache.thrift.meta_data.FieldMetaData("def26", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF27, new org.apache.thrift.meta_data.FieldMetaData("def27", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF28, new org.apache.thrift.meta_data.FieldMetaData("def28", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF29, new org.apache.thrift.meta_data.FieldMetaData("def29", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF30, new org.apache.thrift.meta_data.FieldMetaData("def30", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF31, new org.apache.thrift.meta_data.FieldMetaData("def31", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF32, new org.apache.thrift.meta_data.FieldMetaData("def32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF33, new org.apache.thrift.meta_data.FieldMetaData("def33", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF34, new org.apache.thrift.meta_data.FieldMetaData("def34", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF35, new org.apache.thrift.meta_data.FieldMetaData("def35", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF36, new org.apache.thrift.meta_data.FieldMetaData("def36", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF37, new org.apache.thrift.meta_data.FieldMetaData("def37", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF38, new org.apache.thrift.meta_data.FieldMetaData("def38", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF39, new org.apache.thrift.meta_data.FieldMetaData("def39", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF40, new org.apache.thrift.meta_data.FieldMetaData("def40", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF41, new org.apache.thrift.meta_data.FieldMetaData("def41", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF42, new org.apache.thrift.meta_data.FieldMetaData("def42", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF43, new org.apache.thrift.meta_data.FieldMetaData("def43", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF44, new org.apache.thrift.meta_data.FieldMetaData("def44", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF45, new org.apache.thrift.meta_data.FieldMetaData("def45", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF46, new org.apache.thrift.meta_data.FieldMetaData("def46", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF47, new org.apache.thrift.meta_data.FieldMetaData("def47", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF48, new org.apache.thrift.meta_data.FieldMetaData("def48", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF49, new org.apache.thrift.meta_data.FieldMetaData("def49", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF50, new org.apache.thrift.meta_data.FieldMetaData("def50", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF51, new org.apache.thrift.meta_data.FieldMetaData("def51", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF52, new org.apache.thrift.meta_data.FieldMetaData("def52", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF53, new org.apache.thrift.meta_data.FieldMetaData("def53", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF54, new org.apache.thrift.meta_data.FieldMetaData("def54", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF55, new org.apache.thrift.meta_data.FieldMetaData("def55", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF56, new org.apache.thrift.meta_data.FieldMetaData("def56", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF57, new org.apache.thrift.meta_data.FieldMetaData("def57", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF58, new org.apache.thrift.meta_data.FieldMetaData("def58", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF59, new org.apache.thrift.meta_data.FieldMetaData("def59", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF60, new org.apache.thrift.meta_data.FieldMetaData("def60", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF61, new org.apache.thrift.meta_data.FieldMetaData("def61", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF62, new org.apache.thrift.meta_data.FieldMetaData("def62", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF63, new org.apache.thrift.meta_data.FieldMetaData("def63", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF64, new org.apache.thrift.meta_data.FieldMetaData("def64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Opt64.class, metaDataMap);
  }

  public Opt64() {
  }

  public Opt64(
    int def1,
    int def2,
    int def3,
    int def4,
    int def5,
    int def6,
    int def7,
    int def8,
    int def9,
    int def10,
    int def11,
    int def12,
    int def13,
    int def14,
    int def15,
    int def16,
    int def17,
    int def18,
    int def19,
    int def20,
    int def21,
    int def22,
    int def23,
    int def24,
    int def25,
    int def26,
    int def27,
    int def28,
    int def29,
    int def30,
    int def31,
    int def32,
    int def33,
    int def34,
    int def35,
    int def36,
    int def37,
    int def38,
    int def39,
    int def40,
    int def41,
    int def42,
    int def43,
    int def44,
    int def45,
    int def46,
    int def47,
    int def48,
    int def49,
    int def50,
    int def51,
    int def52,
    int def53,
    int def54,
    int def55,
    int def56,
    int def57,
    int def58,
    int def59,
    int def60,
    int def61,
    int def62,
    int def63,
    int def64)
  {
    this();
    this.def1 = def1;
    setDef1IsSet(true);
    this.def2 = def2;
    setDef2IsSet(true);
    this.def3 = def3;
    setDef3IsSet(true);
    this.def4 = def4;
    setDef4IsSet(true);
    this.def5 = def5;
    setDef5IsSet(true);
    this.def6 = def6;
    setDef6IsSet(true);
    this.def7 = def7;
    setDef7IsSet(true);
    this.def8 = def8;
    setDef8IsSet(true);
    this.def9 = def9;
    setDef9IsSet(true);
    this.def10 = def10;
    setDef10IsSet(true);
    this.def11 = def11;
    setDef11IsSet(true);
    this.def12 = def12;
    setDef12IsSet(true);
    this.def13 = def13;
    setDef13IsSet(true);
    this.def14 = def14;
    setDef14IsSet(true);
    this.def15 = def15;
    setDef15IsSet(true);
    this.def16 = def16;
    setDef16IsSet(true);
    this.def17 = def17;
    setDef17IsSet(true);
    this.def18 = def18;
    setDef18IsSet(true);
    this.def19 = def19;
    setDef19IsSet(true);
    this.def20 = def20;
    setDef20IsSet(true);
    this.def21 = def21;
    setDef21IsSet(true);
    this.def22 = def22;
    setDef22IsSet(true);
    this.def23 = def23;
    setDef23IsSet(true);
    this.def24 = def24;
    setDef24IsSet(true);
    this.def25 = def25;
    setDef25IsSet(true);
    this.def26 = def26;
    setDef26IsSet(true);
    this.def27 = def27;
    setDef27IsSet(true);
    this.def28 = def28;
    setDef28IsSet(true);
    this.def29 = def29;
    setDef29IsSet(true);
    this.def30 = def30;
    setDef30IsSet(true);
    this.def31 = def31;
    setDef31IsSet(true);
    this.def32 = def32;
    setDef32IsSet(true);
    this.def33 = def33;
    setDef33IsSet(true);
    this.def34 = def34;
    setDef34IsSet(true);
    this.def35 = def35;
    setDef35IsSet(true);
    this.def36 = def36;
    setDef36IsSet(true);
    this.def37 = def37;
    setDef37IsSet(true);
    this.def38 = def38;
    setDef38IsSet(true);
    this.def39 = def39;
    setDef39IsSet(true);
    this.def40 = def40;
    setDef40IsSet(true);
    this.def41 = def41;
    setDef41IsSet(true);
    this.def42 = def42;
    setDef42IsSet(true);
    this.def43 = def43;
    setDef43IsSet(true);
    this.def44 = def44;
    setDef44IsSet(true);
    this.def45 = def45;
    setDef45IsSet(true);
    this.def46 = def46;
    setDef46IsSet(true);
    this.def47 = def47;
    setDef47IsSet(true);
    this.def48 = def48;
    setDef48IsSet(true);
    this.def49 = def49;
    setDef49IsSet(true);
    this.def50 = def50;
    setDef50IsSet(true);
    this.def51 = def51;
    setDef51IsSet(true);
    this.def52 = def52;
    setDef52IsSet(true);
    this.def53 = def53;
    setDef53IsSet(true);
    this.def54 = def54;
    setDef54IsSet(true);
    this.def55 = def55;
    setDef55IsSet(true);
    this.def56 = def56;
    setDef56IsSet(true);
    this.def57 = def57;
    setDef57IsSet(true);
    this.def58 = def58;
    setDef58IsSet(true);
    this.def59 = def59;
    setDef59IsSet(true);
    this.def60 = def60;
    setDef60IsSet(true);
    this.def61 = def61;
    setDef61IsSet(true);
    this.def62 = def62;
    setDef62IsSet(true);
    this.def63 = def63;
    setDef63IsSet(true);
    this.def64 = def64;
    setDef64IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Opt64(Opt64 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.def1 = other.def1;
    this.def2 = other.def2;
    this.def3 = other.def3;
    this.def4 = other.def4;
    this.def5 = other.def5;
    this.def6 = other.def6;
    this.def7 = other.def7;
    this.def8 = other.def8;
    this.def9 = other.def9;
    this.def10 = other.def10;
    this.def11 = other.def11;
    this.def12 = other.def12;
    this.def13 = other.def13;
    this.def14 = other.def14;
    this.def15 = other.def15;
    this.def16 = other.def16;
    this.def17 = other.def17;
    this.def18 = other.def18;
    this.def19 = other.def19;
    this.def20 = other.def20;
    this.def21 = other.def21;
    this.def22 = other.def22;
    this.def23 = other.def23;
    this.def24 = other.def24;
    this.def25 = other.def25;
    this.def26 = other.def26;
    this.def27 = other.def27;
    this.def28 = other.def28;
    this.def29 = other.def29;
    this.def30 = other.def30;
    this.def31 = other.def31;
    this.def32 = other.def32;
    this.def33 = other.def33;
    this.def34 = other.def34;
    this.def35 = other.def35;
    this.def36 = other.def36;
    this.def37 = other.def37;
    this.def38 = other.def38;
    this.def39 = other.def39;
    this.def40 = other.def40;
    this.def41 = other.def41;
    this.def42 = other.def42;
    this.def43 = other.def43;
    this.def44 = other.def44;
    this.def45 = other.def45;
    this.def46 = other.def46;
    this.def47 = other.def47;
    this.def48 = other.def48;
    this.def49 = other.def49;
    this.def50 = other.def50;
    this.def51 = other.def51;
    this.def52 = other.def52;
    this.def53 = other.def53;
    this.def54 = other.def54;
    this.def55 = other.def55;
    this.def56 = other.def56;
    this.def57 = other.def57;
    this.def58 = other.def58;
    this.def59 = other.def59;
    this.def60 = other.def60;
    this.def61 = other.def61;
    this.def62 = other.def62;
    this.def63 = other.def63;
    this.def64 = other.def64;
  }

  public Opt64 deepCopy() {
    return new Opt64(this);
  }

  @Override
  public void clear() {
    setDef1IsSet(false);
    this.def1 = 0;
    setDef2IsSet(false);
    this.def2 = 0;
    setDef3IsSet(false);
    this.def3 = 0;
    setDef4IsSet(false);
    this.def4 = 0;
    setDef5IsSet(false);
    this.def5 = 0;
    setDef6IsSet(false);
    this.def6 = 0;
    setDef7IsSet(false);
    this.def7 = 0;
    setDef8IsSet(false);
    this.def8 = 0;
    setDef9IsSet(false);
    this.def9 = 0;
    setDef10IsSet(false);
    this.def10 = 0;
    setDef11IsSet(false);
    this.def11 = 0;
    setDef12IsSet(false);
    this.def12 = 0;
    setDef13IsSet(false);
    this.def13 = 0;
    setDef14IsSet(false);
    this.def14 = 0;
    setDef15IsSet(false);
    this.def15 = 0;
    setDef16IsSet(false);
    this.def16 = 0;
    setDef17IsSet(false);
    this.def17 = 0;
    setDef18IsSet(false);
    this.def18 = 0;
    setDef19IsSet(false);
    this.def19 = 0;
    setDef20IsSet(false);
    this.def20 = 0;
    setDef21IsSet(false);
    this.def21 = 0;
    setDef22IsSet(false);
    this.def22 = 0;
    setDef23IsSet(false);
    this.def23 = 0;
    setDef24IsSet(false);
    this.def24 = 0;
    setDef25IsSet(false);
    this.def25 = 0;
    setDef26IsSet(false);
    this.def26 = 0;
    setDef27IsSet(false);
    this.def27 = 0;
    setDef28IsSet(false);
    this.def28 = 0;
    setDef29IsSet(false);
    this.def29 = 0;
    setDef30IsSet(false);
    this.def30 = 0;
    setDef31IsSet(false);
    this.def31 = 0;
    setDef32IsSet(false);
    this.def32 = 0;
    setDef33IsSet(false);
    this.def33 = 0;
    setDef34IsSet(false);
    this.def34 = 0;
    setDef35IsSet(false);
    this.def35 = 0;
    setDef36IsSet(false);
    this.def36 = 0;
    setDef37IsSet(false);
    this.def37 = 0;
    setDef38IsSet(false);
    this.def38 = 0;
    setDef39IsSet(false);
    this.def39 = 0;
    setDef40IsSet(false);
    this.def40 = 0;
    setDef41IsSet(false);
    this.def41 = 0;
    setDef42IsSet(false);
    this.def42 = 0;
    setDef43IsSet(false);
    this.def43 = 0;
    setDef44IsSet(false);
    this.def44 = 0;
    setDef45IsSet(false);
    this.def45 = 0;
    setDef46IsSet(false);
    this.def46 = 0;
    setDef47IsSet(false);
    this.def47 = 0;
    setDef48IsSet(false);
    this.def48 = 0;
    setDef49IsSet(false);
    this.def49 = 0;
    setDef50IsSet(false);
    this.def50 = 0;
    setDef51IsSet(false);
    this.def51 = 0;
    setDef52IsSet(false);
    this.def52 = 0;
    setDef53IsSet(false);
    this.def53 = 0;
    setDef54IsSet(false);
    this.def54 = 0;
    setDef55IsSet(false);
    this.def55 = 0;
    setDef56IsSet(false);
    this.def56 = 0;
    setDef57IsSet(false);
    this.def57 = 0;
    setDef58IsSet(false);
    this.def58 = 0;
    setDef59IsSet(false);
    this.def59 = 0;
    setDef60IsSet(false);
    this.def60 = 0;
    setDef61IsSet(false);
    this.def61 = 0;
    setDef62IsSet(false);
    this.def62 = 0;
    setDef63IsSet(false);
    this.def63 = 0;
    setDef64IsSet(false);
    this.def64 = 0;
  }

  public int getDef1() {
    return this.def1;
  }

  public Opt64 setDef1(int def1) {
    this.def1 = def1;
    setDef1IsSet(true);
    return this;
  }

  public void unsetDef1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  /** Returns true if field def1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef1() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  public void setDef1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF1_ISSET_ID, value);
  }

  public int getDef2() {
    return this.def2;
  }

  public Opt64 setDef2(int def2) {
    this.def2 = def2;
    setDef2IsSet(true);
    return this;
  }

  public void unsetDef2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  /** Returns true if field def2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef2() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  public void setDef2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF2_ISSET_ID, value);
  }

  public int getDef3() {
    return this.def3;
  }

  public Opt64 setDef3(int def3) {
    this.def3 = def3;
    setDef3IsSet(true);
    return this;
  }

  public void unsetDef3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  /** Returns true if field def3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef3() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  public void setDef3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF3_ISSET_ID, value);
  }

  public int getDef4() {
    return this.def4;
  }

  public Opt64 setDef4(int def4) {
    this.def4 = def4;
    setDef4IsSet(true);
    return this;
  }

  public void unsetDef4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  /** Returns true if field def4 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef4() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  public void setDef4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF4_ISSET_ID, value);
  }

  public int getDef5() {
    return this.def5;
  }

  public Opt64 setDef5(int def5) {
    this.def5 = def5;
    setDef5IsSet(true);
    return this;
  }

  public void unsetDef5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF5_ISSET_ID);
  }

  /** Returns true if field def5 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef5() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF5_ISSET_ID);
  }

  public void setDef5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF5_ISSET_ID, value);
  }

  public int getDef6() {
    return this.def6;
  }

  public Opt64 setDef6(int def6) {
    this.def6 = def6;
    setDef6IsSet(true);
    return this;
  }

  public void unsetDef6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF6_ISSET_ID);
  }

  /** Returns true if field def6 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef6() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF6_ISSET_ID);
  }

  public void setDef6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF6_ISSET_ID, value);
  }

  public int getDef7() {
    return this.def7;
  }

  public Opt64 setDef7(int def7) {
    this.def7 = def7;
    setDef7IsSet(true);
    return this;
  }

  public void unsetDef7() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF7_ISSET_ID);
  }

  /** Returns true if field def7 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef7() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF7_ISSET_ID);
  }

  public void setDef7IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF7_ISSET_ID, value);
  }

  public int getDef8() {
    return this.def8;
  }

  public Opt64 setDef8(int def8) {
    this.def8 = def8;
    setDef8IsSet(true);
    return this;
  }

  public void unsetDef8() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF8_ISSET_ID);
  }

  /** Returns true if field def8 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef8() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF8_ISSET_ID);
  }

  public void setDef8IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF8_ISSET_ID, value);
  }

  public int getDef9() {
    return this.def9;
  }

  public Opt64 setDef9(int def9) {
    this.def9 = def9;
    setDef9IsSet(true);
    return this;
  }

  public void unsetDef9() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF9_ISSET_ID);
  }

  /** Returns true if field def9 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef9() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF9_ISSET_ID);
  }

  public void setDef9IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF9_ISSET_ID, value);
  }

  public int getDef10() {
    return this.def10;
  }

  public Opt64 setDef10(int def10) {
    this.def10 = def10;
    setDef10IsSet(true);
    return this;
  }

  public void unsetDef10() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF10_ISSET_ID);
  }

  /** Returns true if field def10 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef10() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF10_ISSET_ID);
  }

  public void setDef10IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF10_ISSET_ID, value);
  }

  public int getDef11() {
    return this.def11;
  }

  public Opt64 setDef11(int def11) {
    this.def11 = def11;
    setDef11IsSet(true);
    return this;
  }

  public void unsetDef11() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF11_ISSET_ID);
  }

  /** Returns true if field def11 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef11() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF11_ISSET_ID);
  }

  public void setDef11IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF11_ISSET_ID, value);
  }

  public int getDef12() {
    return this.def12;
  }

  public Opt64 setDef12(int def12) {
    this.def12 = def12;
    setDef12IsSet(true);
    return this;
  }

  public void unsetDef12() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF12_ISSET_ID);
  }

  /** Returns true if field def12 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef12() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF12_ISSET_ID);
  }

  public void setDef12IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF12_ISSET_ID, value);
  }

  public int getDef13() {
    return this.def13;
  }

  public Opt64 setDef13(int def13) {
    this.def13 = def13;
    setDef13IsSet(true);
    return this;
  }

  public void unsetDef13() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF13_ISSET_ID);
  }

  /** Returns true if field def13 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef13() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF13_ISSET_ID);
  }

  public void setDef13IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF13_ISSET_ID, value);
  }

  public int getDef14() {
    return this.def14;
  }

  public Opt64 setDef14(int def14) {
    this.def14 = def14;
    setDef14IsSet(true);
    return this;
  }

  public void unsetDef14() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF14_ISSET_ID);
  }

  /** Returns true if field def14 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef14() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF14_ISSET_ID);
  }

  public void setDef14IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF14_ISSET_ID, value);
  }

  public int getDef15() {
    return this.def15;
  }

  public Opt64 setDef15(int def15) {
    this.def15 = def15;
    setDef15IsSet(true);
    return this;
  }

  public void unsetDef15() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF15_ISSET_ID);
  }

  /** Returns true if field def15 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef15() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF15_ISSET_ID);
  }

  public void setDef15IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF15_ISSET_ID, value);
  }

  public int getDef16() {
    return this.def16;
  }

  public Opt64 setDef16(int def16) {
    this.def16 = def16;
    setDef16IsSet(true);
    return this;
  }

  public void unsetDef16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF16_ISSET_ID);
  }

  /** Returns true if field def16 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef16() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF16_ISSET_ID);
  }

  public void setDef16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF16_ISSET_ID, value);
  }

  public int getDef17() {
    return this.def17;
  }

  public Opt64 setDef17(int def17) {
    this.def17 = def17;
    setDef17IsSet(true);
    return this;
  }

  public void unsetDef17() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF17_ISSET_ID);
  }

  /** Returns true if field def17 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef17() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF17_ISSET_ID);
  }

  public void setDef17IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF17_ISSET_ID, value);
  }

  public int getDef18() {
    return this.def18;
  }

  public Opt64 setDef18(int def18) {
    this.def18 = def18;
    setDef18IsSet(true);
    return this;
  }

  public void unsetDef18() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF18_ISSET_ID);
  }

  /** Returns true if field def18 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef18() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF18_ISSET_ID);
  }

  public void setDef18IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF18_ISSET_ID, value);
  }

  public int getDef19() {
    return this.def19;
  }

  public Opt64 setDef19(int def19) {
    this.def19 = def19;
    setDef19IsSet(true);
    return this;
  }

  public void unsetDef19() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF19_ISSET_ID);
  }

  /** Returns true if field def19 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef19() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF19_ISSET_ID);
  }

  public void setDef19IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF19_ISSET_ID, value);
  }

  public int getDef20() {
    return this.def20;
  }

  public Opt64 setDef20(int def20) {
    this.def20 = def20;
    setDef20IsSet(true);
    return this;
  }

  public void unsetDef20() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF20_ISSET_ID);
  }

  /** Returns true if field def20 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef20() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF20_ISSET_ID);
  }

  public void setDef20IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF20_ISSET_ID, value);
  }

  public int getDef21() {
    return this.def21;
  }

  public Opt64 setDef21(int def21) {
    this.def21 = def21;
    setDef21IsSet(true);
    return this;
  }

  public void unsetDef21() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF21_ISSET_ID);
  }

  /** Returns true if field def21 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef21() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF21_ISSET_ID);
  }

  public void setDef21IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF21_ISSET_ID, value);
  }

  public int getDef22() {
    return this.def22;
  }

  public Opt64 setDef22(int def22) {
    this.def22 = def22;
    setDef22IsSet(true);
    return this;
  }

  public void unsetDef22() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF22_ISSET_ID);
  }

  /** Returns true if field def22 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef22() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF22_ISSET_ID);
  }

  public void setDef22IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF22_ISSET_ID, value);
  }

  public int getDef23() {
    return this.def23;
  }

  public Opt64 setDef23(int def23) {
    this.def23 = def23;
    setDef23IsSet(true);
    return this;
  }

  public void unsetDef23() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF23_ISSET_ID);
  }

  /** Returns true if field def23 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef23() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF23_ISSET_ID);
  }

  public void setDef23IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF23_ISSET_ID, value);
  }

  public int getDef24() {
    return this.def24;
  }

  public Opt64 setDef24(int def24) {
    this.def24 = def24;
    setDef24IsSet(true);
    return this;
  }

  public void unsetDef24() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF24_ISSET_ID);
  }

  /** Returns true if field def24 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef24() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF24_ISSET_ID);
  }

  public void setDef24IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF24_ISSET_ID, value);
  }

  public int getDef25() {
    return this.def25;
  }

  public Opt64 setDef25(int def25) {
    this.def25 = def25;
    setDef25IsSet(true);
    return this;
  }

  public void unsetDef25() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF25_ISSET_ID);
  }

  /** Returns true if field def25 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef25() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF25_ISSET_ID);
  }

  public void setDef25IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF25_ISSET_ID, value);
  }

  public int getDef26() {
    return this.def26;
  }

  public Opt64 setDef26(int def26) {
    this.def26 = def26;
    setDef26IsSet(true);
    return this;
  }

  public void unsetDef26() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF26_ISSET_ID);
  }

  /** Returns true if field def26 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef26() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF26_ISSET_ID);
  }

  public void setDef26IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF26_ISSET_ID, value);
  }

  public int getDef27() {
    return this.def27;
  }

  public Opt64 setDef27(int def27) {
    this.def27 = def27;
    setDef27IsSet(true);
    return this;
  }

  public void unsetDef27() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF27_ISSET_ID);
  }

  /** Returns true if field def27 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef27() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF27_ISSET_ID);
  }

  public void setDef27IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF27_ISSET_ID, value);
  }

  public int getDef28() {
    return this.def28;
  }

  public Opt64 setDef28(int def28) {
    this.def28 = def28;
    setDef28IsSet(true);
    return this;
  }

  public void unsetDef28() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF28_ISSET_ID);
  }

  /** Returns true if field def28 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef28() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF28_ISSET_ID);
  }

  public void setDef28IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF28_ISSET_ID, value);
  }

  public int getDef29() {
    return this.def29;
  }

  public Opt64 setDef29(int def29) {
    this.def29 = def29;
    setDef29IsSet(true);
    return this;
  }

  public void unsetDef29() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF29_ISSET_ID);
  }

  /** Returns true if field def29 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef29() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF29_ISSET_ID);
  }

  public void setDef29IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF29_ISSET_ID, value);
  }

  public int getDef30() {
    return this.def30;
  }

  public Opt64 setDef30(int def30) {
    this.def30 = def30;
    setDef30IsSet(true);
    return this;
  }

  public void unsetDef30() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF30_ISSET_ID);
  }

  /** Returns true if field def30 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef30() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF30_ISSET_ID);
  }

  public void setDef30IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF30_ISSET_ID, value);
  }

  public int getDef31() {
    return this.def31;
  }

  public Opt64 setDef31(int def31) {
    this.def31 = def31;
    setDef31IsSet(true);
    return this;
  }

  public void unsetDef31() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF31_ISSET_ID);
  }

  /** Returns true if field def31 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef31() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF31_ISSET_ID);
  }

  public void setDef31IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF31_ISSET_ID, value);
  }

  public int getDef32() {
    return this.def32;
  }

  public Opt64 setDef32(int def32) {
    this.def32 = def32;
    setDef32IsSet(true);
    return this;
  }

  public void unsetDef32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF32_ISSET_ID);
  }

  /** Returns true if field def32 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef32() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF32_ISSET_ID);
  }

  public void setDef32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF32_ISSET_ID, value);
  }

  public int getDef33() {
    return this.def33;
  }

  public Opt64 setDef33(int def33) {
    this.def33 = def33;
    setDef33IsSet(true);
    return this;
  }

  public void unsetDef33() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF33_ISSET_ID);
  }

  /** Returns true if field def33 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef33() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF33_ISSET_ID);
  }

  public void setDef33IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF33_ISSET_ID, value);
  }

  public int getDef34() {
    return this.def34;
  }

  public Opt64 setDef34(int def34) {
    this.def34 = def34;
    setDef34IsSet(true);
    return this;
  }

  public void unsetDef34() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF34_ISSET_ID);
  }

  /** Returns true if field def34 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef34() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF34_ISSET_ID);
  }

  public void setDef34IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF34_ISSET_ID, value);
  }

  public int getDef35() {
    return this.def35;
  }

  public Opt64 setDef35(int def35) {
    this.def35 = def35;
    setDef35IsSet(true);
    return this;
  }

  public void unsetDef35() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF35_ISSET_ID);
  }

  /** Returns true if field def35 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef35() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF35_ISSET_ID);
  }

  public void setDef35IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF35_ISSET_ID, value);
  }

  public int getDef36() {
    return this.def36;
  }

  public Opt64 setDef36(int def36) {
    this.def36 = def36;
    setDef36IsSet(true);
    return this;
  }

  public void unsetDef36() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF36_ISSET_ID);
  }

  /** Returns true if field def36 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef36() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF36_ISSET_ID);
  }

  public void setDef36IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF36_ISSET_ID, value);
  }

  public int getDef37() {
    return this.def37;
  }

  public Opt64 setDef37(int def37) {
    this.def37 = def37;
    setDef37IsSet(true);
    return this;
  }

  public void unsetDef37() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF37_ISSET_ID);
  }

  /** Returns true if field def37 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef37() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF37_ISSET_ID);
  }

  public void setDef37IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF37_ISSET_ID, value);
  }

  public int getDef38() {
    return this.def38;
  }

  public Opt64 setDef38(int def38) {
    this.def38 = def38;
    setDef38IsSet(true);
    return this;
  }

  public void unsetDef38() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF38_ISSET_ID);
  }

  /** Returns true if field def38 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef38() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF38_ISSET_ID);
  }

  public void setDef38IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF38_ISSET_ID, value);
  }

  public int getDef39() {
    return this.def39;
  }

  public Opt64 setDef39(int def39) {
    this.def39 = def39;
    setDef39IsSet(true);
    return this;
  }

  public void unsetDef39() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF39_ISSET_ID);
  }

  /** Returns true if field def39 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef39() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF39_ISSET_ID);
  }

  public void setDef39IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF39_ISSET_ID, value);
  }

  public int getDef40() {
    return this.def40;
  }

  public Opt64 setDef40(int def40) {
    this.def40 = def40;
    setDef40IsSet(true);
    return this;
  }

  public void unsetDef40() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF40_ISSET_ID);
  }

  /** Returns true if field def40 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef40() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF40_ISSET_ID);
  }

  public void setDef40IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF40_ISSET_ID, value);
  }

  public int getDef41() {
    return this.def41;
  }

  public Opt64 setDef41(int def41) {
    this.def41 = def41;
    setDef41IsSet(true);
    return this;
  }

  public void unsetDef41() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF41_ISSET_ID);
  }

  /** Returns true if field def41 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef41() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF41_ISSET_ID);
  }

  public void setDef41IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF41_ISSET_ID, value);
  }

  public int getDef42() {
    return this.def42;
  }

  public Opt64 setDef42(int def42) {
    this.def42 = def42;
    setDef42IsSet(true);
    return this;
  }

  public void unsetDef42() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF42_ISSET_ID);
  }

  /** Returns true if field def42 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef42() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF42_ISSET_ID);
  }

  public void setDef42IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF42_ISSET_ID, value);
  }

  public int getDef43() {
    return this.def43;
  }

  public Opt64 setDef43(int def43) {
    this.def43 = def43;
    setDef43IsSet(true);
    return this;
  }

  public void unsetDef43() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF43_ISSET_ID);
  }

  /** Returns true if field def43 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef43() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF43_ISSET_ID);
  }

  public void setDef43IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF43_ISSET_ID, value);
  }

  public int getDef44() {
    return this.def44;
  }

  public Opt64 setDef44(int def44) {
    this.def44 = def44;
    setDef44IsSet(true);
    return this;
  }

  public void unsetDef44() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF44_ISSET_ID);
  }

  /** Returns true if field def44 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef44() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF44_ISSET_ID);
  }

  public void setDef44IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF44_ISSET_ID, value);
  }

  public int getDef45() {
    return this.def45;
  }

  public Opt64 setDef45(int def45) {
    this.def45 = def45;
    setDef45IsSet(true);
    return this;
  }

  public void unsetDef45() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF45_ISSET_ID);
  }

  /** Returns true if field def45 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef45() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF45_ISSET_ID);
  }

  public void setDef45IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF45_ISSET_ID, value);
  }

  public int getDef46() {
    return this.def46;
  }

  public Opt64 setDef46(int def46) {
    this.def46 = def46;
    setDef46IsSet(true);
    return this;
  }

  public void unsetDef46() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF46_ISSET_ID);
  }

  /** Returns true if field def46 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef46() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF46_ISSET_ID);
  }

  public void setDef46IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF46_ISSET_ID, value);
  }

  public int getDef47() {
    return this.def47;
  }

  public Opt64 setDef47(int def47) {
    this.def47 = def47;
    setDef47IsSet(true);
    return this;
  }

  public void unsetDef47() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF47_ISSET_ID);
  }

  /** Returns true if field def47 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef47() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF47_ISSET_ID);
  }

  public void setDef47IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF47_ISSET_ID, value);
  }

  public int getDef48() {
    return this.def48;
  }

  public Opt64 setDef48(int def48) {
    this.def48 = def48;
    setDef48IsSet(true);
    return this;
  }

  public void unsetDef48() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF48_ISSET_ID);
  }

  /** Returns true if field def48 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef48() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF48_ISSET_ID);
  }

  public void setDef48IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF48_ISSET_ID, value);
  }

  public int getDef49() {
    return this.def49;
  }

  public Opt64 setDef49(int def49) {
    this.def49 = def49;
    setDef49IsSet(true);
    return this;
  }

  public void unsetDef49() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF49_ISSET_ID);
  }

  /** Returns true if field def49 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef49() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF49_ISSET_ID);
  }

  public void setDef49IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF49_ISSET_ID, value);
  }

  public int getDef50() {
    return this.def50;
  }

  public Opt64 setDef50(int def50) {
    this.def50 = def50;
    setDef50IsSet(true);
    return this;
  }

  public void unsetDef50() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF50_ISSET_ID);
  }

  /** Returns true if field def50 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef50() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF50_ISSET_ID);
  }

  public void setDef50IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF50_ISSET_ID, value);
  }

  public int getDef51() {
    return this.def51;
  }

  public Opt64 setDef51(int def51) {
    this.def51 = def51;
    setDef51IsSet(true);
    return this;
  }

  public void unsetDef51() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF51_ISSET_ID);
  }

  /** Returns true if field def51 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef51() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF51_ISSET_ID);
  }

  public void setDef51IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF51_ISSET_ID, value);
  }

  public int getDef52() {
    return this.def52;
  }

  public Opt64 setDef52(int def52) {
    this.def52 = def52;
    setDef52IsSet(true);
    return this;
  }

  public void unsetDef52() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF52_ISSET_ID);
  }

  /** Returns true if field def52 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef52() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF52_ISSET_ID);
  }

  public void setDef52IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF52_ISSET_ID, value);
  }

  public int getDef53() {
    return this.def53;
  }

  public Opt64 setDef53(int def53) {
    this.def53 = def53;
    setDef53IsSet(true);
    return this;
  }

  public void unsetDef53() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF53_ISSET_ID);
  }

  /** Returns true if field def53 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef53() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF53_ISSET_ID);
  }

  public void setDef53IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF53_ISSET_ID, value);
  }

  public int getDef54() {
    return this.def54;
  }

  public Opt64 setDef54(int def54) {
    this.def54 = def54;
    setDef54IsSet(true);
    return this;
  }

  public void unsetDef54() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF54_ISSET_ID);
  }

  /** Returns true if field def54 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef54() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF54_ISSET_ID);
  }

  public void setDef54IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF54_ISSET_ID, value);
  }

  public int getDef55() {
    return this.def55;
  }

  public Opt64 setDef55(int def55) {
    this.def55 = def55;
    setDef55IsSet(true);
    return this;
  }

  public void unsetDef55() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF55_ISSET_ID);
  }

  /** Returns true if field def55 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef55() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF55_ISSET_ID);
  }

  public void setDef55IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF55_ISSET_ID, value);
  }

  public int getDef56() {
    return this.def56;
  }

  public Opt64 setDef56(int def56) {
    this.def56 = def56;
    setDef56IsSet(true);
    return this;
  }

  public void unsetDef56() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF56_ISSET_ID);
  }

  /** Returns true if field def56 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef56() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF56_ISSET_ID);
  }

  public void setDef56IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF56_ISSET_ID, value);
  }

  public int getDef57() {
    return this.def57;
  }

  public Opt64 setDef57(int def57) {
    this.def57 = def57;
    setDef57IsSet(true);
    return this;
  }

  public void unsetDef57() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF57_ISSET_ID);
  }

  /** Returns true if field def57 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef57() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF57_ISSET_ID);
  }

  public void setDef57IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF57_ISSET_ID, value);
  }

  public int getDef58() {
    return this.def58;
  }

  public Opt64 setDef58(int def58) {
    this.def58 = def58;
    setDef58IsSet(true);
    return this;
  }

  public void unsetDef58() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF58_ISSET_ID);
  }

  /** Returns true if field def58 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef58() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF58_ISSET_ID);
  }

  public void setDef58IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF58_ISSET_ID, value);
  }

  public int getDef59() {
    return this.def59;
  }

  public Opt64 setDef59(int def59) {
    this.def59 = def59;
    setDef59IsSet(true);
    return this;
  }

  public void unsetDef59() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF59_ISSET_ID);
  }

  /** Returns true if field def59 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef59() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF59_ISSET_ID);
  }

  public void setDef59IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF59_ISSET_ID, value);
  }

  public int getDef60() {
    return this.def60;
  }

  public Opt64 setDef60(int def60) {
    this.def60 = def60;
    setDef60IsSet(true);
    return this;
  }

  public void unsetDef60() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF60_ISSET_ID);
  }

  /** Returns true if field def60 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef60() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF60_ISSET_ID);
  }

  public void setDef60IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF60_ISSET_ID, value);
  }

  public int getDef61() {
    return this.def61;
  }

  public Opt64 setDef61(int def61) {
    this.def61 = def61;
    setDef61IsSet(true);
    return this;
  }

  public void unsetDef61() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF61_ISSET_ID);
  }

  /** Returns true if field def61 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef61() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF61_ISSET_ID);
  }

  public void setDef61IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF61_ISSET_ID, value);
  }

  public int getDef62() {
    return this.def62;
  }

  public Opt64 setDef62(int def62) {
    this.def62 = def62;
    setDef62IsSet(true);
    return this;
  }

  public void unsetDef62() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF62_ISSET_ID);
  }

  /** Returns true if field def62 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef62() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF62_ISSET_ID);
  }

  public void setDef62IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF62_ISSET_ID, value);
  }

  public int getDef63() {
    return this.def63;
  }

  public Opt64 setDef63(int def63) {
    this.def63 = def63;
    setDef63IsSet(true);
    return this;
  }

  public void unsetDef63() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF63_ISSET_ID);
  }

  /** Returns true if field def63 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef63() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF63_ISSET_ID);
  }

  public void setDef63IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF63_ISSET_ID, value);
  }

  public int getDef64() {
    return this.def64;
  }

  public Opt64 setDef64(int def64) {
    this.def64 = def64;
    setDef64IsSet(true);
    return this;
  }

  public void unsetDef64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF64_ISSET_ID);
  }

  /** Returns true if field def64 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef64() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF64_ISSET_ID);
  }

  public void setDef64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF64_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEF1:
      if (value == null) {
        unsetDef1();
      } else {
        setDef1((Integer)value);
      }
      break;

    case DEF2:
      if (value == null) {
        unsetDef2();
      } else {
        setDef2((Integer)value);
      }
      break;

    case DEF3:
      if (value == null) {
        unsetDef3();
      } else {
        setDef3((Integer)value);
      }
      break;

    case DEF4:
      if (value == null) {
        unsetDef4();
      } else {
        setDef4((Integer)value);
      }
      break;

    case DEF5:
      if (value == null) {
        unsetDef5();
      } else {
        setDef5((Integer)value);
      }
      break;

    case DEF6:
      if (value == null) {
        unsetDef6();
      } else {
        setDef6((Integer)value);
      }
      break;

    case DEF7:
      if (value == null) {
        unsetDef7();
      } else {
        setDef7((Integer)value);
      }
      break;

    case DEF8:
      if (value == null) {
        unsetDef8();
      } else {
        setDef8((Integer)value);
      }
      break;

    case DEF9:
      if (value == null) {
        unsetDef9();
      } else {
        setDef9((Integer)value);
      }
      break;

    case DEF10:
      if (value == null) {
        unsetDef10();
      } else {
        setDef10((Integer)value);
      }
      break;

    case DEF11:
      if (value == null) {
        unsetDef11();
      } else {
        setDef11((Integer)value);
      }
      break;

    case DEF12:
      if (value == null) {
        unsetDef12();
      } else {
        setDef12((Integer)value);
      }
      break;

    case DEF13:
      if (value == null) {
        unsetDef13();
      } else {
        setDef13((Integer)value);
      }
      break;

    case DEF14:
      if (value == null) {
        unsetDef14();
      } else {
        setDef14((Integer)value);
      }
      break;

    case DEF15:
      if (value == null) {
        unsetDef15();
      } else {
        setDef15((Integer)value);
      }
      break;

    case DEF16:
      if (value == null) {
        unsetDef16();
      } else {
        setDef16((Integer)value);
      }
      break;

    case DEF17:
      if (value == null) {
        unsetDef17();
      } else {
        setDef17((Integer)value);
      }
      break;

    case DEF18:
      if (value == null) {
        unsetDef18();
      } else {
        setDef18((Integer)value);
      }
      break;

    case DEF19:
      if (value == null) {
        unsetDef19();
      } else {
        setDef19((Integer)value);
      }
      break;

    case DEF20:
      if (value == null) {
        unsetDef20();
      } else {
        setDef20((Integer)value);
      }
      break;

    case DEF21:
      if (value == null) {
        unsetDef21();
      } else {
        setDef21((Integer)value);
      }
      break;

    case DEF22:
      if (value == null) {
        unsetDef22();
      } else {
        setDef22((Integer)value);
      }
      break;

    case DEF23:
      if (value == null) {
        unsetDef23();
      } else {
        setDef23((Integer)value);
      }
      break;

    case DEF24:
      if (value == null) {
        unsetDef24();
      } else {
        setDef24((Integer)value);
      }
      break;

    case DEF25:
      if (value == null) {
        unsetDef25();
      } else {
        setDef25((Integer)value);
      }
      break;

    case DEF26:
      if (value == null) {
        unsetDef26();
      } else {
        setDef26((Integer)value);
      }
      break;

    case DEF27:
      if (value == null) {
        unsetDef27();
      } else {
        setDef27((Integer)value);
      }
      break;

    case DEF28:
      if (value == null) {
        unsetDef28();
      } else {
        setDef28((Integer)value);
      }
      break;

    case DEF29:
      if (value == null) {
        unsetDef29();
      } else {
        setDef29((Integer)value);
      }
      break;

    case DEF30:
      if (value == null) {
        unsetDef30();
      } else {
        setDef30((Integer)value);
      }
      break;

    case DEF31:
      if (value == null) {
        unsetDef31();
      } else {
        setDef31((Integer)value);
      }
      break;

    case DEF32:
      if (value == null) {
        unsetDef32();
      } else {
        setDef32((Integer)value);
      }
      break;

    case DEF33:
      if (value == null) {
        unsetDef33();
      } else {
        setDef33((Integer)value);
      }
      break;

    case DEF34:
      if (value == null) {
        unsetDef34();
      } else {
        setDef34((Integer)value);
      }
      break;

    case DEF35:
      if (value == null) {
        unsetDef35();
      } else {
        setDef35((Integer)value);
      }
      break;

    case DEF36:
      if (value == null) {
        unsetDef36();
      } else {
        setDef36((Integer)value);
      }
      break;

    case DEF37:
      if (value == null) {
        unsetDef37();
      } else {
        setDef37((Integer)value);
      }
      break;

    case DEF38:
      if (value == null) {
        unsetDef38();
      } else {
        setDef38((Integer)value);
      }
      break;

    case DEF39:
      if (value == null) {
        unsetDef39();
      } else {
        setDef39((Integer)value);
      }
      break;

    case DEF40:
      if (value == null) {
        unsetDef40();
      } else {
        setDef40((Integer)value);
      }
      break;

    case DEF41:
      if (value == null) {
        unsetDef41();
      } else {
        setDef41((Integer)value);
      }
      break;

    case DEF42:
      if (value == null) {
        unsetDef42();
      } else {
        setDef42((Integer)value);
      }
      break;

    case DEF43:
      if (value == null) {
        unsetDef43();
      } else {
        setDef43((Integer)value);
      }
      break;

    case DEF44:
      if (value == null) {
        unsetDef44();
      } else {
        setDef44((Integer)value);
      }
      break;

    case DEF45:
      if (value == null) {
        unsetDef45();
      } else {
        setDef45((Integer)value);
      }
      break;

    case DEF46:
      if (value == null) {
        unsetDef46();
      } else {
        setDef46((Integer)value);
      }
      break;

    case DEF47:
      if (value == null) {
        unsetDef47();
      } else {
        setDef47((Integer)value);
      }
      break;

    case DEF48:
      if (value == null) {
        unsetDef48();
      } else {
        setDef48((Integer)value);
      }
      break;

    case DEF49:
      if (value == null) {
        unsetDef49();
      } else {
        setDef49((Integer)value);
      }
      break;

    case DEF50:
      if (value == null) {
        unsetDef50();
      } else {
        setDef50((Integer)value);
      }
      break;

    case DEF51:
      if (value == null) {
        unsetDef51();
      } else {
        setDef51((Integer)value);
      }
      break;

    case DEF52:
      if (value == null) {
        unsetDef52();
      } else {
        setDef52((Integer)value);
      }
      break;

    case DEF53:
      if (value == null) {
        unsetDef53();
      } else {
        setDef53((Integer)value);
      }
      break;

    case DEF54:
      if (value == null) {
        unsetDef54();
      } else {
        setDef54((Integer)value);
      }
      break;

    case DEF55:
      if (value == null) {
        unsetDef55();
      } else {
        setDef55((Integer)value);
      }
      break;

    case DEF56:
      if (value == null) {
        unsetDef56();
      } else {
        setDef56((Integer)value);
      }
      break;

    case DEF57:
      if (value == null) {
        unsetDef57();
      } else {
        setDef57((Integer)value);
      }
      break;

    case DEF58:
      if (value == null) {
        unsetDef58();
      } else {
        setDef58((Integer)value);
      }
      break;

    case DEF59:
      if (value == null) {
        unsetDef59();
      } else {
        setDef59((Integer)value);
      }
      break;

    case DEF60:
      if (value == null) {
        unsetDef60();
      } else {
        setDef60((Integer)value);
      }
      break;

    case DEF61:
      if (value == null) {
        unsetDef61();
      } else {
        setDef61((Integer)value);
      }
      break;

    case DEF62:
      if (value == null) {
        unsetDef62();
      } else {
        setDef62((Integer)value);
      }
      break;

    case DEF63:
      if (value == null) {
        unsetDef63();
      } else {
        setDef63((Integer)value);
      }
      break;

    case DEF64:
      if (value == null) {
        unsetDef64();
      } else {
        setDef64((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEF1:
      return getDef1();

    case DEF2:
      return getDef2();

    case DEF3:
      return getDef3();

    case DEF4:
      return getDef4();

    case DEF5:
      return getDef5();

    case DEF6:
      return getDef6();

    case DEF7:
      return getDef7();

    case DEF8:
      return getDef8();

    case DEF9:
      return getDef9();

    case DEF10:
      return getDef10();

    case DEF11:
      return getDef11();

    case DEF12:
      return getDef12();

    case DEF13:
      return getDef13();

    case DEF14:
      return getDef14();

    case DEF15:
      return getDef15();

    case DEF16:
      return getDef16();

    case DEF17:
      return getDef17();

    case DEF18:
      return getDef18();

    case DEF19:
      return getDef19();

    case DEF20:
      return getDef20();

    case DEF21:
      return getDef21();

    case DEF22:
      return getDef22();

    case DEF23:
      return getDef23();

    case DEF24:
      return getDef24();

    case DEF25:
      return getDef25();

    case DEF26:
      return getDef26();

    case DEF27:
      return getDef27();

    case DEF28:
      return getDef28();

    case DEF29:
      return getDef29();

    case DEF30:
      return getDef30();

    case DEF31:
      return getDef31();

    case DEF32:
      return getDef32();

    case DEF33:
      return getDef33();

    case DEF34:
      return getDef34();

    case DEF35:
      return getDef35();

    case DEF36:
      return getDef36();

    case DEF37:
      return getDef37();

    case DEF38:
      return getDef38();

    case DEF39:
      return getDef39();

    case DEF40:
      return getDef40();

    case DEF41:
      return getDef41();

    case DEF42:
      return getDef42();

    case DEF43:
      return getDef43();

    case DEF44:
      return getDef44();

    case DEF45:
      return getDef45();

    case DEF46:
      return getDef46();

    case DEF47:
      return getDef47();

    case DEF48:
      return getDef48();

    case DEF49:
      return getDef49();

    case DEF50:
      return getDef50();

    case DEF51:
      return getDef51();

    case DEF52:
      return getDef52();

    case DEF53:
      return getDef53();

    case DEF54:
      return getDef54();

    case DEF55:
      return getDef55();

    case DEF56:
      return getDef56();

    case DEF57:
      return getDef57();

    case DEF58:
      return getDef58();

    case DEF59:
      return getDef59();

    case DEF60:
      return getDef60();

    case DEF61:
      return getDef61();

    case DEF62:
      return getDef62();

    case DEF63:
      return getDef63();

    case DEF64:
      return getDef64();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEF1:
      return isSetDef1();
    case DEF2:
      return isSetDef2();
    case DEF3:
      return isSetDef3();
    case DEF4:
      return isSetDef4();
    case DEF5:
      return isSetDef5();
    case DEF6:
      return isSetDef6();
    case DEF7:
      return isSetDef7();
    case DEF8:
      return isSetDef8();
    case DEF9:
      return isSetDef9();
    case DEF10:
      return isSetDef10();
    case DEF11:
      return isSetDef11();
    case DEF12:
      return isSetDef12();
    case DEF13:
      return isSetDef13();
    case DEF14:
      return isSetDef14();
    case DEF15:
      return isSetDef15();
    case DEF16:
      return isSetDef16();
    case DEF17:
      return isSetDef17();
    case DEF18:
      return isSetDef18();
    case DEF19:
      return isSetDef19();
    case DEF20:
      return isSetDef20();
    case DEF21:
      return isSetDef21();
    case DEF22:
      return isSetDef22();
    case DEF23:
      return isSetDef23();
    case DEF24:
      return isSetDef24();
    case DEF25:
      return isSetDef25();
    case DEF26:
      return isSetDef26();
    case DEF27:
      return isSetDef27();
    case DEF28:
      return isSetDef28();
    case DEF29:
      return isSetDef29();
    case DEF30:
      return isSetDef30();
    case DEF31:
      return isSetDef31();
    case DEF32:
      return isSetDef32();
    case DEF33:
      return isSetDef33();
    case DEF34:
      return isSetDef34();
    case DEF35:
      return isSetDef35();
    case DEF36:
      return isSetDef36();
    case DEF37:
      return isSetDef37();
    case DEF38:
      return isSetDef38();
    case DEF39:
      return isSetDef39();
    case DEF40:
      return isSetDef40();
    case DEF41:
      return isSetDef41();
    case DEF42:
      return isSetDef42();
    case DEF43:
      return isSetDef43();
    case DEF44:
      return isSetDef44();
    case DEF45:
      return isSetDef45();
    case DEF46:
      return isSetDef46();
    case DEF47:
      return isSetDef47();
    case DEF48:
      return isSetDef48();
    case DEF49:
      return isSetDef49();
    case DEF50:
      return isSetDef50();
    case DEF51:
      return isSetDef51();
    case DEF52:
      return isSetDef52();
    case DEF53:
      return isSetDef53();
    case DEF54:
      return isSetDef54();
    case DEF55:
      return isSetDef55();
    case DEF56:
      return isSetDef56();
    case DEF57:
      return isSetDef57();
    case DEF58:
      return isSetDef58();
    case DEF59:
      return isSetDef59();
    case DEF60:
      return isSetDef60();
    case DEF61:
      return isSetDef61();
    case DEF62:
      return isSetDef62();
    case DEF63:
      return isSetDef63();
    case DEF64:
      return isSetDef64();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Opt64)
      return this.equals((Opt64)that);
    return false;
  }

  public boolean equals(Opt64 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_def1 = true;
    boolean that_present_def1 = true;
    if (this_present_def1 || that_present_def1) {
      if (!(this_present_def1 && that_present_def1))
        return false;
      if (this.def1 != that.def1)
        return false;
    }

    boolean this_present_def2 = true;
    boolean that_present_def2 = true;
    if (this_present_def2 || that_present_def2) {
      if (!(this_present_def2 && that_present_def2))
        return false;
      if (this.def2 != that.def2)
        return false;
    }

    boolean this_present_def3 = true;
    boolean that_present_def3 = true;
    if (this_present_def3 || that_present_def3) {
      if (!(this_present_def3 && that_present_def3))
        return false;
      if (this.def3 != that.def3)
        return false;
    }

    boolean this_present_def4 = true;
    boolean that_present_def4 = true;
    if (this_present_def4 || that_present_def4) {
      if (!(this_present_def4 && that_present_def4))
        return false;
      if (this.def4 != that.def4)
        return false;
    }

    boolean this_present_def5 = true;
    boolean that_present_def5 = true;
    if (this_present_def5 || that_present_def5) {
      if (!(this_present_def5 && that_present_def5))
        return false;
      if (this.def5 != that.def5)
        return false;
    }

    boolean this_present_def6 = true;
    boolean that_present_def6 = true;
    if (this_present_def6 || that_present_def6) {
      if (!(this_present_def6 && that_present_def6))
        return false;
      if (this.def6 != that.def6)
        return false;
    }

    boolean this_present_def7 = true;
    boolean that_present_def7 = true;
    if (this_present_def7 || that_present_def7) {
      if (!(this_present_def7 && that_present_def7))
        return false;
      if (this.def7 != that.def7)
        return false;
    }

    boolean this_present_def8 = true;
    boolean that_present_def8 = true;
    if (this_present_def8 || that_present_def8) {
      if (!(this_present_def8 && that_present_def8))
        return false;
      if (this.def8 != that.def8)
        return false;
    }

    boolean this_present_def9 = true;
    boolean that_present_def9 = true;
    if (this_present_def9 || that_present_def9) {
      if (!(this_present_def9 && that_present_def9))
        return false;
      if (this.def9 != that.def9)
        return false;
    }

    boolean this_present_def10 = true;
    boolean that_present_def10 = true;
    if (this_present_def10 || that_present_def10) {
      if (!(this_present_def10 && that_present_def10))
        return false;
      if (this.def10 != that.def10)
        return false;
    }

    boolean this_present_def11 = true;
    boolean that_present_def11 = true;
    if (this_present_def11 || that_present_def11) {
      if (!(this_present_def11 && that_present_def11))
        return false;
      if (this.def11 != that.def11)
        return false;
    }

    boolean this_present_def12 = true;
    boolean that_present_def12 = true;
    if (this_present_def12 || that_present_def12) {
      if (!(this_present_def12 && that_present_def12))
        return false;
      if (this.def12 != that.def12)
        return false;
    }

    boolean this_present_def13 = true;
    boolean that_present_def13 = true;
    if (this_present_def13 || that_present_def13) {
      if (!(this_present_def13 && that_present_def13))
        return false;
      if (this.def13 != that.def13)
        return false;
    }

    boolean this_present_def14 = true;
    boolean that_present_def14 = true;
    if (this_present_def14 || that_present_def14) {
      if (!(this_present_def14 && that_present_def14))
        return false;
      if (this.def14 != that.def14)
        return false;
    }

    boolean this_present_def15 = true;
    boolean that_present_def15 = true;
    if (this_present_def15 || that_present_def15) {
      if (!(this_present_def15 && that_present_def15))
        return false;
      if (this.def15 != that.def15)
        return false;
    }

    boolean this_present_def16 = true;
    boolean that_present_def16 = true;
    if (this_present_def16 || that_present_def16) {
      if (!(this_present_def16 && that_present_def16))
        return false;
      if (this.def16 != that.def16)
        return false;
    }

    boolean this_present_def17 = true;
    boolean that_present_def17 = true;
    if (this_present_def17 || that_present_def17) {
      if (!(this_present_def17 && that_present_def17))
        return false;
      if (this.def17 != that.def17)
        return false;
    }

    boolean this_present_def18 = true;
    boolean that_present_def18 = true;
    if (this_present_def18 || that_present_def18) {
      if (!(this_present_def18 && that_present_def18))
        return false;
      if (this.def18 != that.def18)
        return false;
    }

    boolean this_present_def19 = true;
    boolean that_present_def19 = true;
    if (this_present_def19 || that_present_def19) {
      if (!(this_present_def19 && that_present_def19))
        return false;
      if (this.def19 != that.def19)
        return false;
    }

    boolean this_present_def20 = true;
    boolean that_present_def20 = true;
    if (this_present_def20 || that_present_def20) {
      if (!(this_present_def20 && that_present_def20))
        return false;
      if (this.def20 != that.def20)
        return false;
    }

    boolean this_present_def21 = true;
    boolean that_present_def21 = true;
    if (this_present_def21 || that_present_def21) {
      if (!(this_present_def21 && that_present_def21))
        return false;
      if (this.def21 != that.def21)
        return false;
    }

    boolean this_present_def22 = true;
    boolean that_present_def22 = true;
    if (this_present_def22 || that_present_def22) {
      if (!(this_present_def22 && that_present_def22))
        return false;
      if (this.def22 != that.def22)
        return false;
    }

    boolean this_present_def23 = true;
    boolean that_present_def23 = true;
    if (this_present_def23 || that_present_def23) {
      if (!(this_present_def23 && that_present_def23))
        return false;
      if (this.def23 != that.def23)
        return false;
    }

    boolean this_present_def24 = true;
    boolean that_present_def24 = true;
    if (this_present_def24 || that_present_def24) {
      if (!(this_present_def24 && that_present_def24))
        return false;
      if (this.def24 != that.def24)
        return false;
    }

    boolean this_present_def25 = true;
    boolean that_present_def25 = true;
    if (this_present_def25 || that_present_def25) {
      if (!(this_present_def25 && that_present_def25))
        return false;
      if (this.def25 != that.def25)
        return false;
    }

    boolean this_present_def26 = true;
    boolean that_present_def26 = true;
    if (this_present_def26 || that_present_def26) {
      if (!(this_present_def26 && that_present_def26))
        return false;
      if (this.def26 != that.def26)
        return false;
    }

    boolean this_present_def27 = true;
    boolean that_present_def27 = true;
    if (this_present_def27 || that_present_def27) {
      if (!(this_present_def27 && that_present_def27))
        return false;
      if (this.def27 != that.def27)
        return false;
    }

    boolean this_present_def28 = true;
    boolean that_present_def28 = true;
    if (this_present_def28 || that_present_def28) {
      if (!(this_present_def28 && that_present_def28))
        return false;
      if (this.def28 != that.def28)
        return false;
    }

    boolean this_present_def29 = true;
    boolean that_present_def29 = true;
    if (this_present_def29 || that_present_def29) {
      if (!(this_present_def29 && that_present_def29))
        return false;
      if (this.def29 != that.def29)
        return false;
    }

    boolean this_present_def30 = true;
    boolean that_present_def30 = true;
    if (this_present_def30 || that_present_def30) {
      if (!(this_present_def30 && that_present_def30))
        return false;
      if (this.def30 != that.def30)
        return false;
    }

    boolean this_present_def31 = true;
    boolean that_present_def31 = true;
    if (this_present_def31 || that_present_def31) {
      if (!(this_present_def31 && that_present_def31))
        return false;
      if (this.def31 != that.def31)
        return false;
    }

    boolean this_present_def32 = true;
    boolean that_present_def32 = true;
    if (this_present_def32 || that_present_def32) {
      if (!(this_present_def32 && that_present_def32))
        return false;
      if (this.def32 != that.def32)
        return false;
    }

    boolean this_present_def33 = true;
    boolean that_present_def33 = true;
    if (this_present_def33 || that_present_def33) {
      if (!(this_present_def33 && that_present_def33))
        return false;
      if (this.def33 != that.def33)
        return false;
    }

    boolean this_present_def34 = true;
    boolean that_present_def34 = true;
    if (this_present_def34 || that_present_def34) {
      if (!(this_present_def34 && that_present_def34))
        return false;
      if (this.def34 != that.def34)
        return false;
    }

    boolean this_present_def35 = true;
    boolean that_present_def35 = true;
    if (this_present_def35 || that_present_def35) {
      if (!(this_present_def35 && that_present_def35))
        return false;
      if (this.def35 != that.def35)
        return false;
    }

    boolean this_present_def36 = true;
    boolean that_present_def36 = true;
    if (this_present_def36 || that_present_def36) {
      if (!(this_present_def36 && that_present_def36))
        return false;
      if (this.def36 != that.def36)
        return false;
    }

    boolean this_present_def37 = true;
    boolean that_present_def37 = true;
    if (this_present_def37 || that_present_def37) {
      if (!(this_present_def37 && that_present_def37))
        return false;
      if (this.def37 != that.def37)
        return false;
    }

    boolean this_present_def38 = true;
    boolean that_present_def38 = true;
    if (this_present_def38 || that_present_def38) {
      if (!(this_present_def38 && that_present_def38))
        return false;
      if (this.def38 != that.def38)
        return false;
    }

    boolean this_present_def39 = true;
    boolean that_present_def39 = true;
    if (this_present_def39 || that_present_def39) {
      if (!(this_present_def39 && that_present_def39))
        return false;
      if (this.def39 != that.def39)
        return false;
    }

    boolean this_present_def40 = true;
    boolean that_present_def40 = true;
    if (this_present_def40 || that_present_def40) {
      if (!(this_present_def40 && that_present_def40))
        return false;
      if (this.def40 != that.def40)
        return false;
    }

    boolean this_present_def41 = true;
    boolean that_present_def41 = true;
    if (this_present_def41 || that_present_def41) {
      if (!(this_present_def41 && that_present_def41))
        return false;
      if (this.def41 != that.def41)
        return false;
    }

    boolean this_present_def42 = true;
    boolean that_present_def42 = true;
    if (this_present_def42 || that_present_def42) {
      if (!(this_present_def42 && that_present_def42))
        return false;
      if (this.def42 != that.def42)
        return false;
    }

    boolean this_present_def43 = true;
    boolean that_present_def43 = true;
    if (this_present_def43 || that_present_def43) {
      if (!(this_present_def43 && that_present_def43))
        return false;
      if (this.def43 != that.def43)
        return false;
    }

    boolean this_present_def44 = true;
    boolean that_present_def44 = true;
    if (this_present_def44 || that_present_def44) {
      if (!(this_present_def44 && that_present_def44))
        return false;
      if (this.def44 != that.def44)
        return false;
    }

    boolean this_present_def45 = true;
    boolean that_present_def45 = true;
    if (this_present_def45 || that_present_def45) {
      if (!(this_present_def45 && that_present_def45))
        return false;
      if (this.def45 != that.def45)
        return false;
    }

    boolean this_present_def46 = true;
    boolean that_present_def46 = true;
    if (this_present_def46 || that_present_def46) {
      if (!(this_present_def46 && that_present_def46))
        return false;
      if (this.def46 != that.def46)
        return false;
    }

    boolean this_present_def47 = true;
    boolean that_present_def47 = true;
    if (this_present_def47 || that_present_def47) {
      if (!(this_present_def47 && that_present_def47))
        return false;
      if (this.def47 != that.def47)
        return false;
    }

    boolean this_present_def48 = true;
    boolean that_present_def48 = true;
    if (this_present_def48 || that_present_def48) {
      if (!(this_present_def48 && that_present_def48))
        return false;
      if (this.def48 != that.def48)
        return false;
    }

    boolean this_present_def49 = true;
    boolean that_present_def49 = true;
    if (this_present_def49 || that_present_def49) {
      if (!(this_present_def49 && that_present_def49))
        return false;
      if (this.def49 != that.def49)
        return false;
    }

    boolean this_present_def50 = true;
    boolean that_present_def50 = true;
    if (this_present_def50 || that_present_def50) {
      if (!(this_present_def50 && that_present_def50))
        return false;
      if (this.def50 != that.def50)
        return false;
    }

    boolean this_present_def51 = true;
    boolean that_present_def51 = true;
    if (this_present_def51 || that_present_def51) {
      if (!(this_present_def51 && that_present_def51))
        return false;
      if (this.def51 != that.def51)
        return false;
    }

    boolean this_present_def52 = true;
    boolean that_present_def52 = true;
    if (this_present_def52 || that_present_def52) {
      if (!(this_present_def52 && that_present_def52))
        return false;
      if (this.def52 != that.def52)
        return false;
    }

    boolean this_present_def53 = true;
    boolean that_present_def53 = true;
    if (this_present_def53 || that_present_def53) {
      if (!(this_present_def53 && that_present_def53))
        return false;
      if (this.def53 != that.def53)
        return false;
    }

    boolean this_present_def54 = true;
    boolean that_present_def54 = true;
    if (this_present_def54 || that_present_def54) {
      if (!(this_present_def54 && that_present_def54))
        return false;
      if (this.def54 != that.def54)
        return false;
    }

    boolean this_present_def55 = true;
    boolean that_present_def55 = true;
    if (this_present_def55 || that_present_def55) {
      if (!(this_present_def55 && that_present_def55))
        return false;
      if (this.def55 != that.def55)
        return false;
    }

    boolean this_present_def56 = true;
    boolean that_present_def56 = true;
    if (this_present_def56 || that_present_def56) {
      if (!(this_present_def56 && that_present_def56))
        return false;
      if (this.def56 != that.def56)
        return false;
    }

    boolean this_present_def57 = true;
    boolean that_present_def57 = true;
    if (this_present_def57 || that_present_def57) {
      if (!(this_present_def57 && that_present_def57))
        return false;
      if (this.def57 != that.def57)
        return false;
    }

    boolean this_present_def58 = true;
    boolean that_present_def58 = true;
    if (this_present_def58 || that_present_def58) {
      if (!(this_present_def58 && that_present_def58))
        return false;
      if (this.def58 != that.def58)
        return false;
    }

    boolean this_present_def59 = true;
    boolean that_present_def59 = true;
    if (this_present_def59 || that_present_def59) {
      if (!(this_present_def59 && that_present_def59))
        return false;
      if (this.def59 != that.def59)
        return false;
    }

    boolean this_present_def60 = true;
    boolean that_present_def60 = true;
    if (this_present_def60 || that_present_def60) {
      if (!(this_present_def60 && that_present_def60))
        return false;
      if (this.def60 != that.def60)
        return false;
    }

    boolean this_present_def61 = true;
    boolean that_present_def61 = true;
    if (this_present_def61 || that_present_def61) {
      if (!(this_present_def61 && that_present_def61))
        return false;
      if (this.def61 != that.def61)
        return false;
    }

    boolean this_present_def62 = true;
    boolean that_present_def62 = true;
    if (this_present_def62 || that_present_def62) {
      if (!(this_present_def62 && that_present_def62))
        return false;
      if (this.def62 != that.def62)
        return false;
    }

    boolean this_present_def63 = true;
    boolean that_present_def63 = true;
    if (this_present_def63 || that_present_def63) {
      if (!(this_present_def63 && that_present_def63))
        return false;
      if (this.def63 != that.def63)
        return false;
    }

    boolean this_present_def64 = true;
    boolean that_present_def64 = true;
    if (this_present_def64 || that_present_def64) {
      if (!(this_present_def64 && that_present_def64))
        return false;
      if (this.def64 != that.def64)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + def1;

    hashCode = hashCode * 8191 + def2;

    hashCode = hashCode * 8191 + def3;

    hashCode = hashCode * 8191 + def4;

    hashCode = hashCode * 8191 + def5;

    hashCode = hashCode * 8191 + def6;

    hashCode = hashCode * 8191 + def7;

    hashCode = hashCode * 8191 + def8;

    hashCode = hashCode * 8191 + def9;

    hashCode = hashCode * 8191 + def10;

    hashCode = hashCode * 8191 + def11;

    hashCode = hashCode * 8191 + def12;

    hashCode = hashCode * 8191 + def13;

    hashCode = hashCode * 8191 + def14;

    hashCode = hashCode * 8191 + def15;

    hashCode = hashCode * 8191 + def16;

    hashCode = hashCode * 8191 + def17;

    hashCode = hashCode * 8191 + def18;

    hashCode = hashCode * 8191 + def19;

    hashCode = hashCode * 8191 + def20;

    hashCode = hashCode * 8191 + def21;

    hashCode = hashCode * 8191 + def22;

    hashCode = hashCode * 8191 + def23;

    hashCode = hashCode * 8191 + def24;

    hashCode = hashCode * 8191 + def25;

    hashCode = hashCode * 8191 + def26;

    hashCode = hashCode * 8191 + def27;

    hashCode = hashCode * 8191 + def28;

    hashCode = hashCode * 8191 + def29;

    hashCode = hashCode * 8191 + def30;

    hashCode = hashCode * 8191 + def31;

    hashCode = hashCode * 8191 + def32;

    hashCode = hashCode * 8191 + def33;

    hashCode = hashCode * 8191 + def34;

    hashCode = hashCode * 8191 + def35;

    hashCode = hashCode * 8191 + def36;

    hashCode = hashCode * 8191 + def37;

    hashCode = hashCode * 8191 + def38;

    hashCode = hashCode * 8191 + def39;

    hashCode = hashCode * 8191 + def40;

    hashCode = hashCode * 8191 + def41;

    hashCode = hashCode * 8191 + def42;

    hashCode = hashCode * 8191 + def43;

    hashCode = hashCode * 8191 + def44;

    hashCode = hashCode * 8191 + def45;

    hashCode = hashCode * 8191 + def46;

    hashCode = hashCode * 8191 + def47;

    hashCode = hashCode * 8191 + def48;

    hashCode = hashCode * 8191 + def49;

    hashCode = hashCode * 8191 + def50;

    hashCode = hashCode * 8191 + def51;

    hashCode = hashCode * 8191 + def52;

    hashCode = hashCode * 8191 + def53;

    hashCode = hashCode * 8191 + def54;

    hashCode = hashCode * 8191 + def55;

    hashCode = hashCode * 8191 + def56;

    hashCode = hashCode * 8191 + def57;

    hashCode = hashCode * 8191 + def58;

    hashCode = hashCode * 8191 + def59;

    hashCode = hashCode * 8191 + def60;

    hashCode = hashCode * 8191 + def61;

    hashCode = hashCode * 8191 + def62;

    hashCode = hashCode * 8191 + def63;

    hashCode = hashCode * 8191 + def64;

    return hashCode;
  }

  @Override
  public int compareTo(Opt64 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDef1()).compareTo(other.isSetDef1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def1, other.def1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef2()).compareTo(other.isSetDef2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def2, other.def2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef3()).compareTo(other.isSetDef3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def3, other.def3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef4()).compareTo(other.isSetDef4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def4, other.def4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef5()).compareTo(other.isSetDef5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def5, other.def5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef6()).compareTo(other.isSetDef6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def6, other.def6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef7()).compareTo(other.isSetDef7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def7, other.def7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef8()).compareTo(other.isSetDef8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def8, other.def8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef9()).compareTo(other.isSetDef9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def9, other.def9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef10()).compareTo(other.isSetDef10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def10, other.def10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef11()).compareTo(other.isSetDef11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def11, other.def11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef12()).compareTo(other.isSetDef12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def12, other.def12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef13()).compareTo(other.isSetDef13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def13, other.def13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef14()).compareTo(other.isSetDef14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def14, other.def14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef15()).compareTo(other.isSetDef15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def15, other.def15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef16()).compareTo(other.isSetDef16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def16, other.def16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef17()).compareTo(other.isSetDef17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def17, other.def17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef18()).compareTo(other.isSetDef18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def18, other.def18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef19()).compareTo(other.isSetDef19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def19, other.def19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef20()).compareTo(other.isSetDef20());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef20()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def20, other.def20);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef21()).compareTo(other.isSetDef21());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef21()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def21, other.def21);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef22()).compareTo(other.isSetDef22());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef22()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def22, other.def22);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef23()).compareTo(other.isSetDef23());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef23()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def23, other.def23);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef24()).compareTo(other.isSetDef24());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef24()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def24, other.def24);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef25()).compareTo(other.isSetDef25());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef25()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def25, other.def25);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef26()).compareTo(other.isSetDef26());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef26()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def26, other.def26);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef27()).compareTo(other.isSetDef27());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef27()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def27, other.def27);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef28()).compareTo(other.isSetDef28());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef28()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def28, other.def28);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef29()).compareTo(other.isSetDef29());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef29()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def29, other.def29);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef30()).compareTo(other.isSetDef30());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef30()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def30, other.def30);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef31()).compareTo(other.isSetDef31());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef31()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def31, other.def31);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef32()).compareTo(other.isSetDef32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def32, other.def32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef33()).compareTo(other.isSetDef33());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef33()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def33, other.def33);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef34()).compareTo(other.isSetDef34());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef34()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def34, other.def34);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef35()).compareTo(other.isSetDef35());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef35()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def35, other.def35);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef36()).compareTo(other.isSetDef36());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef36()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def36, other.def36);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef37()).compareTo(other.isSetDef37());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef37()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def37, other.def37);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef38()).compareTo(other.isSetDef38());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef38()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def38, other.def38);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef39()).compareTo(other.isSetDef39());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef39()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def39, other.def39);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef40()).compareTo(other.isSetDef40());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef40()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def40, other.def40);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef41()).compareTo(other.isSetDef41());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef41()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def41, other.def41);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef42()).compareTo(other.isSetDef42());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef42()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def42, other.def42);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef43()).compareTo(other.isSetDef43());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef43()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def43, other.def43);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef44()).compareTo(other.isSetDef44());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef44()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def44, other.def44);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef45()).compareTo(other.isSetDef45());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef45()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def45, other.def45);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef46()).compareTo(other.isSetDef46());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef46()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def46, other.def46);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef47()).compareTo(other.isSetDef47());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef47()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def47, other.def47);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef48()).compareTo(other.isSetDef48());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef48()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def48, other.def48);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef49()).compareTo(other.isSetDef49());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef49()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def49, other.def49);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef50()).compareTo(other.isSetDef50());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef50()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def50, other.def50);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef51()).compareTo(other.isSetDef51());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef51()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def51, other.def51);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef52()).compareTo(other.isSetDef52());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef52()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def52, other.def52);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef53()).compareTo(other.isSetDef53());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef53()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def53, other.def53);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef54()).compareTo(other.isSetDef54());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef54()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def54, other.def54);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef55()).compareTo(other.isSetDef55());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef55()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def55, other.def55);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef56()).compareTo(other.isSetDef56());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef56()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def56, other.def56);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef57()).compareTo(other.isSetDef57());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef57()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def57, other.def57);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef58()).compareTo(other.isSetDef58());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef58()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def58, other.def58);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef59()).compareTo(other.isSetDef59());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef59()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def59, other.def59);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef60()).compareTo(other.isSetDef60());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef60()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def60, other.def60);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef61()).compareTo(other.isSetDef61());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef61()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def61, other.def61);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef62()).compareTo(other.isSetDef62());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef62()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def62, other.def62);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef63()).compareTo(other.isSetDef63());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef63()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def63, other.def63);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef64()).compareTo(other.isSetDef64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def64, other.def64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Opt64(");
    boolean first = true;

    sb.append("def1:");
    sb.append(this.def1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def2:");
    sb.append(this.def2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def3:");
    sb.append(this.def3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def4:");
    sb.append(this.def4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def5:");
    sb.append(this.def5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def6:");
    sb.append(this.def6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def7:");
    sb.append(this.def7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def8:");
    sb.append(this.def8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def9:");
    sb.append(this.def9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def10:");
    sb.append(this.def10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def11:");
    sb.append(this.def11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def12:");
    sb.append(this.def12);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def13:");
    sb.append(this.def13);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def14:");
    sb.append(this.def14);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def15:");
    sb.append(this.def15);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def16:");
    sb.append(this.def16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def17:");
    sb.append(this.def17);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def18:");
    sb.append(this.def18);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def19:");
    sb.append(this.def19);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def20:");
    sb.append(this.def20);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def21:");
    sb.append(this.def21);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def22:");
    sb.append(this.def22);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def23:");
    sb.append(this.def23);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def24:");
    sb.append(this.def24);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def25:");
    sb.append(this.def25);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def26:");
    sb.append(this.def26);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def27:");
    sb.append(this.def27);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def28:");
    sb.append(this.def28);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def29:");
    sb.append(this.def29);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def30:");
    sb.append(this.def30);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def31:");
    sb.append(this.def31);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def32:");
    sb.append(this.def32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def33:");
    sb.append(this.def33);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def34:");
    sb.append(this.def34);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def35:");
    sb.append(this.def35);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def36:");
    sb.append(this.def36);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def37:");
    sb.append(this.def37);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def38:");
    sb.append(this.def38);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def39:");
    sb.append(this.def39);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def40:");
    sb.append(this.def40);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def41:");
    sb.append(this.def41);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def42:");
    sb.append(this.def42);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def43:");
    sb.append(this.def43);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def44:");
    sb.append(this.def44);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def45:");
    sb.append(this.def45);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def46:");
    sb.append(this.def46);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def47:");
    sb.append(this.def47);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def48:");
    sb.append(this.def48);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def49:");
    sb.append(this.def49);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def50:");
    sb.append(this.def50);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def51:");
    sb.append(this.def51);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def52:");
    sb.append(this.def52);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def53:");
    sb.append(this.def53);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def54:");
    sb.append(this.def54);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def55:");
    sb.append(this.def55);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def56:");
    sb.append(this.def56);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def57:");
    sb.append(this.def57);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def58:");
    sb.append(this.def58);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def59:");
    sb.append(this.def59);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def60:");
    sb.append(this.def60);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def61:");
    sb.append(this.def61);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def62:");
    sb.append(this.def62);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def63:");
    sb.append(this.def63);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def64:");
    sb.append(this.def64);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Opt64StandardSchemeFactory implements SchemeFactory {
    public Opt64StandardScheme getScheme() {
      return new Opt64StandardScheme();
    }
  }

  private static class Opt64StandardScheme extends StandardScheme<Opt64> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Opt64 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEF1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def1 = iprot.readI32();
              struct.setDef1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEF2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def2 = iprot.readI32();
              struct.setDef2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEF3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def3 = iprot.readI32();
              struct.setDef3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEF4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def4 = iprot.readI32();
              struct.setDef4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEF5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def5 = iprot.readI32();
              struct.setDef5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEF6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def6 = iprot.readI32();
              struct.setDef6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEF7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def7 = iprot.readI32();
              struct.setDef7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEF8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def8 = iprot.readI32();
              struct.setDef8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEF9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def9 = iprot.readI32();
              struct.setDef9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEF10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def10 = iprot.readI32();
              struct.setDef10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEF11
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def11 = iprot.readI32();
              struct.setDef11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEF12
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def12 = iprot.readI32();
              struct.setDef12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEF13
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def13 = iprot.readI32();
              struct.setDef13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEF14
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def14 = iprot.readI32();
              struct.setDef14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEF15
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def15 = iprot.readI32();
              struct.setDef15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DEF16
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def16 = iprot.readI32();
              struct.setDef16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEF17
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def17 = iprot.readI32();
              struct.setDef17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DEF18
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def18 = iprot.readI32();
              struct.setDef18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DEF19
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def19 = iprot.readI32();
              struct.setDef19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DEF20
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def20 = iprot.readI32();
              struct.setDef20IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEF21
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def21 = iprot.readI32();
              struct.setDef21IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DEF22
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def22 = iprot.readI32();
              struct.setDef22IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DEF23
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def23 = iprot.readI32();
              struct.setDef23IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DEF24
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def24 = iprot.readI32();
              struct.setDef24IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DEF25
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def25 = iprot.readI32();
              struct.setDef25IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DEF26
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def26 = iprot.readI32();
              struct.setDef26IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DEF27
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def27 = iprot.readI32();
              struct.setDef27IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DEF28
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def28 = iprot.readI32();
              struct.setDef28IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DEF29
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def29 = iprot.readI32();
              struct.setDef29IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DEF30
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def30 = iprot.readI32();
              struct.setDef30IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DEF31
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def31 = iprot.readI32();
              struct.setDef31IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DEF32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def32 = iprot.readI32();
              struct.setDef32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DEF33
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def33 = iprot.readI32();
              struct.setDef33IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DEF34
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def34 = iprot.readI32();
              struct.setDef34IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // DEF35
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def35 = iprot.readI32();
              struct.setDef35IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DEF36
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def36 = iprot.readI32();
              struct.setDef36IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // DEF37
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def37 = iprot.readI32();
              struct.setDef37IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // DEF38
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def38 = iprot.readI32();
              struct.setDef38IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // DEF39
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def39 = iprot.readI32();
              struct.setDef39IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DEF40
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def40 = iprot.readI32();
              struct.setDef40IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // DEF41
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def41 = iprot.readI32();
              struct.setDef41IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // DEF42
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def42 = iprot.readI32();
              struct.setDef42IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // DEF43
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def43 = iprot.readI32();
              struct.setDef43IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // DEF44
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def44 = iprot.readI32();
              struct.setDef44IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // DEF45
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def45 = iprot.readI32();
              struct.setDef45IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // DEF46
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def46 = iprot.readI32();
              struct.setDef46IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // DEF47
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def47 = iprot.readI32();
              struct.setDef47IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // DEF48
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def48 = iprot.readI32();
              struct.setDef48IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // DEF49
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def49 = iprot.readI32();
              struct.setDef49IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // DEF50
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def50 = iprot.readI32();
              struct.setDef50IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // DEF51
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def51 = iprot.readI32();
              struct.setDef51IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // DEF52
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def52 = iprot.readI32();
              struct.setDef52IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // DEF53
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def53 = iprot.readI32();
              struct.setDef53IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // DEF54
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def54 = iprot.readI32();
              struct.setDef54IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // DEF55
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def55 = iprot.readI32();
              struct.setDef55IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DEF56
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def56 = iprot.readI32();
              struct.setDef56IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // DEF57
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def57 = iprot.readI32();
              struct.setDef57IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // DEF58
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def58 = iprot.readI32();
              struct.setDef58IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // DEF59
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def59 = iprot.readI32();
              struct.setDef59IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // DEF60
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def60 = iprot.readI32();
              struct.setDef60IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // DEF61
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def61 = iprot.readI32();
              struct.setDef61IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // DEF62
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def62 = iprot.readI32();
              struct.setDef62IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // DEF63
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def63 = iprot.readI32();
              struct.setDef63IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // DEF64
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def64 = iprot.readI32();
              struct.setDef64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Opt64 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEF1_FIELD_DESC);
      oprot.writeI32(struct.def1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF2_FIELD_DESC);
      oprot.writeI32(struct.def2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF3_FIELD_DESC);
      oprot.writeI32(struct.def3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF4_FIELD_DESC);
      oprot.writeI32(struct.def4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF5_FIELD_DESC);
      oprot.writeI32(struct.def5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF6_FIELD_DESC);
      oprot.writeI32(struct.def6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF7_FIELD_DESC);
      oprot.writeI32(struct.def7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF8_FIELD_DESC);
      oprot.writeI32(struct.def8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF9_FIELD_DESC);
      oprot.writeI32(struct.def9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF10_FIELD_DESC);
      oprot.writeI32(struct.def10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF11_FIELD_DESC);
      oprot.writeI32(struct.def11);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF12_FIELD_DESC);
      oprot.writeI32(struct.def12);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF13_FIELD_DESC);
      oprot.writeI32(struct.def13);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF14_FIELD_DESC);
      oprot.writeI32(struct.def14);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF15_FIELD_DESC);
      oprot.writeI32(struct.def15);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF16_FIELD_DESC);
      oprot.writeI32(struct.def16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF17_FIELD_DESC);
      oprot.writeI32(struct.def17);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF18_FIELD_DESC);
      oprot.writeI32(struct.def18);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF19_FIELD_DESC);
      oprot.writeI32(struct.def19);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF20_FIELD_DESC);
      oprot.writeI32(struct.def20);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF21_FIELD_DESC);
      oprot.writeI32(struct.def21);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF22_FIELD_DESC);
      oprot.writeI32(struct.def22);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF23_FIELD_DESC);
      oprot.writeI32(struct.def23);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF24_FIELD_DESC);
      oprot.writeI32(struct.def24);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF25_FIELD_DESC);
      oprot.writeI32(struct.def25);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF26_FIELD_DESC);
      oprot.writeI32(struct.def26);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF27_FIELD_DESC);
      oprot.writeI32(struct.def27);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF28_FIELD_DESC);
      oprot.writeI32(struct.def28);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF29_FIELD_DESC);
      oprot.writeI32(struct.def29);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF30_FIELD_DESC);
      oprot.writeI32(struct.def30);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF31_FIELD_DESC);
      oprot.writeI32(struct.def31);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF32_FIELD_DESC);
      oprot.writeI32(struct.def32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF33_FIELD_DESC);
      oprot.writeI32(struct.def33);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF34_FIELD_DESC);
      oprot.writeI32(struct.def34);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF35_FIELD_DESC);
      oprot.writeI32(struct.def35);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF36_FIELD_DESC);
      oprot.writeI32(struct.def36);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF37_FIELD_DESC);
      oprot.writeI32(struct.def37);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF38_FIELD_DESC);
      oprot.writeI32(struct.def38);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF39_FIELD_DESC);
      oprot.writeI32(struct.def39);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF40_FIELD_DESC);
      oprot.writeI32(struct.def40);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF41_FIELD_DESC);
      oprot.writeI32(struct.def41);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF42_FIELD_DESC);
      oprot.writeI32(struct.def42);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF43_FIELD_DESC);
      oprot.writeI32(struct.def43);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF44_FIELD_DESC);
      oprot.writeI32(struct.def44);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF45_FIELD_DESC);
      oprot.writeI32(struct.def45);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF46_FIELD_DESC);
      oprot.writeI32(struct.def46);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF47_FIELD_DESC);
      oprot.writeI32(struct.def47);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF48_FIELD_DESC);
      oprot.writeI32(struct.def48);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF49_FIELD_DESC);
      oprot.writeI32(struct.def49);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF50_FIELD_DESC);
      oprot.writeI32(struct.def50);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF51_FIELD_DESC);
      oprot.writeI32(struct.def51);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF52_FIELD_DESC);
      oprot.writeI32(struct.def52);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF53_FIELD_DESC);
      oprot.writeI32(struct.def53);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF54_FIELD_DESC);
      oprot.writeI32(struct.def54);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF55_FIELD_DESC);
      oprot.writeI32(struct.def55);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF56_FIELD_DESC);
      oprot.writeI32(struct.def56);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF57_FIELD_DESC);
      oprot.writeI32(struct.def57);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF58_FIELD_DESC);
      oprot.writeI32(struct.def58);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF59_FIELD_DESC);
      oprot.writeI32(struct.def59);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF60_FIELD_DESC);
      oprot.writeI32(struct.def60);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF61_FIELD_DESC);
      oprot.writeI32(struct.def61);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF62_FIELD_DESC);
      oprot.writeI32(struct.def62);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF63_FIELD_DESC);
      oprot.writeI32(struct.def63);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF64_FIELD_DESC);
      oprot.writeI32(struct.def64);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Opt64TupleSchemeFactory implements SchemeFactory {
    public Opt64TupleScheme getScheme() {
      return new Opt64TupleScheme();
    }
  }

  private static class Opt64TupleScheme extends TupleScheme<Opt64> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Opt64 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDef1()) {
        optionals.set(0);
      }
      if (struct.isSetDef2()) {
        optionals.set(1);
      }
      if (struct.isSetDef3()) {
        optionals.set(2);
      }
      if (struct.isSetDef4()) {
        optionals.set(3);
      }
      if (struct.isSetDef5()) {
        optionals.set(4);
      }
      if (struct.isSetDef6()) {
        optionals.set(5);
      }
      if (struct.isSetDef7()) {
        optionals.set(6);
      }
      if (struct.isSetDef8()) {
        optionals.set(7);
      }
      if (struct.isSetDef9()) {
        optionals.set(8);
      }
      if (struct.isSetDef10()) {
        optionals.set(9);
      }
      if (struct.isSetDef11()) {
        optionals.set(10);
      }
      if (struct.isSetDef12()) {
        optionals.set(11);
      }
      if (struct.isSetDef13()) {
        optionals.set(12);
      }
      if (struct.isSetDef14()) {
        optionals.set(13);
      }
      if (struct.isSetDef15()) {
        optionals.set(14);
      }
      if (struct.isSetDef16()) {
        optionals.set(15);
      }
      if (struct.isSetDef17()) {
        optionals.set(16);
      }
      if (struct.isSetDef18()) {
        optionals.set(17);
      }
      if (struct.isSetDef19()) {
        optionals.set(18);
      }
      if (struct.isSetDef20()) {
        optionals.set(19);
      }
      if (struct.isSetDef21()) {
        optionals.set(20);
      }
      if (struct.isSetDef22()) {
        optionals.set(21);
      }
      if (struct.isSetDef23()) {
        optionals.set(22);
      }
      if (struct.isSetDef24()) {
        optionals.set(23);
      }
      if (struct.isSetDef25()) {
        optionals.set(24);
      }
      if (struct.isSetDef26()) {
        optionals.set(25);
      }
      if (struct.isSetDef27()) {
        optionals.set(26);
      }
      if (struct.isSetDef28()) {
        optionals.set(27);
      }
      if (struct.isSetDef29()) {
        optionals.set(28);
      }
      if (struct.isSetDef30()) {
        optionals.set(29);
      }
      if (struct.isSetDef31()) {
        optionals.set(30);
      }
      if (struct.isSetDef32()) {
        optionals.set(31);
      }
      if (struct.isSetDef33()) {
        optionals.set(32);
      }
      if (struct.isSetDef34()) {
        optionals.set(33);
      }
      if (struct.isSetDef35()) {
        optionals.set(34);
      }
      if (struct.isSetDef36()) {
        optionals.set(35);
      }
      if (struct.isSetDef37()) {
        optionals.set(36);
      }
      if (struct.isSetDef38()) {
        optionals.set(37);
      }
      if (struct.isSetDef39()) {
        optionals.set(38);
      }
      if (struct.isSetDef40()) {
        optionals.set(39);
      }
      if (struct.isSetDef41()) {
        optionals.set(40);
      }
      if (struct.isSetDef42()) {
        optionals.set(41);
      }
      if (struct.isSetDef43()) {
        optionals.set(42);
      }
      if (struct.isSetDef44()) {
        optionals.set(43);
      }
      if (struct.isSetDef45()) {
        optionals.set(44);
      }
      if (struct.isSetDef46()) {
        optionals.set(45);
      }
      if (struct.isSetDef47()) {
        optionals.set(46);
      }
      if (struct.isSetDef48()) {
        optionals.set(47);
      }
      if (struct.isSetDef49()) {
        optionals.set(48);
      }
      if (struct.isSetDef50()) {
        optionals.set(49);
      }
      if (struct.isSetDef51()) {
        optionals.set(50);
      }
      if (struct.isSetDef52()) {
        optionals.set(51);
      }
      if (struct.isSetDef53()) {
        optionals.set(52);
      }
      if (struct.isSetDef54()) {
        optionals.set(53);
      }
      if (struct.isSetDef55()) {
        optionals.set(54);
      }
      if (struct.isSetDef56()) {
        optionals.set(55);
      }
      if (struct.isSetDef57()) {
        optionals.set(56);
      }
      if (struct.isSetDef58()) {
        optionals.set(57);
      }
      if (struct.isSetDef59()) {
        optionals.set(58);
      }
      if (struct.isSetDef60()) {
        optionals.set(59);
      }
      if (struct.isSetDef61()) {
        optionals.set(60);
      }
      if (struct.isSetDef62()) {
        optionals.set(61);
      }
      if (struct.isSetDef63()) {
        optionals.set(62);
      }
      if (struct.isSetDef64()) {
        optionals.set(63);
      }
      oprot.writeBitSet(optionals, 64);
      if (struct.isSetDef1()) {
        oprot.writeI32(struct.def1);
      }
      if (struct.isSetDef2()) {
        oprot.writeI32(struct.def2);
      }
      if (struct.isSetDef3()) {
        oprot.writeI32(struct.def3);
      }
      if (struct.isSetDef4()) {
        oprot.writeI32(struct.def4);
      }
      if (struct.isSetDef5()) {
        oprot.writeI32(struct.def5);
      }
      if (struct.isSetDef6()) {
        oprot.writeI32(struct.def6);
      }
      if (struct.isSetDef7()) {
        oprot.writeI32(struct.def7);
      }
      if (struct.isSetDef8()) {
        oprot.writeI32(struct.def8);
      }
      if (struct.isSetDef9()) {
        oprot.writeI32(struct.def9);
      }
      if (struct.isSetDef10()) {
        oprot.writeI32(struct.def10);
      }
      if (struct.isSetDef11()) {
        oprot.writeI32(struct.def11);
      }
      if (struct.isSetDef12()) {
        oprot.writeI32(struct.def12);
      }
      if (struct.isSetDef13()) {
        oprot.writeI32(struct.def13);
      }
      if (struct.isSetDef14()) {
        oprot.writeI32(struct.def14);
      }
      if (struct.isSetDef15()) {
        oprot.writeI32(struct.def15);
      }
      if (struct.isSetDef16()) {
        oprot.writeI32(struct.def16);
      }
      if (struct.isSetDef17()) {
        oprot.writeI32(struct.def17);
      }
      if (struct.isSetDef18()) {
        oprot.writeI32(struct.def18);
      }
      if (struct.isSetDef19()) {
        oprot.writeI32(struct.def19);
      }
      if (struct.isSetDef20()) {
        oprot.writeI32(struct.def20);
      }
      if (struct.isSetDef21()) {
        oprot.writeI32(struct.def21);
      }
      if (struct.isSetDef22()) {
        oprot.writeI32(struct.def22);
      }
      if (struct.isSetDef23()) {
        oprot.writeI32(struct.def23);
      }
      if (struct.isSetDef24()) {
        oprot.writeI32(struct.def24);
      }
      if (struct.isSetDef25()) {
        oprot.writeI32(struct.def25);
      }
      if (struct.isSetDef26()) {
        oprot.writeI32(struct.def26);
      }
      if (struct.isSetDef27()) {
        oprot.writeI32(struct.def27);
      }
      if (struct.isSetDef28()) {
        oprot.writeI32(struct.def28);
      }
      if (struct.isSetDef29()) {
        oprot.writeI32(struct.def29);
      }
      if (struct.isSetDef30()) {
        oprot.writeI32(struct.def30);
      }
      if (struct.isSetDef31()) {
        oprot.writeI32(struct.def31);
      }
      if (struct.isSetDef32()) {
        oprot.writeI32(struct.def32);
      }
      if (struct.isSetDef33()) {
        oprot.writeI32(struct.def33);
      }
      if (struct.isSetDef34()) {
        oprot.writeI32(struct.def34);
      }
      if (struct.isSetDef35()) {
        oprot.writeI32(struct.def35);
      }
      if (struct.isSetDef36()) {
        oprot.writeI32(struct.def36);
      }
      if (struct.isSetDef37()) {
        oprot.writeI32(struct.def37);
      }
      if (struct.isSetDef38()) {
        oprot.writeI32(struct.def38);
      }
      if (struct.isSetDef39()) {
        oprot.writeI32(struct.def39);
      }
      if (struct.isSetDef40()) {
        oprot.writeI32(struct.def40);
      }
      if (struct.isSetDef41()) {
        oprot.writeI32(struct.def41);
      }
      if (struct.isSetDef42()) {
        oprot.writeI32(struct.def42);
      }
      if (struct.isSetDef43()) {
        oprot.writeI32(struct.def43);
      }
      if (struct.isSetDef44()) {
        oprot.writeI32(struct.def44);
      }
      if (struct.isSetDef45()) {
        oprot.writeI32(struct.def45);
      }
      if (struct.isSetDef46()) {
        oprot.writeI32(struct.def46);
      }
      if (struct.isSetDef47()) {
        oprot.writeI32(struct.def47);
      }
      if (struct.isSetDef48()) {
        oprot.writeI32(struct.def48);
      }
      if (struct.isSetDef49()) {
        oprot.writeI32(struct.def49);
      }
      if (struct.isSetDef50()) {
        oprot.writeI32(struct.def50);
      }
      if (struct.isSetDef51()) {
        oprot.writeI32(struct.def51);
      }
      if (struct.isSetDef52()) {
        oprot.writeI32(struct.def52);
      }
      if (struct.isSetDef53()) {
        oprot.writeI32(struct.def53);
      }
      if (struct.isSetDef54()) {
        oprot.writeI32(struct.def54);
      }
      if (struct.isSetDef55()) {
        oprot.writeI32(struct.def55);
      }
      if (struct.isSetDef56()) {
        oprot.writeI32(struct.def56);
      }
      if (struct.isSetDef57()) {
        oprot.writeI32(struct.def57);
      }
      if (struct.isSetDef58()) {
        oprot.writeI32(struct.def58);
      }
      if (struct.isSetDef59()) {
        oprot.writeI32(struct.def59);
      }
      if (struct.isSetDef60()) {
        oprot.writeI32(struct.def60);
      }
      if (struct.isSetDef61()) {
        oprot.writeI32(struct.def61);
      }
      if (struct.isSetDef62()) {
        oprot.writeI32(struct.def62);
      }
      if (struct.isSetDef63()) {
        oprot.writeI32(struct.def63);
      }
      if (struct.isSetDef64()) {
        oprot.writeI32(struct.def64);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Opt64 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(64);
      if (incoming.get(0)) {
        struct.def1 = iprot.readI32();
        struct.setDef1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.def2 = iprot.readI32();
        struct.setDef2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.def3 = iprot.readI32();
        struct.setDef3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.def4 = iprot.readI32();
        struct.setDef4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.def5 = iprot.readI32();
        struct.setDef5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.def6 = iprot.readI32();
        struct.setDef6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.def7 = iprot.readI32();
        struct.setDef7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.def8 = iprot.readI32();
        struct.setDef8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.def9 = iprot.readI32();
        struct.setDef9IsSet(true);
      }
      if (incoming.get(9)) {
        struct.def10 = iprot.readI32();
        struct.setDef10IsSet(true);
      }
      if (incoming.get(10)) {
        struct.def11 = iprot.readI32();
        struct.setDef11IsSet(true);
      }
      if (incoming.get(11)) {
        struct.def12 = iprot.readI32();
        struct.setDef12IsSet(true);
      }
      if (incoming.get(12)) {
        struct.def13 = iprot.readI32();
        struct.setDef13IsSet(true);
      }
      if (incoming.get(13)) {
        struct.def14 = iprot.readI32();
        struct.setDef14IsSet(true);
      }
      if (incoming.get(14)) {
        struct.def15 = iprot.readI32();
        struct.setDef15IsSet(true);
      }
      if (incoming.get(15)) {
        struct.def16 = iprot.readI32();
        struct.setDef16IsSet(true);
      }
      if (incoming.get(16)) {
        struct.def17 = iprot.readI32();
        struct.setDef17IsSet(true);
      }
      if (incoming.get(17)) {
        struct.def18 = iprot.readI32();
        struct.setDef18IsSet(true);
      }
      if (incoming.get(18)) {
        struct.def19 = iprot.readI32();
        struct.setDef19IsSet(true);
      }
      if (incoming.get(19)) {
        struct.def20 = iprot.readI32();
        struct.setDef20IsSet(true);
      }
      if (incoming.get(20)) {
        struct.def21 = iprot.readI32();
        struct.setDef21IsSet(true);
      }
      if (incoming.get(21)) {
        struct.def22 = iprot.readI32();
        struct.setDef22IsSet(true);
      }
      if (incoming.get(22)) {
        struct.def23 = iprot.readI32();
        struct.setDef23IsSet(true);
      }
      if (incoming.get(23)) {
        struct.def24 = iprot.readI32();
        struct.setDef24IsSet(true);
      }
      if (incoming.get(24)) {
        struct.def25 = iprot.readI32();
        struct.setDef25IsSet(true);
      }
      if (incoming.get(25)) {
        struct.def26 = iprot.readI32();
        struct.setDef26IsSet(true);
      }
      if (incoming.get(26)) {
        struct.def27 = iprot.readI32();
        struct.setDef27IsSet(true);
      }
      if (incoming.get(27)) {
        struct.def28 = iprot.readI32();
        struct.setDef28IsSet(true);
      }
      if (incoming.get(28)) {
        struct.def29 = iprot.readI32();
        struct.setDef29IsSet(true);
      }
      if (incoming.get(29)) {
        struct.def30 = iprot.readI32();
        struct.setDef30IsSet(true);
      }
      if (incoming.get(30)) {
        struct.def31 = iprot.readI32();
        struct.setDef31IsSet(true);
      }
      if (incoming.get(31)) {
        struct.def32 = iprot.readI32();
        struct.setDef32IsSet(true);
      }
      if (incoming.get(32)) {
        struct.def33 = iprot.readI32();
        struct.setDef33IsSet(true);
      }
      if (incoming.get(33)) {
        struct.def34 = iprot.readI32();
        struct.setDef34IsSet(true);
      }
      if (incoming.get(34)) {
        struct.def35 = iprot.readI32();
        struct.setDef35IsSet(true);
      }
      if (incoming.get(35)) {
        struct.def36 = iprot.readI32();
        struct.setDef36IsSet(true);
      }
      if (incoming.get(36)) {
        struct.def37 = iprot.readI32();
        struct.setDef37IsSet(true);
      }
      if (incoming.get(37)) {
        struct.def38 = iprot.readI32();
        struct.setDef38IsSet(true);
      }
      if (incoming.get(38)) {
        struct.def39 = iprot.readI32();
        struct.setDef39IsSet(true);
      }
      if (incoming.get(39)) {
        struct.def40 = iprot.readI32();
        struct.setDef40IsSet(true);
      }
      if (incoming.get(40)) {
        struct.def41 = iprot.readI32();
        struct.setDef41IsSet(true);
      }
      if (incoming.get(41)) {
        struct.def42 = iprot.readI32();
        struct.setDef42IsSet(true);
      }
      if (incoming.get(42)) {
        struct.def43 = iprot.readI32();
        struct.setDef43IsSet(true);
      }
      if (incoming.get(43)) {
        struct.def44 = iprot.readI32();
        struct.setDef44IsSet(true);
      }
      if (incoming.get(44)) {
        struct.def45 = iprot.readI32();
        struct.setDef45IsSet(true);
      }
      if (incoming.get(45)) {
        struct.def46 = iprot.readI32();
        struct.setDef46IsSet(true);
      }
      if (incoming.get(46)) {
        struct.def47 = iprot.readI32();
        struct.setDef47IsSet(true);
      }
      if (incoming.get(47)) {
        struct.def48 = iprot.readI32();
        struct.setDef48IsSet(true);
      }
      if (incoming.get(48)) {
        struct.def49 = iprot.readI32();
        struct.setDef49IsSet(true);
      }
      if (incoming.get(49)) {
        struct.def50 = iprot.readI32();
        struct.setDef50IsSet(true);
      }
      if (incoming.get(50)) {
        struct.def51 = iprot.readI32();
        struct.setDef51IsSet(true);
      }
      if (incoming.get(51)) {
        struct.def52 = iprot.readI32();
        struct.setDef52IsSet(true);
      }
      if (incoming.get(52)) {
        struct.def53 = iprot.readI32();
        struct.setDef53IsSet(true);
      }
      if (incoming.get(53)) {
        struct.def54 = iprot.readI32();
        struct.setDef54IsSet(true);
      }
      if (incoming.get(54)) {
        struct.def55 = iprot.readI32();
        struct.setDef55IsSet(true);
      }
      if (incoming.get(55)) {
        struct.def56 = iprot.readI32();
        struct.setDef56IsSet(true);
      }
      if (incoming.get(56)) {
        struct.def57 = iprot.readI32();
        struct.setDef57IsSet(true);
      }
      if (incoming.get(57)) {
        struct.def58 = iprot.readI32();
        struct.setDef58IsSet(true);
      }
      if (incoming.get(58)) {
        struct.def59 = iprot.readI32();
        struct.setDef59IsSet(true);
      }
      if (incoming.get(59)) {
        struct.def60 = iprot.readI32();
        struct.setDef60IsSet(true);
      }
      if (incoming.get(60)) {
        struct.def61 = iprot.readI32();
        struct.setDef61IsSet(true);
      }
      if (incoming.get(61)) {
        struct.def62 = iprot.readI32();
        struct.setDef62IsSet(true);
      }
      if (incoming.get(62)) {
        struct.def63 = iprot.readI32();
        struct.setDef63IsSet(true);
      }
      if (incoming.get(63)) {
        struct.def64 = iprot.readI32();
        struct.setDef64IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

