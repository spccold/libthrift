/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class OneOfEach implements org.apache.thrift.TBase<OneOfEach, OneOfEach._Fields>, java.io.Serializable, Cloneable, Comparable<OneOfEach> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OneOfEach");

  private static final org.apache.thrift.protocol.TField IM_TRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("im_true", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IM_FALSE_FIELD_DESC = new org.apache.thrift.protocol.TField("im_false", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField A_BITE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_bite", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField INTEGER16_FIELD_DESC = new org.apache.thrift.protocol.TField("integer16", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField INTEGER32_FIELD_DESC = new org.apache.thrift.protocol.TField("integer32", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INTEGER64_FIELD_DESC = new org.apache.thrift.protocol.TField("integer64", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("double_precision", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SOME_CHARACTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("some_characters", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ZOMG_UNICODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zomg_unicode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField WHAT_WHO_FIELD_DESC = new org.apache.thrift.protocol.TField("what_who", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField BASE64_FIELD_DESC = new org.apache.thrift.protocol.TField("base64", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_list", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField I16_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_list", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField I64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_list", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new OneOfEachStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new OneOfEachTupleSchemeFactory();

  public boolean im_true; // required
  public boolean im_false; // required
  public byte a_bite; // required
  public short integer16; // required
  public int integer32; // required
  public long integer64; // required
  public double double_precision; // required
  public String some_characters; // required
  public String zomg_unicode; // required
  public boolean what_who; // required
  public ByteBuffer base64; // required
  public List<Byte> byte_list; // required
  public List<Short> i16_list; // required
  public List<Long> i64_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IM_TRUE((short)1, "im_true"),
    IM_FALSE((short)2, "im_false"),
    A_BITE((short)3, "a_bite"),
    INTEGER16((short)4, "integer16"),
    INTEGER32((short)5, "integer32"),
    INTEGER64((short)6, "integer64"),
    DOUBLE_PRECISION((short)7, "double_precision"),
    SOME_CHARACTERS((short)8, "some_characters"),
    ZOMG_UNICODE((short)9, "zomg_unicode"),
    WHAT_WHO((short)10, "what_who"),
    BASE64((short)11, "base64"),
    BYTE_LIST((short)12, "byte_list"),
    I16_LIST((short)13, "i16_list"),
    I64_LIST((short)14, "i64_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IM_TRUE
          return IM_TRUE;
        case 2: // IM_FALSE
          return IM_FALSE;
        case 3: // A_BITE
          return A_BITE;
        case 4: // INTEGER16
          return INTEGER16;
        case 5: // INTEGER32
          return INTEGER32;
        case 6: // INTEGER64
          return INTEGER64;
        case 7: // DOUBLE_PRECISION
          return DOUBLE_PRECISION;
        case 8: // SOME_CHARACTERS
          return SOME_CHARACTERS;
        case 9: // ZOMG_UNICODE
          return ZOMG_UNICODE;
        case 10: // WHAT_WHO
          return WHAT_WHO;
        case 11: // BASE64
          return BASE64;
        case 12: // BYTE_LIST
          return BYTE_LIST;
        case 13: // I16_LIST
          return I16_LIST;
        case 14: // I64_LIST
          return I64_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IM_TRUE_ISSET_ID = 0;
  private static final int __IM_FALSE_ISSET_ID = 1;
  private static final int __A_BITE_ISSET_ID = 2;
  private static final int __INTEGER16_ISSET_ID = 3;
  private static final int __INTEGER32_ISSET_ID = 4;
  private static final int __INTEGER64_ISSET_ID = 5;
  private static final int __DOUBLE_PRECISION_ISSET_ID = 6;
  private static final int __WHAT_WHO_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IM_TRUE, new org.apache.thrift.meta_data.FieldMetaData("im_true", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IM_FALSE, new org.apache.thrift.meta_data.FieldMetaData("im_false", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.A_BITE, new org.apache.thrift.meta_data.FieldMetaData("a_bite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INTEGER16, new org.apache.thrift.meta_data.FieldMetaData("integer16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INTEGER32, new org.apache.thrift.meta_data.FieldMetaData("integer32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTEGER64, new org.apache.thrift.meta_data.FieldMetaData("integer64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("double_precision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOME_CHARACTERS, new org.apache.thrift.meta_data.FieldMetaData("some_characters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZOMG_UNICODE, new org.apache.thrift.meta_data.FieldMetaData("zomg_unicode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHAT_WHO, new org.apache.thrift.meta_data.FieldMetaData("what_who", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BASE64, new org.apache.thrift.meta_data.FieldMetaData("base64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byte_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I16_LIST, new org.apache.thrift.meta_data.FieldMetaData("i16_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.I64_LIST, new org.apache.thrift.meta_data.FieldMetaData("i64_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneOfEach.class, metaDataMap);
  }

  public OneOfEach() {
    this.a_bite = (byte)127;

    this.integer16 = (short)32767;

    this.integer64 = 10000000000L;

    this.byte_list = new ArrayList<Byte>();
    this.byte_list.add((byte)1);
    this.byte_list.add((byte)2);
    this.byte_list.add((byte)3);

    this.i16_list = new ArrayList<Short>();
    this.i16_list.add((short)1);
    this.i16_list.add((short)2);
    this.i16_list.add((short)3);

    this.i64_list = new ArrayList<Long>();
    this.i64_list.add(1L);
    this.i64_list.add(2L);
    this.i64_list.add(3L);

  }

  public OneOfEach(
    boolean im_true,
    boolean im_false,
    byte a_bite,
    short integer16,
    int integer32,
    long integer64,
    double double_precision,
    String some_characters,
    String zomg_unicode,
    boolean what_who,
    ByteBuffer base64,
    List<Byte> byte_list,
    List<Short> i16_list,
    List<Long> i64_list)
  {
    this();
    this.im_true = im_true;
    setIm_trueIsSet(true);
    this.im_false = im_false;
    setIm_falseIsSet(true);
    this.a_bite = a_bite;
    setA_biteIsSet(true);
    this.integer16 = integer16;
    setInteger16IsSet(true);
    this.integer32 = integer32;
    setInteger32IsSet(true);
    this.integer64 = integer64;
    setInteger64IsSet(true);
    this.double_precision = double_precision;
    setDouble_precisionIsSet(true);
    this.some_characters = some_characters;
    this.zomg_unicode = zomg_unicode;
    this.what_who = what_who;
    setWhat_whoIsSet(true);
    this.base64 = org.apache.thrift.TBaseHelper.copyBinary(base64);
    this.byte_list = byte_list;
    this.i16_list = i16_list;
    this.i64_list = i64_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OneOfEach(OneOfEach other) {
    __isset_bitfield = other.__isset_bitfield;
    this.im_true = other.im_true;
    this.im_false = other.im_false;
    this.a_bite = other.a_bite;
    this.integer16 = other.integer16;
    this.integer32 = other.integer32;
    this.integer64 = other.integer64;
    this.double_precision = other.double_precision;
    if (other.isSetSome_characters()) {
      this.some_characters = other.some_characters;
    }
    if (other.isSetZomg_unicode()) {
      this.zomg_unicode = other.zomg_unicode;
    }
    this.what_who = other.what_who;
    if (other.isSetBase64()) {
      this.base64 = org.apache.thrift.TBaseHelper.copyBinary(other.base64);
    }
    if (other.isSetByte_list()) {
      List<Byte> __this__byte_list = new ArrayList<Byte>(other.byte_list);
      this.byte_list = __this__byte_list;
    }
    if (other.isSetI16_list()) {
      List<Short> __this__i16_list = new ArrayList<Short>(other.i16_list);
      this.i16_list = __this__i16_list;
    }
    if (other.isSetI64_list()) {
      List<Long> __this__i64_list = new ArrayList<Long>(other.i64_list);
      this.i64_list = __this__i64_list;
    }
  }

  public OneOfEach deepCopy() {
    return new OneOfEach(this);
  }

  @Override
  public void clear() {
    setIm_trueIsSet(false);
    this.im_true = false;
    setIm_falseIsSet(false);
    this.im_false = false;
    this.a_bite = (byte)127;

    this.integer16 = (short)32767;

    setInteger32IsSet(false);
    this.integer32 = 0;
    this.integer64 = 10000000000L;

    setDouble_precisionIsSet(false);
    this.double_precision = 0.0;
    this.some_characters = null;
    this.zomg_unicode = null;
    setWhat_whoIsSet(false);
    this.what_who = false;
    this.base64 = null;
    this.byte_list = new ArrayList<Byte>();
    this.byte_list.add((byte)1);
    this.byte_list.add((byte)2);
    this.byte_list.add((byte)3);

    this.i16_list = new ArrayList<Short>();
    this.i16_list.add((short)1);
    this.i16_list.add((short)2);
    this.i16_list.add((short)3);

    this.i64_list = new ArrayList<Long>();
    this.i64_list.add(1L);
    this.i64_list.add(2L);
    this.i64_list.add(3L);

  }

  public boolean isIm_true() {
    return this.im_true;
  }

  public OneOfEach setIm_true(boolean im_true) {
    this.im_true = im_true;
    setIm_trueIsSet(true);
    return this;
  }

  public void unsetIm_true() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IM_TRUE_ISSET_ID);
  }

  /** Returns true if field im_true is set (has been assigned a value) and false otherwise */
  public boolean isSetIm_true() {
    return EncodingUtils.testBit(__isset_bitfield, __IM_TRUE_ISSET_ID);
  }

  public void setIm_trueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IM_TRUE_ISSET_ID, value);
  }

  public boolean isIm_false() {
    return this.im_false;
  }

  public OneOfEach setIm_false(boolean im_false) {
    this.im_false = im_false;
    setIm_falseIsSet(true);
    return this;
  }

  public void unsetIm_false() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IM_FALSE_ISSET_ID);
  }

  /** Returns true if field im_false is set (has been assigned a value) and false otherwise */
  public boolean isSetIm_false() {
    return EncodingUtils.testBit(__isset_bitfield, __IM_FALSE_ISSET_ID);
  }

  public void setIm_falseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IM_FALSE_ISSET_ID, value);
  }

  public byte getA_bite() {
    return this.a_bite;
  }

  public OneOfEach setA_bite(byte a_bite) {
    this.a_bite = a_bite;
    setA_biteIsSet(true);
    return this;
  }

  public void unsetA_bite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_BITE_ISSET_ID);
  }

  /** Returns true if field a_bite is set (has been assigned a value) and false otherwise */
  public boolean isSetA_bite() {
    return EncodingUtils.testBit(__isset_bitfield, __A_BITE_ISSET_ID);
  }

  public void setA_biteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_BITE_ISSET_ID, value);
  }

  public short getInteger16() {
    return this.integer16;
  }

  public OneOfEach setInteger16(short integer16) {
    this.integer16 = integer16;
    setInteger16IsSet(true);
    return this;
  }

  public void unsetInteger16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER16_ISSET_ID);
  }

  /** Returns true if field integer16 is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger16() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER16_ISSET_ID);
  }

  public void setInteger16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER16_ISSET_ID, value);
  }

  public int getInteger32() {
    return this.integer32;
  }

  public OneOfEach setInteger32(int integer32) {
    this.integer32 = integer32;
    setInteger32IsSet(true);
    return this;
  }

  public void unsetInteger32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER32_ISSET_ID);
  }

  /** Returns true if field integer32 is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger32() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER32_ISSET_ID);
  }

  public void setInteger32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER32_ISSET_ID, value);
  }

  public long getInteger64() {
    return this.integer64;
  }

  public OneOfEach setInteger64(long integer64) {
    this.integer64 = integer64;
    setInteger64IsSet(true);
    return this;
  }

  public void unsetInteger64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER64_ISSET_ID);
  }

  /** Returns true if field integer64 is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger64() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER64_ISSET_ID);
  }

  public void setInteger64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER64_ISSET_ID, value);
  }

  public double getDouble_precision() {
    return this.double_precision;
  }

  public OneOfEach setDouble_precision(double double_precision) {
    this.double_precision = double_precision;
    setDouble_precisionIsSet(true);
    return this;
  }

  public void unsetDouble_precision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
  }

  /** Returns true if field double_precision is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_precision() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
  }

  public void setDouble_precisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID, value);
  }

  public String getSome_characters() {
    return this.some_characters;
  }

  public OneOfEach setSome_characters(String some_characters) {
    this.some_characters = some_characters;
    return this;
  }

  public void unsetSome_characters() {
    this.some_characters = null;
  }

  /** Returns true if field some_characters is set (has been assigned a value) and false otherwise */
  public boolean isSetSome_characters() {
    return this.some_characters != null;
  }

  public void setSome_charactersIsSet(boolean value) {
    if (!value) {
      this.some_characters = null;
    }
  }

  public String getZomg_unicode() {
    return this.zomg_unicode;
  }

  public OneOfEach setZomg_unicode(String zomg_unicode) {
    this.zomg_unicode = zomg_unicode;
    return this;
  }

  public void unsetZomg_unicode() {
    this.zomg_unicode = null;
  }

  /** Returns true if field zomg_unicode is set (has been assigned a value) and false otherwise */
  public boolean isSetZomg_unicode() {
    return this.zomg_unicode != null;
  }

  public void setZomg_unicodeIsSet(boolean value) {
    if (!value) {
      this.zomg_unicode = null;
    }
  }

  public boolean isWhat_who() {
    return this.what_who;
  }

  public OneOfEach setWhat_who(boolean what_who) {
    this.what_who = what_who;
    setWhat_whoIsSet(true);
    return this;
  }

  public void unsetWhat_who() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WHAT_WHO_ISSET_ID);
  }

  /** Returns true if field what_who is set (has been assigned a value) and false otherwise */
  public boolean isSetWhat_who() {
    return EncodingUtils.testBit(__isset_bitfield, __WHAT_WHO_ISSET_ID);
  }

  public void setWhat_whoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WHAT_WHO_ISSET_ID, value);
  }

  public byte[] getBase64() {
    setBase64(org.apache.thrift.TBaseHelper.rightSize(base64));
    return base64 == null ? null : base64.array();
  }

  public ByteBuffer bufferForBase64() {
    return org.apache.thrift.TBaseHelper.copyBinary(base64);
  }

  public OneOfEach setBase64(byte[] base64) {
    this.base64 = base64 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(base64, base64.length));
    return this;
  }

  public OneOfEach setBase64(ByteBuffer base64) {
    this.base64 = org.apache.thrift.TBaseHelper.copyBinary(base64);
    return this;
  }

  public void unsetBase64() {
    this.base64 = null;
  }

  /** Returns true if field base64 is set (has been assigned a value) and false otherwise */
  public boolean isSetBase64() {
    return this.base64 != null;
  }

  public void setBase64IsSet(boolean value) {
    if (!value) {
      this.base64 = null;
    }
  }

  public int getByte_listSize() {
    return (this.byte_list == null) ? 0 : this.byte_list.size();
  }

  public java.util.Iterator<Byte> getByte_listIterator() {
    return (this.byte_list == null) ? null : this.byte_list.iterator();
  }

  public void addToByte_list(byte elem) {
    if (this.byte_list == null) {
      this.byte_list = new ArrayList<Byte>();
    }
    this.byte_list.add(elem);
  }

  public List<Byte> getByte_list() {
    return this.byte_list;
  }

  public OneOfEach setByte_list(List<Byte> byte_list) {
    this.byte_list = byte_list;
    return this;
  }

  public void unsetByte_list() {
    this.byte_list = null;
  }

  /** Returns true if field byte_list is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_list() {
    return this.byte_list != null;
  }

  public void setByte_listIsSet(boolean value) {
    if (!value) {
      this.byte_list = null;
    }
  }

  public int getI16_listSize() {
    return (this.i16_list == null) ? 0 : this.i16_list.size();
  }

  public java.util.Iterator<Short> getI16_listIterator() {
    return (this.i16_list == null) ? null : this.i16_list.iterator();
  }

  public void addToI16_list(short elem) {
    if (this.i16_list == null) {
      this.i16_list = new ArrayList<Short>();
    }
    this.i16_list.add(elem);
  }

  public List<Short> getI16_list() {
    return this.i16_list;
  }

  public OneOfEach setI16_list(List<Short> i16_list) {
    this.i16_list = i16_list;
    return this;
  }

  public void unsetI16_list() {
    this.i16_list = null;
  }

  /** Returns true if field i16_list is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_list() {
    return this.i16_list != null;
  }

  public void setI16_listIsSet(boolean value) {
    if (!value) {
      this.i16_list = null;
    }
  }

  public int getI64_listSize() {
    return (this.i64_list == null) ? 0 : this.i64_list.size();
  }

  public java.util.Iterator<Long> getI64_listIterator() {
    return (this.i64_list == null) ? null : this.i64_list.iterator();
  }

  public void addToI64_list(long elem) {
    if (this.i64_list == null) {
      this.i64_list = new ArrayList<Long>();
    }
    this.i64_list.add(elem);
  }

  public List<Long> getI64_list() {
    return this.i64_list;
  }

  public OneOfEach setI64_list(List<Long> i64_list) {
    this.i64_list = i64_list;
    return this;
  }

  public void unsetI64_list() {
    this.i64_list = null;
  }

  /** Returns true if field i64_list is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_list() {
    return this.i64_list != null;
  }

  public void setI64_listIsSet(boolean value) {
    if (!value) {
      this.i64_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IM_TRUE:
      if (value == null) {
        unsetIm_true();
      } else {
        setIm_true((Boolean)value);
      }
      break;

    case IM_FALSE:
      if (value == null) {
        unsetIm_false();
      } else {
        setIm_false((Boolean)value);
      }
      break;

    case A_BITE:
      if (value == null) {
        unsetA_bite();
      } else {
        setA_bite((Byte)value);
      }
      break;

    case INTEGER16:
      if (value == null) {
        unsetInteger16();
      } else {
        setInteger16((Short)value);
      }
      break;

    case INTEGER32:
      if (value == null) {
        unsetInteger32();
      } else {
        setInteger32((Integer)value);
      }
      break;

    case INTEGER64:
      if (value == null) {
        unsetInteger64();
      } else {
        setInteger64((Long)value);
      }
      break;

    case DOUBLE_PRECISION:
      if (value == null) {
        unsetDouble_precision();
      } else {
        setDouble_precision((Double)value);
      }
      break;

    case SOME_CHARACTERS:
      if (value == null) {
        unsetSome_characters();
      } else {
        setSome_characters((String)value);
      }
      break;

    case ZOMG_UNICODE:
      if (value == null) {
        unsetZomg_unicode();
      } else {
        setZomg_unicode((String)value);
      }
      break;

    case WHAT_WHO:
      if (value == null) {
        unsetWhat_who();
      } else {
        setWhat_who((Boolean)value);
      }
      break;

    case BASE64:
      if (value == null) {
        unsetBase64();
      } else {
        if (value instanceof byte[]) {
          setBase64((byte[])value);
        } else {
          setBase64((ByteBuffer)value);
        }
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByte_list();
      } else {
        setByte_list((List<Byte>)value);
      }
      break;

    case I16_LIST:
      if (value == null) {
        unsetI16_list();
      } else {
        setI16_list((List<Short>)value);
      }
      break;

    case I64_LIST:
      if (value == null) {
        unsetI64_list();
      } else {
        setI64_list((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IM_TRUE:
      return isIm_true();

    case IM_FALSE:
      return isIm_false();

    case A_BITE:
      return getA_bite();

    case INTEGER16:
      return getInteger16();

    case INTEGER32:
      return getInteger32();

    case INTEGER64:
      return getInteger64();

    case DOUBLE_PRECISION:
      return getDouble_precision();

    case SOME_CHARACTERS:
      return getSome_characters();

    case ZOMG_UNICODE:
      return getZomg_unicode();

    case WHAT_WHO:
      return isWhat_who();

    case BASE64:
      return getBase64();

    case BYTE_LIST:
      return getByte_list();

    case I16_LIST:
      return getI16_list();

    case I64_LIST:
      return getI64_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IM_TRUE:
      return isSetIm_true();
    case IM_FALSE:
      return isSetIm_false();
    case A_BITE:
      return isSetA_bite();
    case INTEGER16:
      return isSetInteger16();
    case INTEGER32:
      return isSetInteger32();
    case INTEGER64:
      return isSetInteger64();
    case DOUBLE_PRECISION:
      return isSetDouble_precision();
    case SOME_CHARACTERS:
      return isSetSome_characters();
    case ZOMG_UNICODE:
      return isSetZomg_unicode();
    case WHAT_WHO:
      return isSetWhat_who();
    case BASE64:
      return isSetBase64();
    case BYTE_LIST:
      return isSetByte_list();
    case I16_LIST:
      return isSetI16_list();
    case I64_LIST:
      return isSetI64_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OneOfEach)
      return this.equals((OneOfEach)that);
    return false;
  }

  public boolean equals(OneOfEach that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_im_true = true;
    boolean that_present_im_true = true;
    if (this_present_im_true || that_present_im_true) {
      if (!(this_present_im_true && that_present_im_true))
        return false;
      if (this.im_true != that.im_true)
        return false;
    }

    boolean this_present_im_false = true;
    boolean that_present_im_false = true;
    if (this_present_im_false || that_present_im_false) {
      if (!(this_present_im_false && that_present_im_false))
        return false;
      if (this.im_false != that.im_false)
        return false;
    }

    boolean this_present_a_bite = true;
    boolean that_present_a_bite = true;
    if (this_present_a_bite || that_present_a_bite) {
      if (!(this_present_a_bite && that_present_a_bite))
        return false;
      if (this.a_bite != that.a_bite)
        return false;
    }

    boolean this_present_integer16 = true;
    boolean that_present_integer16 = true;
    if (this_present_integer16 || that_present_integer16) {
      if (!(this_present_integer16 && that_present_integer16))
        return false;
      if (this.integer16 != that.integer16)
        return false;
    }

    boolean this_present_integer32 = true;
    boolean that_present_integer32 = true;
    if (this_present_integer32 || that_present_integer32) {
      if (!(this_present_integer32 && that_present_integer32))
        return false;
      if (this.integer32 != that.integer32)
        return false;
    }

    boolean this_present_integer64 = true;
    boolean that_present_integer64 = true;
    if (this_present_integer64 || that_present_integer64) {
      if (!(this_present_integer64 && that_present_integer64))
        return false;
      if (this.integer64 != that.integer64)
        return false;
    }

    boolean this_present_double_precision = true;
    boolean that_present_double_precision = true;
    if (this_present_double_precision || that_present_double_precision) {
      if (!(this_present_double_precision && that_present_double_precision))
        return false;
      if (this.double_precision != that.double_precision)
        return false;
    }

    boolean this_present_some_characters = true && this.isSetSome_characters();
    boolean that_present_some_characters = true && that.isSetSome_characters();
    if (this_present_some_characters || that_present_some_characters) {
      if (!(this_present_some_characters && that_present_some_characters))
        return false;
      if (!this.some_characters.equals(that.some_characters))
        return false;
    }

    boolean this_present_zomg_unicode = true && this.isSetZomg_unicode();
    boolean that_present_zomg_unicode = true && that.isSetZomg_unicode();
    if (this_present_zomg_unicode || that_present_zomg_unicode) {
      if (!(this_present_zomg_unicode && that_present_zomg_unicode))
        return false;
      if (!this.zomg_unicode.equals(that.zomg_unicode))
        return false;
    }

    boolean this_present_what_who = true;
    boolean that_present_what_who = true;
    if (this_present_what_who || that_present_what_who) {
      if (!(this_present_what_who && that_present_what_who))
        return false;
      if (this.what_who != that.what_who)
        return false;
    }

    boolean this_present_base64 = true && this.isSetBase64();
    boolean that_present_base64 = true && that.isSetBase64();
    if (this_present_base64 || that_present_base64) {
      if (!(this_present_base64 && that_present_base64))
        return false;
      if (!this.base64.equals(that.base64))
        return false;
    }

    boolean this_present_byte_list = true && this.isSetByte_list();
    boolean that_present_byte_list = true && that.isSetByte_list();
    if (this_present_byte_list || that_present_byte_list) {
      if (!(this_present_byte_list && that_present_byte_list))
        return false;
      if (!this.byte_list.equals(that.byte_list))
        return false;
    }

    boolean this_present_i16_list = true && this.isSetI16_list();
    boolean that_present_i16_list = true && that.isSetI16_list();
    if (this_present_i16_list || that_present_i16_list) {
      if (!(this_present_i16_list && that_present_i16_list))
        return false;
      if (!this.i16_list.equals(that.i16_list))
        return false;
    }

    boolean this_present_i64_list = true && this.isSetI64_list();
    boolean that_present_i64_list = true && that.isSetI64_list();
    if (this_present_i64_list || that_present_i64_list) {
      if (!(this_present_i64_list && that_present_i64_list))
        return false;
      if (!this.i64_list.equals(that.i64_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((im_true) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((im_false) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (a_bite);

    hashCode = hashCode * 8191 + integer16;

    hashCode = hashCode * 8191 + integer32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(integer64);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(double_precision);

    hashCode = hashCode * 8191 + ((isSetSome_characters()) ? 131071 : 524287);
    if (isSetSome_characters())
      hashCode = hashCode * 8191 + some_characters.hashCode();

    hashCode = hashCode * 8191 + ((isSetZomg_unicode()) ? 131071 : 524287);
    if (isSetZomg_unicode())
      hashCode = hashCode * 8191 + zomg_unicode.hashCode();

    hashCode = hashCode * 8191 + ((what_who) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBase64()) ? 131071 : 524287);
    if (isSetBase64())
      hashCode = hashCode * 8191 + base64.hashCode();

    hashCode = hashCode * 8191 + ((isSetByte_list()) ? 131071 : 524287);
    if (isSetByte_list())
      hashCode = hashCode * 8191 + byte_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetI16_list()) ? 131071 : 524287);
    if (isSetI16_list())
      hashCode = hashCode * 8191 + i16_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetI64_list()) ? 131071 : 524287);
    if (isSetI64_list())
      hashCode = hashCode * 8191 + i64_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OneOfEach other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIm_true()).compareTo(other.isSetIm_true());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm_true()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_true, other.im_true);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIm_false()).compareTo(other.isSetIm_false());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm_false()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_false, other.im_false);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_bite()).compareTo(other.isSetA_bite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_bite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_bite, other.a_bite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger16()).compareTo(other.isSetInteger16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer16, other.integer16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger32()).compareTo(other.isSetInteger32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer32, other.integer32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger64()).compareTo(other.isSetInteger64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer64, other.integer64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_precision()).compareTo(other.isSetDouble_precision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_precision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_precision, other.double_precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSome_characters()).compareTo(other.isSetSome_characters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSome_characters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.some_characters, other.some_characters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZomg_unicode()).compareTo(other.isSetZomg_unicode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZomg_unicode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zomg_unicode, other.zomg_unicode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhat_who()).compareTo(other.isSetWhat_who());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhat_who()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.what_who, other.what_who);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase64()).compareTo(other.isSetBase64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base64, other.base64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_list()).compareTo(other.isSetByte_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_list, other.byte_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_list()).compareTo(other.isSetI16_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_list, other.i16_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_list()).compareTo(other.isSetI64_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_list, other.i64_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OneOfEach(");
    boolean first = true;

    sb.append("im_true:");
    sb.append(this.im_true);
    first = false;
    if (!first) sb.append(", ");
    sb.append("im_false:");
    sb.append(this.im_false);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_bite:");
    sb.append(this.a_bite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer16:");
    sb.append(this.integer16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer32:");
    sb.append(this.integer32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer64:");
    sb.append(this.integer64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_precision:");
    sb.append(this.double_precision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("some_characters:");
    if (this.some_characters == null) {
      sb.append("null");
    } else {
      sb.append(this.some_characters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zomg_unicode:");
    if (this.zomg_unicode == null) {
      sb.append("null");
    } else {
      sb.append(this.zomg_unicode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("what_who:");
    sb.append(this.what_who);
    first = false;
    if (!first) sb.append(", ");
    sb.append("base64:");
    if (this.base64 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.base64, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_list:");
    if (this.byte_list == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_list:");
    if (this.i16_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i16_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_list:");
    if (this.i64_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i64_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OneOfEachStandardSchemeFactory implements SchemeFactory {
    public OneOfEachStandardScheme getScheme() {
      return new OneOfEachStandardScheme();
    }
  }

  private static class OneOfEachStandardScheme extends StandardScheme<OneOfEach> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OneOfEach struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IM_TRUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.im_true = iprot.readBool();
              struct.setIm_trueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IM_FALSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.im_false = iprot.readBool();
              struct.setIm_falseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A_BITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.a_bite = iprot.readByte();
              struct.setA_biteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTEGER16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.integer16 = iprot.readI16();
              struct.setInteger16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTEGER32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integer32 = iprot.readI32();
              struct.setInteger32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTEGER64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.integer64 = iprot.readI64();
              struct.setInteger64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_precision = iprot.readDouble();
              struct.setDouble_precisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOME_CHARACTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.some_characters = iprot.readString();
              struct.setSome_charactersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ZOMG_UNICODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zomg_unicode = iprot.readString();
              struct.setZomg_unicodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WHAT_WHO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.what_who = iprot.readBool();
              struct.setWhat_whoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BASE64
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.base64 = iprot.readBinary();
              struct.setBase64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BYTE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.byte_list = new ArrayList<Byte>(_list0.size);
                byte _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readByte();
                  struct.byte_list.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setByte_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // I16_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.i16_list = new ArrayList<Short>(_list3.size);
                short _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI16();
                  struct.i16_list.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setI16_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // I64_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.i64_list = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.i64_list.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setI64_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OneOfEach struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IM_TRUE_FIELD_DESC);
      oprot.writeBool(struct.im_true);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IM_FALSE_FIELD_DESC);
      oprot.writeBool(struct.im_false);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_BITE_FIELD_DESC);
      oprot.writeByte(struct.a_bite);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER16_FIELD_DESC);
      oprot.writeI16(struct.integer16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER32_FIELD_DESC);
      oprot.writeI32(struct.integer32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER64_FIELD_DESC);
      oprot.writeI64(struct.integer64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_PRECISION_FIELD_DESC);
      oprot.writeDouble(struct.double_precision);
      oprot.writeFieldEnd();
      if (struct.some_characters != null) {
        oprot.writeFieldBegin(SOME_CHARACTERS_FIELD_DESC);
        oprot.writeString(struct.some_characters);
        oprot.writeFieldEnd();
      }
      if (struct.zomg_unicode != null) {
        oprot.writeFieldBegin(ZOMG_UNICODE_FIELD_DESC);
        oprot.writeString(struct.zomg_unicode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WHAT_WHO_FIELD_DESC);
      oprot.writeBool(struct.what_who);
      oprot.writeFieldEnd();
      if (struct.base64 != null) {
        oprot.writeFieldBegin(BASE64_FIELD_DESC);
        oprot.writeBinary(struct.base64);
        oprot.writeFieldEnd();
      }
      if (struct.byte_list != null) {
        oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byte_list.size()));
          for (byte _iter9 : struct.byte_list)
          {
            oprot.writeByte(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i16_list != null) {
        oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.i16_list.size()));
          for (short _iter10 : struct.i16_list)
          {
            oprot.writeI16(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i64_list != null) {
        oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64_list.size()));
          for (long _iter11 : struct.i64_list)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OneOfEachTupleSchemeFactory implements SchemeFactory {
    public OneOfEachTupleScheme getScheme() {
      return new OneOfEachTupleScheme();
    }
  }

  private static class OneOfEachTupleScheme extends TupleScheme<OneOfEach> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OneOfEach struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIm_true()) {
        optionals.set(0);
      }
      if (struct.isSetIm_false()) {
        optionals.set(1);
      }
      if (struct.isSetA_bite()) {
        optionals.set(2);
      }
      if (struct.isSetInteger16()) {
        optionals.set(3);
      }
      if (struct.isSetInteger32()) {
        optionals.set(4);
      }
      if (struct.isSetInteger64()) {
        optionals.set(5);
      }
      if (struct.isSetDouble_precision()) {
        optionals.set(6);
      }
      if (struct.isSetSome_characters()) {
        optionals.set(7);
      }
      if (struct.isSetZomg_unicode()) {
        optionals.set(8);
      }
      if (struct.isSetWhat_who()) {
        optionals.set(9);
      }
      if (struct.isSetBase64()) {
        optionals.set(10);
      }
      if (struct.isSetByte_list()) {
        optionals.set(11);
      }
      if (struct.isSetI16_list()) {
        optionals.set(12);
      }
      if (struct.isSetI64_list()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetIm_true()) {
        oprot.writeBool(struct.im_true);
      }
      if (struct.isSetIm_false()) {
        oprot.writeBool(struct.im_false);
      }
      if (struct.isSetA_bite()) {
        oprot.writeByte(struct.a_bite);
      }
      if (struct.isSetInteger16()) {
        oprot.writeI16(struct.integer16);
      }
      if (struct.isSetInteger32()) {
        oprot.writeI32(struct.integer32);
      }
      if (struct.isSetInteger64()) {
        oprot.writeI64(struct.integer64);
      }
      if (struct.isSetDouble_precision()) {
        oprot.writeDouble(struct.double_precision);
      }
      if (struct.isSetSome_characters()) {
        oprot.writeString(struct.some_characters);
      }
      if (struct.isSetZomg_unicode()) {
        oprot.writeString(struct.zomg_unicode);
      }
      if (struct.isSetWhat_who()) {
        oprot.writeBool(struct.what_who);
      }
      if (struct.isSetBase64()) {
        oprot.writeBinary(struct.base64);
      }
      if (struct.isSetByte_list()) {
        {
          oprot.writeI32(struct.byte_list.size());
          for (byte _iter12 : struct.byte_list)
          {
            oprot.writeByte(_iter12);
          }
        }
      }
      if (struct.isSetI16_list()) {
        {
          oprot.writeI32(struct.i16_list.size());
          for (short _iter13 : struct.i16_list)
          {
            oprot.writeI16(_iter13);
          }
        }
      }
      if (struct.isSetI64_list()) {
        {
          oprot.writeI32(struct.i64_list.size());
          for (long _iter14 : struct.i64_list)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OneOfEach struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.im_true = iprot.readBool();
        struct.setIm_trueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.im_false = iprot.readBool();
        struct.setIm_falseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.a_bite = iprot.readByte();
        struct.setA_biteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.integer16 = iprot.readI16();
        struct.setInteger16IsSet(true);
      }
      if (incoming.get(4)) {
        struct.integer32 = iprot.readI32();
        struct.setInteger32IsSet(true);
      }
      if (incoming.get(5)) {
        struct.integer64 = iprot.readI64();
        struct.setInteger64IsSet(true);
      }
      if (incoming.get(6)) {
        struct.double_precision = iprot.readDouble();
        struct.setDouble_precisionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.some_characters = iprot.readString();
        struct.setSome_charactersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.zomg_unicode = iprot.readString();
        struct.setZomg_unicodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.what_who = iprot.readBool();
        struct.setWhat_whoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.base64 = iprot.readBinary();
        struct.setBase64IsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byte_list = new ArrayList<Byte>(_list15.size);
          byte _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readByte();
            struct.byte_list.add(_elem16);
          }
        }
        struct.setByte_listIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.i16_list = new ArrayList<Short>(_list18.size);
          short _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI16();
            struct.i16_list.add(_elem19);
          }
        }
        struct.setI16_listIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.i64_list = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.i64_list.add(_elem22);
          }
        }
        struct.setI64_listIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

