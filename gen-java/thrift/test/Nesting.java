/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Nesting implements org.apache.thrift.TBase<Nesting, Nesting._Fields>, java.io.Serializable, Cloneable, Comparable<Nesting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Nesting");

  private static final org.apache.thrift.protocol.TField MY_BONK_FIELD_DESC = new org.apache.thrift.protocol.TField("my_bonk", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MY_OOE_FIELD_DESC = new org.apache.thrift.protocol.TField("my_ooe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new NestingStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new NestingTupleSchemeFactory();

  public Bonk my_bonk; // required
  public OneOfEach my_ooe; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MY_BONK((short)1, "my_bonk"),
    MY_OOE((short)2, "my_ooe");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MY_BONK
          return MY_BONK;
        case 2: // MY_OOE
          return MY_OOE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MY_BONK, new org.apache.thrift.meta_data.FieldMetaData("my_bonk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bonk.class)));
    tmpMap.put(_Fields.MY_OOE, new org.apache.thrift.meta_data.FieldMetaData("my_ooe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OneOfEach.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Nesting.class, metaDataMap);
  }

  public Nesting() {
  }

  public Nesting(
    Bonk my_bonk,
    OneOfEach my_ooe)
  {
    this();
    this.my_bonk = my_bonk;
    this.my_ooe = my_ooe;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Nesting(Nesting other) {
    if (other.isSetMy_bonk()) {
      this.my_bonk = new Bonk(other.my_bonk);
    }
    if (other.isSetMy_ooe()) {
      this.my_ooe = new OneOfEach(other.my_ooe);
    }
  }

  public Nesting deepCopy() {
    return new Nesting(this);
  }

  @Override
  public void clear() {
    this.my_bonk = null;
    this.my_ooe = null;
  }

  public Bonk getMy_bonk() {
    return this.my_bonk;
  }

  public Nesting setMy_bonk(Bonk my_bonk) {
    this.my_bonk = my_bonk;
    return this;
  }

  public void unsetMy_bonk() {
    this.my_bonk = null;
  }

  /** Returns true if field my_bonk is set (has been assigned a value) and false otherwise */
  public boolean isSetMy_bonk() {
    return this.my_bonk != null;
  }

  public void setMy_bonkIsSet(boolean value) {
    if (!value) {
      this.my_bonk = null;
    }
  }

  public OneOfEach getMy_ooe() {
    return this.my_ooe;
  }

  public Nesting setMy_ooe(OneOfEach my_ooe) {
    this.my_ooe = my_ooe;
    return this;
  }

  public void unsetMy_ooe() {
    this.my_ooe = null;
  }

  /** Returns true if field my_ooe is set (has been assigned a value) and false otherwise */
  public boolean isSetMy_ooe() {
    return this.my_ooe != null;
  }

  public void setMy_ooeIsSet(boolean value) {
    if (!value) {
      this.my_ooe = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MY_BONK:
      if (value == null) {
        unsetMy_bonk();
      } else {
        setMy_bonk((Bonk)value);
      }
      break;

    case MY_OOE:
      if (value == null) {
        unsetMy_ooe();
      } else {
        setMy_ooe((OneOfEach)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MY_BONK:
      return getMy_bonk();

    case MY_OOE:
      return getMy_ooe();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MY_BONK:
      return isSetMy_bonk();
    case MY_OOE:
      return isSetMy_ooe();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Nesting)
      return this.equals((Nesting)that);
    return false;
  }

  public boolean equals(Nesting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_my_bonk = true && this.isSetMy_bonk();
    boolean that_present_my_bonk = true && that.isSetMy_bonk();
    if (this_present_my_bonk || that_present_my_bonk) {
      if (!(this_present_my_bonk && that_present_my_bonk))
        return false;
      if (!this.my_bonk.equals(that.my_bonk))
        return false;
    }

    boolean this_present_my_ooe = true && this.isSetMy_ooe();
    boolean that_present_my_ooe = true && that.isSetMy_ooe();
    if (this_present_my_ooe || that_present_my_ooe) {
      if (!(this_present_my_ooe && that_present_my_ooe))
        return false;
      if (!this.my_ooe.equals(that.my_ooe))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMy_bonk()) ? 131071 : 524287);
    if (isSetMy_bonk())
      hashCode = hashCode * 8191 + my_bonk.hashCode();

    hashCode = hashCode * 8191 + ((isSetMy_ooe()) ? 131071 : 524287);
    if (isSetMy_ooe())
      hashCode = hashCode * 8191 + my_ooe.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Nesting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMy_bonk()).compareTo(other.isSetMy_bonk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMy_bonk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.my_bonk, other.my_bonk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMy_ooe()).compareTo(other.isSetMy_ooe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMy_ooe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.my_ooe, other.my_ooe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Nesting(");
    boolean first = true;

    sb.append("my_bonk:");
    if (this.my_bonk == null) {
      sb.append("null");
    } else {
      sb.append(this.my_bonk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("my_ooe:");
    if (this.my_ooe == null) {
      sb.append("null");
    } else {
      sb.append(this.my_ooe);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (my_bonk != null) {
      my_bonk.validate();
    }
    if (my_ooe != null) {
      my_ooe.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NestingStandardSchemeFactory implements SchemeFactory {
    public NestingStandardScheme getScheme() {
      return new NestingStandardScheme();
    }
  }

  private static class NestingStandardScheme extends StandardScheme<Nesting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Nesting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MY_BONK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.my_bonk = new Bonk();
              struct.my_bonk.read(iprot);
              struct.setMy_bonkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MY_OOE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.my_ooe = new OneOfEach();
              struct.my_ooe.read(iprot);
              struct.setMy_ooeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Nesting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.my_bonk != null) {
        oprot.writeFieldBegin(MY_BONK_FIELD_DESC);
        struct.my_bonk.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.my_ooe != null) {
        oprot.writeFieldBegin(MY_OOE_FIELD_DESC);
        struct.my_ooe.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NestingTupleSchemeFactory implements SchemeFactory {
    public NestingTupleScheme getScheme() {
      return new NestingTupleScheme();
    }
  }

  private static class NestingTupleScheme extends TupleScheme<Nesting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Nesting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMy_bonk()) {
        optionals.set(0);
      }
      if (struct.isSetMy_ooe()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMy_bonk()) {
        struct.my_bonk.write(oprot);
      }
      if (struct.isSetMy_ooe()) {
        struct.my_ooe.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Nesting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.my_bonk = new Bonk();
        struct.my_bonk.read(iprot);
        struct.setMy_bonkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.my_ooe = new OneOfEach();
        struct.my_ooe.read(iprot);
        struct.setMy_ooeIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

