/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class RandomStuff implements org.apache.thrift.TBase<RandomStuff, RandomStuff._Fields>, java.io.Serializable, Cloneable, Comparable<RandomStuff> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RandomStuff");

  private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MYINTLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("myintlist", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("maps", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField BIGINT_FIELD_DESC = new org.apache.thrift.protocol.TField("bigint", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TRIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("triple", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new RandomStuffStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new RandomStuffTupleSchemeFactory();

  public int a; // required
  public int b; // required
  public int c; // required
  public int d; // required
  public List<Integer> myintlist; // required
  public Map<Integer,Wrapper> maps; // required
  public long bigint; // required
  public double triple; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A((short)1, "a"),
    B((short)2, "b"),
    C((short)3, "c"),
    D((short)4, "d"),
    MYINTLIST((short)5, "myintlist"),
    MAPS((short)6, "maps"),
    BIGINT((short)7, "bigint"),
    TRIPLE((short)8, "triple");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A
          return A;
        case 2: // B
          return B;
        case 3: // C
          return C;
        case 4: // D
          return D;
        case 5: // MYINTLIST
          return MYINTLIST;
        case 6: // MAPS
          return MAPS;
        case 7: // BIGINT
          return BIGINT;
        case 8: // TRIPLE
          return TRIPLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A_ISSET_ID = 0;
  private static final int __B_ISSET_ID = 1;
  private static final int __C_ISSET_ID = 2;
  private static final int __D_ISSET_ID = 3;
  private static final int __BIGINT_ISSET_ID = 4;
  private static final int __TRIPLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MYINTLIST, new org.apache.thrift.meta_data.FieldMetaData("myintlist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MAPS, new org.apache.thrift.meta_data.FieldMetaData("maps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Wrapper.class))));
    tmpMap.put(_Fields.BIGINT, new org.apache.thrift.meta_data.FieldMetaData("bigint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRIPLE, new org.apache.thrift.meta_data.FieldMetaData("triple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RandomStuff.class, metaDataMap);
  }

  public RandomStuff() {
  }

  public RandomStuff(
    int a,
    int b,
    int c,
    int d,
    List<Integer> myintlist,
    Map<Integer,Wrapper> maps,
    long bigint,
    double triple)
  {
    this();
    this.a = a;
    setAIsSet(true);
    this.b = b;
    setBIsSet(true);
    this.c = c;
    setCIsSet(true);
    this.d = d;
    setDIsSet(true);
    this.myintlist = myintlist;
    this.maps = maps;
    this.bigint = bigint;
    setBigintIsSet(true);
    this.triple = triple;
    setTripleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RandomStuff(RandomStuff other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a = other.a;
    this.b = other.b;
    this.c = other.c;
    this.d = other.d;
    if (other.isSetMyintlist()) {
      List<Integer> __this__myintlist = new ArrayList<Integer>(other.myintlist);
      this.myintlist = __this__myintlist;
    }
    if (other.isSetMaps()) {
      Map<Integer,Wrapper> __this__maps = new HashMap<Integer,Wrapper>(other.maps.size());
      for (Map.Entry<Integer, Wrapper> other_element : other.maps.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Wrapper other_element_value = other_element.getValue();

        Integer __this__maps_copy_key = other_element_key;

        Wrapper __this__maps_copy_value = new Wrapper(other_element_value);

        __this__maps.put(__this__maps_copy_key, __this__maps_copy_value);
      }
      this.maps = __this__maps;
    }
    this.bigint = other.bigint;
    this.triple = other.triple;
  }

  public RandomStuff deepCopy() {
    return new RandomStuff(this);
  }

  @Override
  public void clear() {
    setAIsSet(false);
    this.a = 0;
    setBIsSet(false);
    this.b = 0;
    setCIsSet(false);
    this.c = 0;
    setDIsSet(false);
    this.d = 0;
    this.myintlist = null;
    this.maps = null;
    setBigintIsSet(false);
    this.bigint = 0;
    setTripleIsSet(false);
    this.triple = 0.0;
  }

  public int getA() {
    return this.a;
  }

  public RandomStuff setA(int a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_ISSET_ID);
  }

  /** Returns true if field a is set (has been assigned a value) and false otherwise */
  public boolean isSetA() {
    return EncodingUtils.testBit(__isset_bitfield, __A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_ISSET_ID, value);
  }

  public int getB() {
    return this.b;
  }

  public RandomStuff setB(int b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public int getC() {
    return this.c;
  }

  public RandomStuff setC(int c) {
    this.c = c;
    setCIsSet(true);
    return this;
  }

  public void unsetC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __C_ISSET_ID);
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return EncodingUtils.testBit(__isset_bitfield, __C_ISSET_ID);
  }

  public void setCIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __C_ISSET_ID, value);
  }

  public int getD() {
    return this.d;
  }

  public RandomStuff setD(int d) {
    this.d = d;
    setDIsSet(true);
    return this;
  }

  public void unsetD() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_ISSET_ID);
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean isSetD() {
    return EncodingUtils.testBit(__isset_bitfield, __D_ISSET_ID);
  }

  public void setDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_ISSET_ID, value);
  }

  public int getMyintlistSize() {
    return (this.myintlist == null) ? 0 : this.myintlist.size();
  }

  public java.util.Iterator<Integer> getMyintlistIterator() {
    return (this.myintlist == null) ? null : this.myintlist.iterator();
  }

  public void addToMyintlist(int elem) {
    if (this.myintlist == null) {
      this.myintlist = new ArrayList<Integer>();
    }
    this.myintlist.add(elem);
  }

  public List<Integer> getMyintlist() {
    return this.myintlist;
  }

  public RandomStuff setMyintlist(List<Integer> myintlist) {
    this.myintlist = myintlist;
    return this;
  }

  public void unsetMyintlist() {
    this.myintlist = null;
  }

  /** Returns true if field myintlist is set (has been assigned a value) and false otherwise */
  public boolean isSetMyintlist() {
    return this.myintlist != null;
  }

  public void setMyintlistIsSet(boolean value) {
    if (!value) {
      this.myintlist = null;
    }
  }

  public int getMapsSize() {
    return (this.maps == null) ? 0 : this.maps.size();
  }

  public void putToMaps(int key, Wrapper val) {
    if (this.maps == null) {
      this.maps = new HashMap<Integer,Wrapper>();
    }
    this.maps.put(key, val);
  }

  public Map<Integer,Wrapper> getMaps() {
    return this.maps;
  }

  public RandomStuff setMaps(Map<Integer,Wrapper> maps) {
    this.maps = maps;
    return this;
  }

  public void unsetMaps() {
    this.maps = null;
  }

  /** Returns true if field maps is set (has been assigned a value) and false otherwise */
  public boolean isSetMaps() {
    return this.maps != null;
  }

  public void setMapsIsSet(boolean value) {
    if (!value) {
      this.maps = null;
    }
  }

  public long getBigint() {
    return this.bigint;
  }

  public RandomStuff setBigint(long bigint) {
    this.bigint = bigint;
    setBigintIsSet(true);
    return this;
  }

  public void unsetBigint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGINT_ISSET_ID);
  }

  /** Returns true if field bigint is set (has been assigned a value) and false otherwise */
  public boolean isSetBigint() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGINT_ISSET_ID);
  }

  public void setBigintIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGINT_ISSET_ID, value);
  }

  public double getTriple() {
    return this.triple;
  }

  public RandomStuff setTriple(double triple) {
    this.triple = triple;
    setTripleIsSet(true);
    return this;
  }

  public void unsetTriple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIPLE_ISSET_ID);
  }

  /** Returns true if field triple is set (has been assigned a value) and false otherwise */
  public boolean isSetTriple() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIPLE_ISSET_ID);
  }

  public void setTripleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIPLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((Integer)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((Integer)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((Integer)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        setD((Integer)value);
      }
      break;

    case MYINTLIST:
      if (value == null) {
        unsetMyintlist();
      } else {
        setMyintlist((List<Integer>)value);
      }
      break;

    case MAPS:
      if (value == null) {
        unsetMaps();
      } else {
        setMaps((Map<Integer,Wrapper>)value);
      }
      break;

    case BIGINT:
      if (value == null) {
        unsetBigint();
      } else {
        setBigint((Long)value);
      }
      break;

    case TRIPLE:
      if (value == null) {
        unsetTriple();
      } else {
        setTriple((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A:
      return getA();

    case B:
      return getB();

    case C:
      return getC();

    case D:
      return getD();

    case MYINTLIST:
      return getMyintlist();

    case MAPS:
      return getMaps();

    case BIGINT:
      return getBigint();

    case TRIPLE:
      return getTriple();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A:
      return isSetA();
    case B:
      return isSetB();
    case C:
      return isSetC();
    case D:
      return isSetD();
    case MYINTLIST:
      return isSetMyintlist();
    case MAPS:
      return isSetMaps();
    case BIGINT:
      return isSetBigint();
    case TRIPLE:
      return isSetTriple();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RandomStuff)
      return this.equals((RandomStuff)that);
    return false;
  }

  public boolean equals(RandomStuff that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (this.a != that.a)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_c = true;
    boolean that_present_c = true;
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (this.c != that.c)
        return false;
    }

    boolean this_present_d = true;
    boolean that_present_d = true;
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (this.d != that.d)
        return false;
    }

    boolean this_present_myintlist = true && this.isSetMyintlist();
    boolean that_present_myintlist = true && that.isSetMyintlist();
    if (this_present_myintlist || that_present_myintlist) {
      if (!(this_present_myintlist && that_present_myintlist))
        return false;
      if (!this.myintlist.equals(that.myintlist))
        return false;
    }

    boolean this_present_maps = true && this.isSetMaps();
    boolean that_present_maps = true && that.isSetMaps();
    if (this_present_maps || that_present_maps) {
      if (!(this_present_maps && that_present_maps))
        return false;
      if (!this.maps.equals(that.maps))
        return false;
    }

    boolean this_present_bigint = true;
    boolean that_present_bigint = true;
    if (this_present_bigint || that_present_bigint) {
      if (!(this_present_bigint && that_present_bigint))
        return false;
      if (this.bigint != that.bigint)
        return false;
    }

    boolean this_present_triple = true;
    boolean that_present_triple = true;
    if (this_present_triple || that_present_triple) {
      if (!(this_present_triple && that_present_triple))
        return false;
      if (this.triple != that.triple)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + a;

    hashCode = hashCode * 8191 + b;

    hashCode = hashCode * 8191 + c;

    hashCode = hashCode * 8191 + d;

    hashCode = hashCode * 8191 + ((isSetMyintlist()) ? 131071 : 524287);
    if (isSetMyintlist())
      hashCode = hashCode * 8191 + myintlist.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaps()) ? 131071 : 524287);
    if (isSetMaps())
      hashCode = hashCode * 8191 + maps.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigint);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(triple);

    return hashCode;
  }

  @Override
  public int compareTo(RandomStuff other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyintlist()).compareTo(other.isSetMyintlist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyintlist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myintlist, other.myintlist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaps()).compareTo(other.isSetMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maps, other.maps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigint()).compareTo(other.isSetBigint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigint, other.bigint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriple()).compareTo(other.isSetTriple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triple, other.triple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RandomStuff(");
    boolean first = true;

    sb.append("a:");
    sb.append(this.a);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c:");
    sb.append(this.c);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d:");
    sb.append(this.d);
    first = false;
    if (!first) sb.append(", ");
    sb.append("myintlist:");
    if (this.myintlist == null) {
      sb.append("null");
    } else {
      sb.append(this.myintlist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maps:");
    if (this.maps == null) {
      sb.append("null");
    } else {
      sb.append(this.maps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigint:");
    sb.append(this.bigint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("triple:");
    sb.append(this.triple);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RandomStuffStandardSchemeFactory implements SchemeFactory {
    public RandomStuffStandardScheme getScheme() {
      return new RandomStuffStandardScheme();
    }
  }

  private static class RandomStuffStandardScheme extends StandardScheme<RandomStuff> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RandomStuff struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.a = iprot.readI32();
              struct.setAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.b = iprot.readI32();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.c = iprot.readI32();
              struct.setCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.d = iprot.readI32();
              struct.setDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MYINTLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.myintlist = new ArrayList<Integer>(_list66.size);
                int _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = iprot.readI32();
                  struct.myintlist.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setMyintlistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
                struct.maps = new HashMap<Integer,Wrapper>(2*_map69.size);
                int _key70;
                Wrapper _val71;
                for (int _i72 = 0; _i72 < _map69.size; ++_i72)
                {
                  _key70 = iprot.readI32();
                  _val71 = new Wrapper();
                  _val71.read(iprot);
                  struct.maps.put(_key70, _val71);
                }
                iprot.readMapEnd();
              }
              struct.setMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIGINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bigint = iprot.readI64();
              struct.setBigintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.triple = iprot.readDouble();
              struct.setTripleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RandomStuff struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(A_FIELD_DESC);
      oprot.writeI32(struct.a);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeI32(struct.b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(C_FIELD_DESC);
      oprot.writeI32(struct.c);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D_FIELD_DESC);
      oprot.writeI32(struct.d);
      oprot.writeFieldEnd();
      if (struct.myintlist != null) {
        oprot.writeFieldBegin(MYINTLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.myintlist.size()));
          for (int _iter73 : struct.myintlist)
          {
            oprot.writeI32(_iter73);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.maps != null) {
        oprot.writeFieldBegin(MAPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.maps.size()));
          for (Map.Entry<Integer, Wrapper> _iter74 : struct.maps.entrySet())
          {
            oprot.writeI32(_iter74.getKey());
            _iter74.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIGINT_FIELD_DESC);
      oprot.writeI64(struct.bigint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIPLE_FIELD_DESC);
      oprot.writeDouble(struct.triple);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RandomStuffTupleSchemeFactory implements SchemeFactory {
    public RandomStuffTupleScheme getScheme() {
      return new RandomStuffTupleScheme();
    }
  }

  private static class RandomStuffTupleScheme extends TupleScheme<RandomStuff> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RandomStuff struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetA()) {
        optionals.set(0);
      }
      if (struct.isSetB()) {
        optionals.set(1);
      }
      if (struct.isSetC()) {
        optionals.set(2);
      }
      if (struct.isSetD()) {
        optionals.set(3);
      }
      if (struct.isSetMyintlist()) {
        optionals.set(4);
      }
      if (struct.isSetMaps()) {
        optionals.set(5);
      }
      if (struct.isSetBigint()) {
        optionals.set(6);
      }
      if (struct.isSetTriple()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetA()) {
        oprot.writeI32(struct.a);
      }
      if (struct.isSetB()) {
        oprot.writeI32(struct.b);
      }
      if (struct.isSetC()) {
        oprot.writeI32(struct.c);
      }
      if (struct.isSetD()) {
        oprot.writeI32(struct.d);
      }
      if (struct.isSetMyintlist()) {
        {
          oprot.writeI32(struct.myintlist.size());
          for (int _iter75 : struct.myintlist)
          {
            oprot.writeI32(_iter75);
          }
        }
      }
      if (struct.isSetMaps()) {
        {
          oprot.writeI32(struct.maps.size());
          for (Map.Entry<Integer, Wrapper> _iter76 : struct.maps.entrySet())
          {
            oprot.writeI32(_iter76.getKey());
            _iter76.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetBigint()) {
        oprot.writeI64(struct.bigint);
      }
      if (struct.isSetTriple()) {
        oprot.writeDouble(struct.triple);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RandomStuff struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.a = iprot.readI32();
        struct.setAIsSet(true);
      }
      if (incoming.get(1)) {
        struct.b = iprot.readI32();
        struct.setBIsSet(true);
      }
      if (incoming.get(2)) {
        struct.c = iprot.readI32();
        struct.setCIsSet(true);
      }
      if (incoming.get(3)) {
        struct.d = iprot.readI32();
        struct.setDIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.myintlist = new ArrayList<Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.myintlist.add(_elem78);
          }
        }
        struct.setMyintlistIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.maps = new HashMap<Integer,Wrapper>(2*_map80.size);
          int _key81;
          Wrapper _val82;
          for (int _i83 = 0; _i83 < _map80.size; ++_i83)
          {
            _key81 = iprot.readI32();
            _val82 = new Wrapper();
            _val82.read(iprot);
            struct.maps.put(_key81, _val82);
          }
        }
        struct.setMapsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bigint = iprot.readI64();
        struct.setBigintIsSet(true);
      }
      if (incoming.get(7)) {
        struct.triple = iprot.readDouble();
        struct.setTripleIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

