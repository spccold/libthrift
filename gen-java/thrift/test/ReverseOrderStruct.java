/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class ReverseOrderStruct implements org.apache.thrift.TBase<ReverseOrderStruct, ReverseOrderStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ReverseOrderStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReverseOrderStruct");

  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("second", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField THIRD_FIELD_DESC = new org.apache.thrift.protocol.TField("third", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FOURTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fourth", org.apache.thrift.protocol.TType.I64, (short)1);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ReverseOrderStructStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ReverseOrderStructTupleSchemeFactory();

  public String first; // required
  public short second; // required
  public int third; // required
  public long fourth; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST((short)4, "first"),
    SECOND((short)3, "second"),
    THIRD((short)2, "third"),
    FOURTH((short)1, "fourth");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 4: // FIRST
          return FIRST;
        case 3: // SECOND
          return SECOND;
        case 2: // THIRD
          return THIRD;
        case 1: // FOURTH
          return FOURTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SECOND_ISSET_ID = 0;
  private static final int __THIRD_ISSET_ID = 1;
  private static final int __FOURTH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND, new org.apache.thrift.meta_data.FieldMetaData("second", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.THIRD, new org.apache.thrift.meta_data.FieldMetaData("third", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOURTH, new org.apache.thrift.meta_data.FieldMetaData("fourth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReverseOrderStruct.class, metaDataMap);
  }

  public ReverseOrderStruct() {
  }

  public ReverseOrderStruct(
    String first,
    short second,
    int third,
    long fourth)
  {
    this();
    this.first = first;
    this.second = second;
    setSecondIsSet(true);
    this.third = third;
    setThirdIsSet(true);
    this.fourth = fourth;
    setFourthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReverseOrderStruct(ReverseOrderStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFirst()) {
      this.first = other.first;
    }
    this.second = other.second;
    this.third = other.third;
    this.fourth = other.fourth;
  }

  public ReverseOrderStruct deepCopy() {
    return new ReverseOrderStruct(this);
  }

  @Override
  public void clear() {
    this.first = null;
    setSecondIsSet(false);
    this.second = 0;
    setThirdIsSet(false);
    this.third = 0;
    setFourthIsSet(false);
    this.fourth = 0;
  }

  public String getFirst() {
    return this.first;
  }

  public ReverseOrderStruct setFirst(String first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  public short getSecond() {
    return this.second;
  }

  public ReverseOrderStruct setSecond(short second) {
    this.second = second;
    setSecondIsSet(true);
    return this;
  }

  public void unsetSecond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECOND_ISSET_ID);
  }

  /** Returns true if field second is set (has been assigned a value) and false otherwise */
  public boolean isSetSecond() {
    return EncodingUtils.testBit(__isset_bitfield, __SECOND_ISSET_ID);
  }

  public void setSecondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECOND_ISSET_ID, value);
  }

  public int getThird() {
    return this.third;
  }

  public ReverseOrderStruct setThird(int third) {
    this.third = third;
    setThirdIsSet(true);
    return this;
  }

  public void unsetThird() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIRD_ISSET_ID);
  }

  /** Returns true if field third is set (has been assigned a value) and false otherwise */
  public boolean isSetThird() {
    return EncodingUtils.testBit(__isset_bitfield, __THIRD_ISSET_ID);
  }

  public void setThirdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIRD_ISSET_ID, value);
  }

  public long getFourth() {
    return this.fourth;
  }

  public ReverseOrderStruct setFourth(long fourth) {
    this.fourth = fourth;
    setFourthIsSet(true);
    return this;
  }

  public void unsetFourth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOURTH_ISSET_ID);
  }

  /** Returns true if field fourth is set (has been assigned a value) and false otherwise */
  public boolean isSetFourth() {
    return EncodingUtils.testBit(__isset_bitfield, __FOURTH_ISSET_ID);
  }

  public void setFourthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOURTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((String)value);
      }
      break;

    case SECOND:
      if (value == null) {
        unsetSecond();
      } else {
        setSecond((Short)value);
      }
      break;

    case THIRD:
      if (value == null) {
        unsetThird();
      } else {
        setThird((Integer)value);
      }
      break;

    case FOURTH:
      if (value == null) {
        unsetFourth();
      } else {
        setFourth((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST:
      return getFirst();

    case SECOND:
      return getSecond();

    case THIRD:
      return getThird();

    case FOURTH:
      return getFourth();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST:
      return isSetFirst();
    case SECOND:
      return isSetSecond();
    case THIRD:
      return isSetThird();
    case FOURTH:
      return isSetFourth();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReverseOrderStruct)
      return this.equals((ReverseOrderStruct)that);
    return false;
  }

  public boolean equals(ReverseOrderStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_second = true;
    boolean that_present_second = true;
    if (this_present_second || that_present_second) {
      if (!(this_present_second && that_present_second))
        return false;
      if (this.second != that.second)
        return false;
    }

    boolean this_present_third = true;
    boolean that_present_third = true;
    if (this_present_third || that_present_third) {
      if (!(this_present_third && that_present_third))
        return false;
      if (this.third != that.third)
        return false;
    }

    boolean this_present_fourth = true;
    boolean that_present_fourth = true;
    if (this_present_fourth || that_present_fourth) {
      if (!(this_present_fourth && that_present_fourth))
        return false;
      if (this.fourth != that.fourth)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFirst()) ? 131071 : 524287);
    if (isSetFirst())
      hashCode = hashCode * 8191 + first.hashCode();

    hashCode = hashCode * 8191 + second;

    hashCode = hashCode * 8191 + third;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fourth);

    return hashCode;
  }

  @Override
  public int compareTo(ReverseOrderStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second, other.second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThird()).compareTo(other.isSetThird());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThird()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.third, other.third);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFourth()).compareTo(other.isSetFourth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFourth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fourth, other.fourth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReverseOrderStruct(");
    boolean first = true;

    sb.append("first:");
    if (this.first == null) {
      sb.append("null");
    } else {
      sb.append(this.first);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("second:");
    sb.append(this.second);
    first = false;
    if (!first) sb.append(", ");
    sb.append("third:");
    sb.append(this.third);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fourth:");
    sb.append(this.fourth);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReverseOrderStructStandardSchemeFactory implements SchemeFactory {
    public ReverseOrderStructStandardScheme getScheme() {
      return new ReverseOrderStructStandardScheme();
    }
  }

  private static class ReverseOrderStructStandardScheme extends StandardScheme<ReverseOrderStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReverseOrderStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 4: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first = iprot.readString();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.second = iprot.readI16();
              struct.setSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THIRD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.third = iprot.readI32();
              struct.setThirdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // FOURTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fourth = iprot.readI64();
              struct.setFourthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReverseOrderStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FOURTH_FIELD_DESC);
      oprot.writeI64(struct.fourth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THIRD_FIELD_DESC);
      oprot.writeI32(struct.third);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECOND_FIELD_DESC);
      oprot.writeI16(struct.second);
      oprot.writeFieldEnd();
      if (struct.first != null) {
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeString(struct.first);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReverseOrderStructTupleSchemeFactory implements SchemeFactory {
    public ReverseOrderStructTupleScheme getScheme() {
      return new ReverseOrderStructTupleScheme();
    }
  }

  private static class ReverseOrderStructTupleScheme extends TupleScheme<ReverseOrderStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReverseOrderStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirst()) {
        optionals.set(0);
      }
      if (struct.isSetSecond()) {
        optionals.set(1);
      }
      if (struct.isSetThird()) {
        optionals.set(2);
      }
      if (struct.isSetFourth()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFirst()) {
        oprot.writeString(struct.first);
      }
      if (struct.isSetSecond()) {
        oprot.writeI16(struct.second);
      }
      if (struct.isSetThird()) {
        oprot.writeI32(struct.third);
      }
      if (struct.isSetFourth()) {
        oprot.writeI64(struct.fourth);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReverseOrderStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.first = iprot.readString();
        struct.setFirstIsSet(true);
      }
      if (incoming.get(1)) {
        struct.second = iprot.readI16();
        struct.setSecondIsSet(true);
      }
      if (incoming.get(2)) {
        struct.third = iprot.readI32();
        struct.setThirdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fourth = iprot.readI64();
        struct.setFourthIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

