/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Opt30 implements org.apache.thrift.TBase<Opt30, Opt30._Fields>, java.io.Serializable, Cloneable, Comparable<Opt30> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Opt30");

  private static final org.apache.thrift.protocol.TField DEF1_FIELD_DESC = new org.apache.thrift.protocol.TField("def1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEF2_FIELD_DESC = new org.apache.thrift.protocol.TField("def2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DEF3_FIELD_DESC = new org.apache.thrift.protocol.TField("def3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEF4_FIELD_DESC = new org.apache.thrift.protocol.TField("def4", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEF5_FIELD_DESC = new org.apache.thrift.protocol.TField("def5", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEF6_FIELD_DESC = new org.apache.thrift.protocol.TField("def6", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEF7_FIELD_DESC = new org.apache.thrift.protocol.TField("def7", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEF8_FIELD_DESC = new org.apache.thrift.protocol.TField("def8", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DEF9_FIELD_DESC = new org.apache.thrift.protocol.TField("def9", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DEF10_FIELD_DESC = new org.apache.thrift.protocol.TField("def10", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DEF11_FIELD_DESC = new org.apache.thrift.protocol.TField("def11", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DEF12_FIELD_DESC = new org.apache.thrift.protocol.TField("def12", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DEF13_FIELD_DESC = new org.apache.thrift.protocol.TField("def13", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DEF14_FIELD_DESC = new org.apache.thrift.protocol.TField("def14", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEF15_FIELD_DESC = new org.apache.thrift.protocol.TField("def15", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField DEF16_FIELD_DESC = new org.apache.thrift.protocol.TField("def16", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DEF17_FIELD_DESC = new org.apache.thrift.protocol.TField("def17", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField DEF18_FIELD_DESC = new org.apache.thrift.protocol.TField("def18", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField DEF19_FIELD_DESC = new org.apache.thrift.protocol.TField("def19", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField DEF20_FIELD_DESC = new org.apache.thrift.protocol.TField("def20", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField DEF21_FIELD_DESC = new org.apache.thrift.protocol.TField("def21", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField DEF22_FIELD_DESC = new org.apache.thrift.protocol.TField("def22", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField DEF23_FIELD_DESC = new org.apache.thrift.protocol.TField("def23", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField DEF24_FIELD_DESC = new org.apache.thrift.protocol.TField("def24", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField DEF25_FIELD_DESC = new org.apache.thrift.protocol.TField("def25", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField DEF26_FIELD_DESC = new org.apache.thrift.protocol.TField("def26", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField DEF27_FIELD_DESC = new org.apache.thrift.protocol.TField("def27", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField DEF28_FIELD_DESC = new org.apache.thrift.protocol.TField("def28", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField DEF29_FIELD_DESC = new org.apache.thrift.protocol.TField("def29", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField DEF30_FIELD_DESC = new org.apache.thrift.protocol.TField("def30", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new Opt30StandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new Opt30TupleSchemeFactory();

  public int def1; // required
  public int def2; // required
  public int def3; // required
  public int def4; // required
  public int def5; // required
  public int def6; // required
  public int def7; // required
  public int def8; // required
  public int def9; // required
  public int def10; // required
  public int def11; // required
  public int def12; // required
  public int def13; // required
  public int def14; // required
  public int def15; // required
  public int def16; // required
  public int def17; // required
  public int def18; // required
  public int def19; // required
  public int def20; // required
  public int def21; // required
  public int def22; // required
  public int def23; // required
  public int def24; // required
  public int def25; // required
  public int def26; // required
  public int def27; // required
  public int def28; // required
  public int def29; // required
  public int def30; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEF1((short)1, "def1"),
    DEF2((short)2, "def2"),
    DEF3((short)3, "def3"),
    DEF4((short)4, "def4"),
    DEF5((short)5, "def5"),
    DEF6((short)6, "def6"),
    DEF7((short)7, "def7"),
    DEF8((short)8, "def8"),
    DEF9((short)9, "def9"),
    DEF10((short)10, "def10"),
    DEF11((short)11, "def11"),
    DEF12((short)12, "def12"),
    DEF13((short)13, "def13"),
    DEF14((short)14, "def14"),
    DEF15((short)15, "def15"),
    DEF16((short)16, "def16"),
    DEF17((short)17, "def17"),
    DEF18((short)18, "def18"),
    DEF19((short)19, "def19"),
    DEF20((short)20, "def20"),
    DEF21((short)21, "def21"),
    DEF22((short)22, "def22"),
    DEF23((short)23, "def23"),
    DEF24((short)24, "def24"),
    DEF25((short)25, "def25"),
    DEF26((short)26, "def26"),
    DEF27((short)27, "def27"),
    DEF28((short)28, "def28"),
    DEF29((short)29, "def29"),
    DEF30((short)30, "def30");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEF1
          return DEF1;
        case 2: // DEF2
          return DEF2;
        case 3: // DEF3
          return DEF3;
        case 4: // DEF4
          return DEF4;
        case 5: // DEF5
          return DEF5;
        case 6: // DEF6
          return DEF6;
        case 7: // DEF7
          return DEF7;
        case 8: // DEF8
          return DEF8;
        case 9: // DEF9
          return DEF9;
        case 10: // DEF10
          return DEF10;
        case 11: // DEF11
          return DEF11;
        case 12: // DEF12
          return DEF12;
        case 13: // DEF13
          return DEF13;
        case 14: // DEF14
          return DEF14;
        case 15: // DEF15
          return DEF15;
        case 16: // DEF16
          return DEF16;
        case 17: // DEF17
          return DEF17;
        case 18: // DEF18
          return DEF18;
        case 19: // DEF19
          return DEF19;
        case 20: // DEF20
          return DEF20;
        case 21: // DEF21
          return DEF21;
        case 22: // DEF22
          return DEF22;
        case 23: // DEF23
          return DEF23;
        case 24: // DEF24
          return DEF24;
        case 25: // DEF25
          return DEF25;
        case 26: // DEF26
          return DEF26;
        case 27: // DEF27
          return DEF27;
        case 28: // DEF28
          return DEF28;
        case 29: // DEF29
          return DEF29;
        case 30: // DEF30
          return DEF30;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEF1_ISSET_ID = 0;
  private static final int __DEF2_ISSET_ID = 1;
  private static final int __DEF3_ISSET_ID = 2;
  private static final int __DEF4_ISSET_ID = 3;
  private static final int __DEF5_ISSET_ID = 4;
  private static final int __DEF6_ISSET_ID = 5;
  private static final int __DEF7_ISSET_ID = 6;
  private static final int __DEF8_ISSET_ID = 7;
  private static final int __DEF9_ISSET_ID = 8;
  private static final int __DEF10_ISSET_ID = 9;
  private static final int __DEF11_ISSET_ID = 10;
  private static final int __DEF12_ISSET_ID = 11;
  private static final int __DEF13_ISSET_ID = 12;
  private static final int __DEF14_ISSET_ID = 13;
  private static final int __DEF15_ISSET_ID = 14;
  private static final int __DEF16_ISSET_ID = 15;
  private static final int __DEF17_ISSET_ID = 16;
  private static final int __DEF18_ISSET_ID = 17;
  private static final int __DEF19_ISSET_ID = 18;
  private static final int __DEF20_ISSET_ID = 19;
  private static final int __DEF21_ISSET_ID = 20;
  private static final int __DEF22_ISSET_ID = 21;
  private static final int __DEF23_ISSET_ID = 22;
  private static final int __DEF24_ISSET_ID = 23;
  private static final int __DEF25_ISSET_ID = 24;
  private static final int __DEF26_ISSET_ID = 25;
  private static final int __DEF27_ISSET_ID = 26;
  private static final int __DEF28_ISSET_ID = 27;
  private static final int __DEF29_ISSET_ID = 28;
  private static final int __DEF30_ISSET_ID = 29;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEF1, new org.apache.thrift.meta_data.FieldMetaData("def1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF2, new org.apache.thrift.meta_data.FieldMetaData("def2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF3, new org.apache.thrift.meta_data.FieldMetaData("def3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF4, new org.apache.thrift.meta_data.FieldMetaData("def4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF5, new org.apache.thrift.meta_data.FieldMetaData("def5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF6, new org.apache.thrift.meta_data.FieldMetaData("def6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF7, new org.apache.thrift.meta_data.FieldMetaData("def7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF8, new org.apache.thrift.meta_data.FieldMetaData("def8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF9, new org.apache.thrift.meta_data.FieldMetaData("def9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF10, new org.apache.thrift.meta_data.FieldMetaData("def10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF11, new org.apache.thrift.meta_data.FieldMetaData("def11", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF12, new org.apache.thrift.meta_data.FieldMetaData("def12", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF13, new org.apache.thrift.meta_data.FieldMetaData("def13", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF14, new org.apache.thrift.meta_data.FieldMetaData("def14", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF15, new org.apache.thrift.meta_data.FieldMetaData("def15", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF16, new org.apache.thrift.meta_data.FieldMetaData("def16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF17, new org.apache.thrift.meta_data.FieldMetaData("def17", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF18, new org.apache.thrift.meta_data.FieldMetaData("def18", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF19, new org.apache.thrift.meta_data.FieldMetaData("def19", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF20, new org.apache.thrift.meta_data.FieldMetaData("def20", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF21, new org.apache.thrift.meta_data.FieldMetaData("def21", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF22, new org.apache.thrift.meta_data.FieldMetaData("def22", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF23, new org.apache.thrift.meta_data.FieldMetaData("def23", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF24, new org.apache.thrift.meta_data.FieldMetaData("def24", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF25, new org.apache.thrift.meta_data.FieldMetaData("def25", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF26, new org.apache.thrift.meta_data.FieldMetaData("def26", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF27, new org.apache.thrift.meta_data.FieldMetaData("def27", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF28, new org.apache.thrift.meta_data.FieldMetaData("def28", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF29, new org.apache.thrift.meta_data.FieldMetaData("def29", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF30, new org.apache.thrift.meta_data.FieldMetaData("def30", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Opt30.class, metaDataMap);
  }

  public Opt30() {
  }

  public Opt30(
    int def1,
    int def2,
    int def3,
    int def4,
    int def5,
    int def6,
    int def7,
    int def8,
    int def9,
    int def10,
    int def11,
    int def12,
    int def13,
    int def14,
    int def15,
    int def16,
    int def17,
    int def18,
    int def19,
    int def20,
    int def21,
    int def22,
    int def23,
    int def24,
    int def25,
    int def26,
    int def27,
    int def28,
    int def29,
    int def30)
  {
    this();
    this.def1 = def1;
    setDef1IsSet(true);
    this.def2 = def2;
    setDef2IsSet(true);
    this.def3 = def3;
    setDef3IsSet(true);
    this.def4 = def4;
    setDef4IsSet(true);
    this.def5 = def5;
    setDef5IsSet(true);
    this.def6 = def6;
    setDef6IsSet(true);
    this.def7 = def7;
    setDef7IsSet(true);
    this.def8 = def8;
    setDef8IsSet(true);
    this.def9 = def9;
    setDef9IsSet(true);
    this.def10 = def10;
    setDef10IsSet(true);
    this.def11 = def11;
    setDef11IsSet(true);
    this.def12 = def12;
    setDef12IsSet(true);
    this.def13 = def13;
    setDef13IsSet(true);
    this.def14 = def14;
    setDef14IsSet(true);
    this.def15 = def15;
    setDef15IsSet(true);
    this.def16 = def16;
    setDef16IsSet(true);
    this.def17 = def17;
    setDef17IsSet(true);
    this.def18 = def18;
    setDef18IsSet(true);
    this.def19 = def19;
    setDef19IsSet(true);
    this.def20 = def20;
    setDef20IsSet(true);
    this.def21 = def21;
    setDef21IsSet(true);
    this.def22 = def22;
    setDef22IsSet(true);
    this.def23 = def23;
    setDef23IsSet(true);
    this.def24 = def24;
    setDef24IsSet(true);
    this.def25 = def25;
    setDef25IsSet(true);
    this.def26 = def26;
    setDef26IsSet(true);
    this.def27 = def27;
    setDef27IsSet(true);
    this.def28 = def28;
    setDef28IsSet(true);
    this.def29 = def29;
    setDef29IsSet(true);
    this.def30 = def30;
    setDef30IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Opt30(Opt30 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.def1 = other.def1;
    this.def2 = other.def2;
    this.def3 = other.def3;
    this.def4 = other.def4;
    this.def5 = other.def5;
    this.def6 = other.def6;
    this.def7 = other.def7;
    this.def8 = other.def8;
    this.def9 = other.def9;
    this.def10 = other.def10;
    this.def11 = other.def11;
    this.def12 = other.def12;
    this.def13 = other.def13;
    this.def14 = other.def14;
    this.def15 = other.def15;
    this.def16 = other.def16;
    this.def17 = other.def17;
    this.def18 = other.def18;
    this.def19 = other.def19;
    this.def20 = other.def20;
    this.def21 = other.def21;
    this.def22 = other.def22;
    this.def23 = other.def23;
    this.def24 = other.def24;
    this.def25 = other.def25;
    this.def26 = other.def26;
    this.def27 = other.def27;
    this.def28 = other.def28;
    this.def29 = other.def29;
    this.def30 = other.def30;
  }

  public Opt30 deepCopy() {
    return new Opt30(this);
  }

  @Override
  public void clear() {
    setDef1IsSet(false);
    this.def1 = 0;
    setDef2IsSet(false);
    this.def2 = 0;
    setDef3IsSet(false);
    this.def3 = 0;
    setDef4IsSet(false);
    this.def4 = 0;
    setDef5IsSet(false);
    this.def5 = 0;
    setDef6IsSet(false);
    this.def6 = 0;
    setDef7IsSet(false);
    this.def7 = 0;
    setDef8IsSet(false);
    this.def8 = 0;
    setDef9IsSet(false);
    this.def9 = 0;
    setDef10IsSet(false);
    this.def10 = 0;
    setDef11IsSet(false);
    this.def11 = 0;
    setDef12IsSet(false);
    this.def12 = 0;
    setDef13IsSet(false);
    this.def13 = 0;
    setDef14IsSet(false);
    this.def14 = 0;
    setDef15IsSet(false);
    this.def15 = 0;
    setDef16IsSet(false);
    this.def16 = 0;
    setDef17IsSet(false);
    this.def17 = 0;
    setDef18IsSet(false);
    this.def18 = 0;
    setDef19IsSet(false);
    this.def19 = 0;
    setDef20IsSet(false);
    this.def20 = 0;
    setDef21IsSet(false);
    this.def21 = 0;
    setDef22IsSet(false);
    this.def22 = 0;
    setDef23IsSet(false);
    this.def23 = 0;
    setDef24IsSet(false);
    this.def24 = 0;
    setDef25IsSet(false);
    this.def25 = 0;
    setDef26IsSet(false);
    this.def26 = 0;
    setDef27IsSet(false);
    this.def27 = 0;
    setDef28IsSet(false);
    this.def28 = 0;
    setDef29IsSet(false);
    this.def29 = 0;
    setDef30IsSet(false);
    this.def30 = 0;
  }

  public int getDef1() {
    return this.def1;
  }

  public Opt30 setDef1(int def1) {
    this.def1 = def1;
    setDef1IsSet(true);
    return this;
  }

  public void unsetDef1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  /** Returns true if field def1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef1() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF1_ISSET_ID);
  }

  public void setDef1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF1_ISSET_ID, value);
  }

  public int getDef2() {
    return this.def2;
  }

  public Opt30 setDef2(int def2) {
    this.def2 = def2;
    setDef2IsSet(true);
    return this;
  }

  public void unsetDef2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  /** Returns true if field def2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef2() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF2_ISSET_ID);
  }

  public void setDef2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF2_ISSET_ID, value);
  }

  public int getDef3() {
    return this.def3;
  }

  public Opt30 setDef3(int def3) {
    this.def3 = def3;
    setDef3IsSet(true);
    return this;
  }

  public void unsetDef3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  /** Returns true if field def3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef3() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF3_ISSET_ID);
  }

  public void setDef3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF3_ISSET_ID, value);
  }

  public int getDef4() {
    return this.def4;
  }

  public Opt30 setDef4(int def4) {
    this.def4 = def4;
    setDef4IsSet(true);
    return this;
  }

  public void unsetDef4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  /** Returns true if field def4 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef4() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF4_ISSET_ID);
  }

  public void setDef4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF4_ISSET_ID, value);
  }

  public int getDef5() {
    return this.def5;
  }

  public Opt30 setDef5(int def5) {
    this.def5 = def5;
    setDef5IsSet(true);
    return this;
  }

  public void unsetDef5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF5_ISSET_ID);
  }

  /** Returns true if field def5 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef5() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF5_ISSET_ID);
  }

  public void setDef5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF5_ISSET_ID, value);
  }

  public int getDef6() {
    return this.def6;
  }

  public Opt30 setDef6(int def6) {
    this.def6 = def6;
    setDef6IsSet(true);
    return this;
  }

  public void unsetDef6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF6_ISSET_ID);
  }

  /** Returns true if field def6 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef6() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF6_ISSET_ID);
  }

  public void setDef6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF6_ISSET_ID, value);
  }

  public int getDef7() {
    return this.def7;
  }

  public Opt30 setDef7(int def7) {
    this.def7 = def7;
    setDef7IsSet(true);
    return this;
  }

  public void unsetDef7() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF7_ISSET_ID);
  }

  /** Returns true if field def7 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef7() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF7_ISSET_ID);
  }

  public void setDef7IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF7_ISSET_ID, value);
  }

  public int getDef8() {
    return this.def8;
  }

  public Opt30 setDef8(int def8) {
    this.def8 = def8;
    setDef8IsSet(true);
    return this;
  }

  public void unsetDef8() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF8_ISSET_ID);
  }

  /** Returns true if field def8 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef8() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF8_ISSET_ID);
  }

  public void setDef8IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF8_ISSET_ID, value);
  }

  public int getDef9() {
    return this.def9;
  }

  public Opt30 setDef9(int def9) {
    this.def9 = def9;
    setDef9IsSet(true);
    return this;
  }

  public void unsetDef9() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF9_ISSET_ID);
  }

  /** Returns true if field def9 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef9() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF9_ISSET_ID);
  }

  public void setDef9IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF9_ISSET_ID, value);
  }

  public int getDef10() {
    return this.def10;
  }

  public Opt30 setDef10(int def10) {
    this.def10 = def10;
    setDef10IsSet(true);
    return this;
  }

  public void unsetDef10() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF10_ISSET_ID);
  }

  /** Returns true if field def10 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef10() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF10_ISSET_ID);
  }

  public void setDef10IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF10_ISSET_ID, value);
  }

  public int getDef11() {
    return this.def11;
  }

  public Opt30 setDef11(int def11) {
    this.def11 = def11;
    setDef11IsSet(true);
    return this;
  }

  public void unsetDef11() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF11_ISSET_ID);
  }

  /** Returns true if field def11 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef11() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF11_ISSET_ID);
  }

  public void setDef11IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF11_ISSET_ID, value);
  }

  public int getDef12() {
    return this.def12;
  }

  public Opt30 setDef12(int def12) {
    this.def12 = def12;
    setDef12IsSet(true);
    return this;
  }

  public void unsetDef12() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF12_ISSET_ID);
  }

  /** Returns true if field def12 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef12() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF12_ISSET_ID);
  }

  public void setDef12IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF12_ISSET_ID, value);
  }

  public int getDef13() {
    return this.def13;
  }

  public Opt30 setDef13(int def13) {
    this.def13 = def13;
    setDef13IsSet(true);
    return this;
  }

  public void unsetDef13() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF13_ISSET_ID);
  }

  /** Returns true if field def13 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef13() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF13_ISSET_ID);
  }

  public void setDef13IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF13_ISSET_ID, value);
  }

  public int getDef14() {
    return this.def14;
  }

  public Opt30 setDef14(int def14) {
    this.def14 = def14;
    setDef14IsSet(true);
    return this;
  }

  public void unsetDef14() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF14_ISSET_ID);
  }

  /** Returns true if field def14 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef14() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF14_ISSET_ID);
  }

  public void setDef14IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF14_ISSET_ID, value);
  }

  public int getDef15() {
    return this.def15;
  }

  public Opt30 setDef15(int def15) {
    this.def15 = def15;
    setDef15IsSet(true);
    return this;
  }

  public void unsetDef15() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF15_ISSET_ID);
  }

  /** Returns true if field def15 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef15() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF15_ISSET_ID);
  }

  public void setDef15IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF15_ISSET_ID, value);
  }

  public int getDef16() {
    return this.def16;
  }

  public Opt30 setDef16(int def16) {
    this.def16 = def16;
    setDef16IsSet(true);
    return this;
  }

  public void unsetDef16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF16_ISSET_ID);
  }

  /** Returns true if field def16 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef16() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF16_ISSET_ID);
  }

  public void setDef16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF16_ISSET_ID, value);
  }

  public int getDef17() {
    return this.def17;
  }

  public Opt30 setDef17(int def17) {
    this.def17 = def17;
    setDef17IsSet(true);
    return this;
  }

  public void unsetDef17() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF17_ISSET_ID);
  }

  /** Returns true if field def17 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef17() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF17_ISSET_ID);
  }

  public void setDef17IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF17_ISSET_ID, value);
  }

  public int getDef18() {
    return this.def18;
  }

  public Opt30 setDef18(int def18) {
    this.def18 = def18;
    setDef18IsSet(true);
    return this;
  }

  public void unsetDef18() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF18_ISSET_ID);
  }

  /** Returns true if field def18 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef18() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF18_ISSET_ID);
  }

  public void setDef18IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF18_ISSET_ID, value);
  }

  public int getDef19() {
    return this.def19;
  }

  public Opt30 setDef19(int def19) {
    this.def19 = def19;
    setDef19IsSet(true);
    return this;
  }

  public void unsetDef19() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF19_ISSET_ID);
  }

  /** Returns true if field def19 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef19() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF19_ISSET_ID);
  }

  public void setDef19IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF19_ISSET_ID, value);
  }

  public int getDef20() {
    return this.def20;
  }

  public Opt30 setDef20(int def20) {
    this.def20 = def20;
    setDef20IsSet(true);
    return this;
  }

  public void unsetDef20() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF20_ISSET_ID);
  }

  /** Returns true if field def20 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef20() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF20_ISSET_ID);
  }

  public void setDef20IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF20_ISSET_ID, value);
  }

  public int getDef21() {
    return this.def21;
  }

  public Opt30 setDef21(int def21) {
    this.def21 = def21;
    setDef21IsSet(true);
    return this;
  }

  public void unsetDef21() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF21_ISSET_ID);
  }

  /** Returns true if field def21 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef21() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF21_ISSET_ID);
  }

  public void setDef21IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF21_ISSET_ID, value);
  }

  public int getDef22() {
    return this.def22;
  }

  public Opt30 setDef22(int def22) {
    this.def22 = def22;
    setDef22IsSet(true);
    return this;
  }

  public void unsetDef22() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF22_ISSET_ID);
  }

  /** Returns true if field def22 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef22() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF22_ISSET_ID);
  }

  public void setDef22IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF22_ISSET_ID, value);
  }

  public int getDef23() {
    return this.def23;
  }

  public Opt30 setDef23(int def23) {
    this.def23 = def23;
    setDef23IsSet(true);
    return this;
  }

  public void unsetDef23() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF23_ISSET_ID);
  }

  /** Returns true if field def23 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef23() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF23_ISSET_ID);
  }

  public void setDef23IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF23_ISSET_ID, value);
  }

  public int getDef24() {
    return this.def24;
  }

  public Opt30 setDef24(int def24) {
    this.def24 = def24;
    setDef24IsSet(true);
    return this;
  }

  public void unsetDef24() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF24_ISSET_ID);
  }

  /** Returns true if field def24 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef24() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF24_ISSET_ID);
  }

  public void setDef24IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF24_ISSET_ID, value);
  }

  public int getDef25() {
    return this.def25;
  }

  public Opt30 setDef25(int def25) {
    this.def25 = def25;
    setDef25IsSet(true);
    return this;
  }

  public void unsetDef25() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF25_ISSET_ID);
  }

  /** Returns true if field def25 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef25() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF25_ISSET_ID);
  }

  public void setDef25IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF25_ISSET_ID, value);
  }

  public int getDef26() {
    return this.def26;
  }

  public Opt30 setDef26(int def26) {
    this.def26 = def26;
    setDef26IsSet(true);
    return this;
  }

  public void unsetDef26() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF26_ISSET_ID);
  }

  /** Returns true if field def26 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef26() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF26_ISSET_ID);
  }

  public void setDef26IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF26_ISSET_ID, value);
  }

  public int getDef27() {
    return this.def27;
  }

  public Opt30 setDef27(int def27) {
    this.def27 = def27;
    setDef27IsSet(true);
    return this;
  }

  public void unsetDef27() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF27_ISSET_ID);
  }

  /** Returns true if field def27 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef27() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF27_ISSET_ID);
  }

  public void setDef27IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF27_ISSET_ID, value);
  }

  public int getDef28() {
    return this.def28;
  }

  public Opt30 setDef28(int def28) {
    this.def28 = def28;
    setDef28IsSet(true);
    return this;
  }

  public void unsetDef28() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF28_ISSET_ID);
  }

  /** Returns true if field def28 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef28() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF28_ISSET_ID);
  }

  public void setDef28IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF28_ISSET_ID, value);
  }

  public int getDef29() {
    return this.def29;
  }

  public Opt30 setDef29(int def29) {
    this.def29 = def29;
    setDef29IsSet(true);
    return this;
  }

  public void unsetDef29() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF29_ISSET_ID);
  }

  /** Returns true if field def29 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef29() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF29_ISSET_ID);
  }

  public void setDef29IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF29_ISSET_ID, value);
  }

  public int getDef30() {
    return this.def30;
  }

  public Opt30 setDef30(int def30) {
    this.def30 = def30;
    setDef30IsSet(true);
    return this;
  }

  public void unsetDef30() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEF30_ISSET_ID);
  }

  /** Returns true if field def30 is set (has been assigned a value) and false otherwise */
  public boolean isSetDef30() {
    return EncodingUtils.testBit(__isset_bitfield, __DEF30_ISSET_ID);
  }

  public void setDef30IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEF30_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEF1:
      if (value == null) {
        unsetDef1();
      } else {
        setDef1((Integer)value);
      }
      break;

    case DEF2:
      if (value == null) {
        unsetDef2();
      } else {
        setDef2((Integer)value);
      }
      break;

    case DEF3:
      if (value == null) {
        unsetDef3();
      } else {
        setDef3((Integer)value);
      }
      break;

    case DEF4:
      if (value == null) {
        unsetDef4();
      } else {
        setDef4((Integer)value);
      }
      break;

    case DEF5:
      if (value == null) {
        unsetDef5();
      } else {
        setDef5((Integer)value);
      }
      break;

    case DEF6:
      if (value == null) {
        unsetDef6();
      } else {
        setDef6((Integer)value);
      }
      break;

    case DEF7:
      if (value == null) {
        unsetDef7();
      } else {
        setDef7((Integer)value);
      }
      break;

    case DEF8:
      if (value == null) {
        unsetDef8();
      } else {
        setDef8((Integer)value);
      }
      break;

    case DEF9:
      if (value == null) {
        unsetDef9();
      } else {
        setDef9((Integer)value);
      }
      break;

    case DEF10:
      if (value == null) {
        unsetDef10();
      } else {
        setDef10((Integer)value);
      }
      break;

    case DEF11:
      if (value == null) {
        unsetDef11();
      } else {
        setDef11((Integer)value);
      }
      break;

    case DEF12:
      if (value == null) {
        unsetDef12();
      } else {
        setDef12((Integer)value);
      }
      break;

    case DEF13:
      if (value == null) {
        unsetDef13();
      } else {
        setDef13((Integer)value);
      }
      break;

    case DEF14:
      if (value == null) {
        unsetDef14();
      } else {
        setDef14((Integer)value);
      }
      break;

    case DEF15:
      if (value == null) {
        unsetDef15();
      } else {
        setDef15((Integer)value);
      }
      break;

    case DEF16:
      if (value == null) {
        unsetDef16();
      } else {
        setDef16((Integer)value);
      }
      break;

    case DEF17:
      if (value == null) {
        unsetDef17();
      } else {
        setDef17((Integer)value);
      }
      break;

    case DEF18:
      if (value == null) {
        unsetDef18();
      } else {
        setDef18((Integer)value);
      }
      break;

    case DEF19:
      if (value == null) {
        unsetDef19();
      } else {
        setDef19((Integer)value);
      }
      break;

    case DEF20:
      if (value == null) {
        unsetDef20();
      } else {
        setDef20((Integer)value);
      }
      break;

    case DEF21:
      if (value == null) {
        unsetDef21();
      } else {
        setDef21((Integer)value);
      }
      break;

    case DEF22:
      if (value == null) {
        unsetDef22();
      } else {
        setDef22((Integer)value);
      }
      break;

    case DEF23:
      if (value == null) {
        unsetDef23();
      } else {
        setDef23((Integer)value);
      }
      break;

    case DEF24:
      if (value == null) {
        unsetDef24();
      } else {
        setDef24((Integer)value);
      }
      break;

    case DEF25:
      if (value == null) {
        unsetDef25();
      } else {
        setDef25((Integer)value);
      }
      break;

    case DEF26:
      if (value == null) {
        unsetDef26();
      } else {
        setDef26((Integer)value);
      }
      break;

    case DEF27:
      if (value == null) {
        unsetDef27();
      } else {
        setDef27((Integer)value);
      }
      break;

    case DEF28:
      if (value == null) {
        unsetDef28();
      } else {
        setDef28((Integer)value);
      }
      break;

    case DEF29:
      if (value == null) {
        unsetDef29();
      } else {
        setDef29((Integer)value);
      }
      break;

    case DEF30:
      if (value == null) {
        unsetDef30();
      } else {
        setDef30((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEF1:
      return getDef1();

    case DEF2:
      return getDef2();

    case DEF3:
      return getDef3();

    case DEF4:
      return getDef4();

    case DEF5:
      return getDef5();

    case DEF6:
      return getDef6();

    case DEF7:
      return getDef7();

    case DEF8:
      return getDef8();

    case DEF9:
      return getDef9();

    case DEF10:
      return getDef10();

    case DEF11:
      return getDef11();

    case DEF12:
      return getDef12();

    case DEF13:
      return getDef13();

    case DEF14:
      return getDef14();

    case DEF15:
      return getDef15();

    case DEF16:
      return getDef16();

    case DEF17:
      return getDef17();

    case DEF18:
      return getDef18();

    case DEF19:
      return getDef19();

    case DEF20:
      return getDef20();

    case DEF21:
      return getDef21();

    case DEF22:
      return getDef22();

    case DEF23:
      return getDef23();

    case DEF24:
      return getDef24();

    case DEF25:
      return getDef25();

    case DEF26:
      return getDef26();

    case DEF27:
      return getDef27();

    case DEF28:
      return getDef28();

    case DEF29:
      return getDef29();

    case DEF30:
      return getDef30();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEF1:
      return isSetDef1();
    case DEF2:
      return isSetDef2();
    case DEF3:
      return isSetDef3();
    case DEF4:
      return isSetDef4();
    case DEF5:
      return isSetDef5();
    case DEF6:
      return isSetDef6();
    case DEF7:
      return isSetDef7();
    case DEF8:
      return isSetDef8();
    case DEF9:
      return isSetDef9();
    case DEF10:
      return isSetDef10();
    case DEF11:
      return isSetDef11();
    case DEF12:
      return isSetDef12();
    case DEF13:
      return isSetDef13();
    case DEF14:
      return isSetDef14();
    case DEF15:
      return isSetDef15();
    case DEF16:
      return isSetDef16();
    case DEF17:
      return isSetDef17();
    case DEF18:
      return isSetDef18();
    case DEF19:
      return isSetDef19();
    case DEF20:
      return isSetDef20();
    case DEF21:
      return isSetDef21();
    case DEF22:
      return isSetDef22();
    case DEF23:
      return isSetDef23();
    case DEF24:
      return isSetDef24();
    case DEF25:
      return isSetDef25();
    case DEF26:
      return isSetDef26();
    case DEF27:
      return isSetDef27();
    case DEF28:
      return isSetDef28();
    case DEF29:
      return isSetDef29();
    case DEF30:
      return isSetDef30();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Opt30)
      return this.equals((Opt30)that);
    return false;
  }

  public boolean equals(Opt30 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_def1 = true;
    boolean that_present_def1 = true;
    if (this_present_def1 || that_present_def1) {
      if (!(this_present_def1 && that_present_def1))
        return false;
      if (this.def1 != that.def1)
        return false;
    }

    boolean this_present_def2 = true;
    boolean that_present_def2 = true;
    if (this_present_def2 || that_present_def2) {
      if (!(this_present_def2 && that_present_def2))
        return false;
      if (this.def2 != that.def2)
        return false;
    }

    boolean this_present_def3 = true;
    boolean that_present_def3 = true;
    if (this_present_def3 || that_present_def3) {
      if (!(this_present_def3 && that_present_def3))
        return false;
      if (this.def3 != that.def3)
        return false;
    }

    boolean this_present_def4 = true;
    boolean that_present_def4 = true;
    if (this_present_def4 || that_present_def4) {
      if (!(this_present_def4 && that_present_def4))
        return false;
      if (this.def4 != that.def4)
        return false;
    }

    boolean this_present_def5 = true;
    boolean that_present_def5 = true;
    if (this_present_def5 || that_present_def5) {
      if (!(this_present_def5 && that_present_def5))
        return false;
      if (this.def5 != that.def5)
        return false;
    }

    boolean this_present_def6 = true;
    boolean that_present_def6 = true;
    if (this_present_def6 || that_present_def6) {
      if (!(this_present_def6 && that_present_def6))
        return false;
      if (this.def6 != that.def6)
        return false;
    }

    boolean this_present_def7 = true;
    boolean that_present_def7 = true;
    if (this_present_def7 || that_present_def7) {
      if (!(this_present_def7 && that_present_def7))
        return false;
      if (this.def7 != that.def7)
        return false;
    }

    boolean this_present_def8 = true;
    boolean that_present_def8 = true;
    if (this_present_def8 || that_present_def8) {
      if (!(this_present_def8 && that_present_def8))
        return false;
      if (this.def8 != that.def8)
        return false;
    }

    boolean this_present_def9 = true;
    boolean that_present_def9 = true;
    if (this_present_def9 || that_present_def9) {
      if (!(this_present_def9 && that_present_def9))
        return false;
      if (this.def9 != that.def9)
        return false;
    }

    boolean this_present_def10 = true;
    boolean that_present_def10 = true;
    if (this_present_def10 || that_present_def10) {
      if (!(this_present_def10 && that_present_def10))
        return false;
      if (this.def10 != that.def10)
        return false;
    }

    boolean this_present_def11 = true;
    boolean that_present_def11 = true;
    if (this_present_def11 || that_present_def11) {
      if (!(this_present_def11 && that_present_def11))
        return false;
      if (this.def11 != that.def11)
        return false;
    }

    boolean this_present_def12 = true;
    boolean that_present_def12 = true;
    if (this_present_def12 || that_present_def12) {
      if (!(this_present_def12 && that_present_def12))
        return false;
      if (this.def12 != that.def12)
        return false;
    }

    boolean this_present_def13 = true;
    boolean that_present_def13 = true;
    if (this_present_def13 || that_present_def13) {
      if (!(this_present_def13 && that_present_def13))
        return false;
      if (this.def13 != that.def13)
        return false;
    }

    boolean this_present_def14 = true;
    boolean that_present_def14 = true;
    if (this_present_def14 || that_present_def14) {
      if (!(this_present_def14 && that_present_def14))
        return false;
      if (this.def14 != that.def14)
        return false;
    }

    boolean this_present_def15 = true;
    boolean that_present_def15 = true;
    if (this_present_def15 || that_present_def15) {
      if (!(this_present_def15 && that_present_def15))
        return false;
      if (this.def15 != that.def15)
        return false;
    }

    boolean this_present_def16 = true;
    boolean that_present_def16 = true;
    if (this_present_def16 || that_present_def16) {
      if (!(this_present_def16 && that_present_def16))
        return false;
      if (this.def16 != that.def16)
        return false;
    }

    boolean this_present_def17 = true;
    boolean that_present_def17 = true;
    if (this_present_def17 || that_present_def17) {
      if (!(this_present_def17 && that_present_def17))
        return false;
      if (this.def17 != that.def17)
        return false;
    }

    boolean this_present_def18 = true;
    boolean that_present_def18 = true;
    if (this_present_def18 || that_present_def18) {
      if (!(this_present_def18 && that_present_def18))
        return false;
      if (this.def18 != that.def18)
        return false;
    }

    boolean this_present_def19 = true;
    boolean that_present_def19 = true;
    if (this_present_def19 || that_present_def19) {
      if (!(this_present_def19 && that_present_def19))
        return false;
      if (this.def19 != that.def19)
        return false;
    }

    boolean this_present_def20 = true;
    boolean that_present_def20 = true;
    if (this_present_def20 || that_present_def20) {
      if (!(this_present_def20 && that_present_def20))
        return false;
      if (this.def20 != that.def20)
        return false;
    }

    boolean this_present_def21 = true;
    boolean that_present_def21 = true;
    if (this_present_def21 || that_present_def21) {
      if (!(this_present_def21 && that_present_def21))
        return false;
      if (this.def21 != that.def21)
        return false;
    }

    boolean this_present_def22 = true;
    boolean that_present_def22 = true;
    if (this_present_def22 || that_present_def22) {
      if (!(this_present_def22 && that_present_def22))
        return false;
      if (this.def22 != that.def22)
        return false;
    }

    boolean this_present_def23 = true;
    boolean that_present_def23 = true;
    if (this_present_def23 || that_present_def23) {
      if (!(this_present_def23 && that_present_def23))
        return false;
      if (this.def23 != that.def23)
        return false;
    }

    boolean this_present_def24 = true;
    boolean that_present_def24 = true;
    if (this_present_def24 || that_present_def24) {
      if (!(this_present_def24 && that_present_def24))
        return false;
      if (this.def24 != that.def24)
        return false;
    }

    boolean this_present_def25 = true;
    boolean that_present_def25 = true;
    if (this_present_def25 || that_present_def25) {
      if (!(this_present_def25 && that_present_def25))
        return false;
      if (this.def25 != that.def25)
        return false;
    }

    boolean this_present_def26 = true;
    boolean that_present_def26 = true;
    if (this_present_def26 || that_present_def26) {
      if (!(this_present_def26 && that_present_def26))
        return false;
      if (this.def26 != that.def26)
        return false;
    }

    boolean this_present_def27 = true;
    boolean that_present_def27 = true;
    if (this_present_def27 || that_present_def27) {
      if (!(this_present_def27 && that_present_def27))
        return false;
      if (this.def27 != that.def27)
        return false;
    }

    boolean this_present_def28 = true;
    boolean that_present_def28 = true;
    if (this_present_def28 || that_present_def28) {
      if (!(this_present_def28 && that_present_def28))
        return false;
      if (this.def28 != that.def28)
        return false;
    }

    boolean this_present_def29 = true;
    boolean that_present_def29 = true;
    if (this_present_def29 || that_present_def29) {
      if (!(this_present_def29 && that_present_def29))
        return false;
      if (this.def29 != that.def29)
        return false;
    }

    boolean this_present_def30 = true;
    boolean that_present_def30 = true;
    if (this_present_def30 || that_present_def30) {
      if (!(this_present_def30 && that_present_def30))
        return false;
      if (this.def30 != that.def30)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + def1;

    hashCode = hashCode * 8191 + def2;

    hashCode = hashCode * 8191 + def3;

    hashCode = hashCode * 8191 + def4;

    hashCode = hashCode * 8191 + def5;

    hashCode = hashCode * 8191 + def6;

    hashCode = hashCode * 8191 + def7;

    hashCode = hashCode * 8191 + def8;

    hashCode = hashCode * 8191 + def9;

    hashCode = hashCode * 8191 + def10;

    hashCode = hashCode * 8191 + def11;

    hashCode = hashCode * 8191 + def12;

    hashCode = hashCode * 8191 + def13;

    hashCode = hashCode * 8191 + def14;

    hashCode = hashCode * 8191 + def15;

    hashCode = hashCode * 8191 + def16;

    hashCode = hashCode * 8191 + def17;

    hashCode = hashCode * 8191 + def18;

    hashCode = hashCode * 8191 + def19;

    hashCode = hashCode * 8191 + def20;

    hashCode = hashCode * 8191 + def21;

    hashCode = hashCode * 8191 + def22;

    hashCode = hashCode * 8191 + def23;

    hashCode = hashCode * 8191 + def24;

    hashCode = hashCode * 8191 + def25;

    hashCode = hashCode * 8191 + def26;

    hashCode = hashCode * 8191 + def27;

    hashCode = hashCode * 8191 + def28;

    hashCode = hashCode * 8191 + def29;

    hashCode = hashCode * 8191 + def30;

    return hashCode;
  }

  @Override
  public int compareTo(Opt30 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDef1()).compareTo(other.isSetDef1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def1, other.def1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef2()).compareTo(other.isSetDef2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def2, other.def2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef3()).compareTo(other.isSetDef3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def3, other.def3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef4()).compareTo(other.isSetDef4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def4, other.def4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef5()).compareTo(other.isSetDef5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def5, other.def5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef6()).compareTo(other.isSetDef6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def6, other.def6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef7()).compareTo(other.isSetDef7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def7, other.def7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef8()).compareTo(other.isSetDef8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def8, other.def8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef9()).compareTo(other.isSetDef9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def9, other.def9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef10()).compareTo(other.isSetDef10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def10, other.def10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef11()).compareTo(other.isSetDef11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def11, other.def11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef12()).compareTo(other.isSetDef12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def12, other.def12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef13()).compareTo(other.isSetDef13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def13, other.def13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef14()).compareTo(other.isSetDef14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def14, other.def14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef15()).compareTo(other.isSetDef15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def15, other.def15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef16()).compareTo(other.isSetDef16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def16, other.def16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef17()).compareTo(other.isSetDef17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def17, other.def17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef18()).compareTo(other.isSetDef18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def18, other.def18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef19()).compareTo(other.isSetDef19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def19, other.def19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef20()).compareTo(other.isSetDef20());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef20()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def20, other.def20);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef21()).compareTo(other.isSetDef21());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef21()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def21, other.def21);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef22()).compareTo(other.isSetDef22());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef22()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def22, other.def22);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef23()).compareTo(other.isSetDef23());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef23()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def23, other.def23);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef24()).compareTo(other.isSetDef24());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef24()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def24, other.def24);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef25()).compareTo(other.isSetDef25());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef25()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def25, other.def25);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef26()).compareTo(other.isSetDef26());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef26()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def26, other.def26);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef27()).compareTo(other.isSetDef27());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef27()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def27, other.def27);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef28()).compareTo(other.isSetDef28());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef28()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def28, other.def28);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef29()).compareTo(other.isSetDef29());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef29()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def29, other.def29);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDef30()).compareTo(other.isSetDef30());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDef30()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.def30, other.def30);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Opt30(");
    boolean first = true;

    sb.append("def1:");
    sb.append(this.def1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def2:");
    sb.append(this.def2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def3:");
    sb.append(this.def3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def4:");
    sb.append(this.def4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def5:");
    sb.append(this.def5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def6:");
    sb.append(this.def6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def7:");
    sb.append(this.def7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def8:");
    sb.append(this.def8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def9:");
    sb.append(this.def9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def10:");
    sb.append(this.def10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def11:");
    sb.append(this.def11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def12:");
    sb.append(this.def12);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def13:");
    sb.append(this.def13);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def14:");
    sb.append(this.def14);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def15:");
    sb.append(this.def15);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def16:");
    sb.append(this.def16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def17:");
    sb.append(this.def17);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def18:");
    sb.append(this.def18);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def19:");
    sb.append(this.def19);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def20:");
    sb.append(this.def20);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def21:");
    sb.append(this.def21);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def22:");
    sb.append(this.def22);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def23:");
    sb.append(this.def23);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def24:");
    sb.append(this.def24);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def25:");
    sb.append(this.def25);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def26:");
    sb.append(this.def26);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def27:");
    sb.append(this.def27);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def28:");
    sb.append(this.def28);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def29:");
    sb.append(this.def29);
    first = false;
    if (!first) sb.append(", ");
    sb.append("def30:");
    sb.append(this.def30);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Opt30StandardSchemeFactory implements SchemeFactory {
    public Opt30StandardScheme getScheme() {
      return new Opt30StandardScheme();
    }
  }

  private static class Opt30StandardScheme extends StandardScheme<Opt30> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Opt30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEF1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def1 = iprot.readI32();
              struct.setDef1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEF2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def2 = iprot.readI32();
              struct.setDef2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEF3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def3 = iprot.readI32();
              struct.setDef3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEF4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def4 = iprot.readI32();
              struct.setDef4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEF5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def5 = iprot.readI32();
              struct.setDef5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEF6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def6 = iprot.readI32();
              struct.setDef6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEF7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def7 = iprot.readI32();
              struct.setDef7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEF8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def8 = iprot.readI32();
              struct.setDef8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEF9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def9 = iprot.readI32();
              struct.setDef9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEF10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def10 = iprot.readI32();
              struct.setDef10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEF11
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def11 = iprot.readI32();
              struct.setDef11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEF12
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def12 = iprot.readI32();
              struct.setDef12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEF13
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def13 = iprot.readI32();
              struct.setDef13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEF14
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def14 = iprot.readI32();
              struct.setDef14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEF15
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def15 = iprot.readI32();
              struct.setDef15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DEF16
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def16 = iprot.readI32();
              struct.setDef16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEF17
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def17 = iprot.readI32();
              struct.setDef17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DEF18
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def18 = iprot.readI32();
              struct.setDef18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DEF19
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def19 = iprot.readI32();
              struct.setDef19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DEF20
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def20 = iprot.readI32();
              struct.setDef20IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEF21
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def21 = iprot.readI32();
              struct.setDef21IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DEF22
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def22 = iprot.readI32();
              struct.setDef22IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DEF23
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def23 = iprot.readI32();
              struct.setDef23IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DEF24
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def24 = iprot.readI32();
              struct.setDef24IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DEF25
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def25 = iprot.readI32();
              struct.setDef25IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DEF26
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def26 = iprot.readI32();
              struct.setDef26IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DEF27
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def27 = iprot.readI32();
              struct.setDef27IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DEF28
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def28 = iprot.readI32();
              struct.setDef28IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DEF29
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def29 = iprot.readI32();
              struct.setDef29IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DEF30
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.def30 = iprot.readI32();
              struct.setDef30IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Opt30 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEF1_FIELD_DESC);
      oprot.writeI32(struct.def1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF2_FIELD_DESC);
      oprot.writeI32(struct.def2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF3_FIELD_DESC);
      oprot.writeI32(struct.def3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF4_FIELD_DESC);
      oprot.writeI32(struct.def4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF5_FIELD_DESC);
      oprot.writeI32(struct.def5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF6_FIELD_DESC);
      oprot.writeI32(struct.def6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF7_FIELD_DESC);
      oprot.writeI32(struct.def7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF8_FIELD_DESC);
      oprot.writeI32(struct.def8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF9_FIELD_DESC);
      oprot.writeI32(struct.def9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF10_FIELD_DESC);
      oprot.writeI32(struct.def10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF11_FIELD_DESC);
      oprot.writeI32(struct.def11);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF12_FIELD_DESC);
      oprot.writeI32(struct.def12);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF13_FIELD_DESC);
      oprot.writeI32(struct.def13);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF14_FIELD_DESC);
      oprot.writeI32(struct.def14);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF15_FIELD_DESC);
      oprot.writeI32(struct.def15);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF16_FIELD_DESC);
      oprot.writeI32(struct.def16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF17_FIELD_DESC);
      oprot.writeI32(struct.def17);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF18_FIELD_DESC);
      oprot.writeI32(struct.def18);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF19_FIELD_DESC);
      oprot.writeI32(struct.def19);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF20_FIELD_DESC);
      oprot.writeI32(struct.def20);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF21_FIELD_DESC);
      oprot.writeI32(struct.def21);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF22_FIELD_DESC);
      oprot.writeI32(struct.def22);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF23_FIELD_DESC);
      oprot.writeI32(struct.def23);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF24_FIELD_DESC);
      oprot.writeI32(struct.def24);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF25_FIELD_DESC);
      oprot.writeI32(struct.def25);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF26_FIELD_DESC);
      oprot.writeI32(struct.def26);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF27_FIELD_DESC);
      oprot.writeI32(struct.def27);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF28_FIELD_DESC);
      oprot.writeI32(struct.def28);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF29_FIELD_DESC);
      oprot.writeI32(struct.def29);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEF30_FIELD_DESC);
      oprot.writeI32(struct.def30);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Opt30TupleSchemeFactory implements SchemeFactory {
    public Opt30TupleScheme getScheme() {
      return new Opt30TupleScheme();
    }
  }

  private static class Opt30TupleScheme extends TupleScheme<Opt30> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Opt30 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDef1()) {
        optionals.set(0);
      }
      if (struct.isSetDef2()) {
        optionals.set(1);
      }
      if (struct.isSetDef3()) {
        optionals.set(2);
      }
      if (struct.isSetDef4()) {
        optionals.set(3);
      }
      if (struct.isSetDef5()) {
        optionals.set(4);
      }
      if (struct.isSetDef6()) {
        optionals.set(5);
      }
      if (struct.isSetDef7()) {
        optionals.set(6);
      }
      if (struct.isSetDef8()) {
        optionals.set(7);
      }
      if (struct.isSetDef9()) {
        optionals.set(8);
      }
      if (struct.isSetDef10()) {
        optionals.set(9);
      }
      if (struct.isSetDef11()) {
        optionals.set(10);
      }
      if (struct.isSetDef12()) {
        optionals.set(11);
      }
      if (struct.isSetDef13()) {
        optionals.set(12);
      }
      if (struct.isSetDef14()) {
        optionals.set(13);
      }
      if (struct.isSetDef15()) {
        optionals.set(14);
      }
      if (struct.isSetDef16()) {
        optionals.set(15);
      }
      if (struct.isSetDef17()) {
        optionals.set(16);
      }
      if (struct.isSetDef18()) {
        optionals.set(17);
      }
      if (struct.isSetDef19()) {
        optionals.set(18);
      }
      if (struct.isSetDef20()) {
        optionals.set(19);
      }
      if (struct.isSetDef21()) {
        optionals.set(20);
      }
      if (struct.isSetDef22()) {
        optionals.set(21);
      }
      if (struct.isSetDef23()) {
        optionals.set(22);
      }
      if (struct.isSetDef24()) {
        optionals.set(23);
      }
      if (struct.isSetDef25()) {
        optionals.set(24);
      }
      if (struct.isSetDef26()) {
        optionals.set(25);
      }
      if (struct.isSetDef27()) {
        optionals.set(26);
      }
      if (struct.isSetDef28()) {
        optionals.set(27);
      }
      if (struct.isSetDef29()) {
        optionals.set(28);
      }
      if (struct.isSetDef30()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetDef1()) {
        oprot.writeI32(struct.def1);
      }
      if (struct.isSetDef2()) {
        oprot.writeI32(struct.def2);
      }
      if (struct.isSetDef3()) {
        oprot.writeI32(struct.def3);
      }
      if (struct.isSetDef4()) {
        oprot.writeI32(struct.def4);
      }
      if (struct.isSetDef5()) {
        oprot.writeI32(struct.def5);
      }
      if (struct.isSetDef6()) {
        oprot.writeI32(struct.def6);
      }
      if (struct.isSetDef7()) {
        oprot.writeI32(struct.def7);
      }
      if (struct.isSetDef8()) {
        oprot.writeI32(struct.def8);
      }
      if (struct.isSetDef9()) {
        oprot.writeI32(struct.def9);
      }
      if (struct.isSetDef10()) {
        oprot.writeI32(struct.def10);
      }
      if (struct.isSetDef11()) {
        oprot.writeI32(struct.def11);
      }
      if (struct.isSetDef12()) {
        oprot.writeI32(struct.def12);
      }
      if (struct.isSetDef13()) {
        oprot.writeI32(struct.def13);
      }
      if (struct.isSetDef14()) {
        oprot.writeI32(struct.def14);
      }
      if (struct.isSetDef15()) {
        oprot.writeI32(struct.def15);
      }
      if (struct.isSetDef16()) {
        oprot.writeI32(struct.def16);
      }
      if (struct.isSetDef17()) {
        oprot.writeI32(struct.def17);
      }
      if (struct.isSetDef18()) {
        oprot.writeI32(struct.def18);
      }
      if (struct.isSetDef19()) {
        oprot.writeI32(struct.def19);
      }
      if (struct.isSetDef20()) {
        oprot.writeI32(struct.def20);
      }
      if (struct.isSetDef21()) {
        oprot.writeI32(struct.def21);
      }
      if (struct.isSetDef22()) {
        oprot.writeI32(struct.def22);
      }
      if (struct.isSetDef23()) {
        oprot.writeI32(struct.def23);
      }
      if (struct.isSetDef24()) {
        oprot.writeI32(struct.def24);
      }
      if (struct.isSetDef25()) {
        oprot.writeI32(struct.def25);
      }
      if (struct.isSetDef26()) {
        oprot.writeI32(struct.def26);
      }
      if (struct.isSetDef27()) {
        oprot.writeI32(struct.def27);
      }
      if (struct.isSetDef28()) {
        oprot.writeI32(struct.def28);
      }
      if (struct.isSetDef29()) {
        oprot.writeI32(struct.def29);
      }
      if (struct.isSetDef30()) {
        oprot.writeI32(struct.def30);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Opt30 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.def1 = iprot.readI32();
        struct.setDef1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.def2 = iprot.readI32();
        struct.setDef2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.def3 = iprot.readI32();
        struct.setDef3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.def4 = iprot.readI32();
        struct.setDef4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.def5 = iprot.readI32();
        struct.setDef5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.def6 = iprot.readI32();
        struct.setDef6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.def7 = iprot.readI32();
        struct.setDef7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.def8 = iprot.readI32();
        struct.setDef8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.def9 = iprot.readI32();
        struct.setDef9IsSet(true);
      }
      if (incoming.get(9)) {
        struct.def10 = iprot.readI32();
        struct.setDef10IsSet(true);
      }
      if (incoming.get(10)) {
        struct.def11 = iprot.readI32();
        struct.setDef11IsSet(true);
      }
      if (incoming.get(11)) {
        struct.def12 = iprot.readI32();
        struct.setDef12IsSet(true);
      }
      if (incoming.get(12)) {
        struct.def13 = iprot.readI32();
        struct.setDef13IsSet(true);
      }
      if (incoming.get(13)) {
        struct.def14 = iprot.readI32();
        struct.setDef14IsSet(true);
      }
      if (incoming.get(14)) {
        struct.def15 = iprot.readI32();
        struct.setDef15IsSet(true);
      }
      if (incoming.get(15)) {
        struct.def16 = iprot.readI32();
        struct.setDef16IsSet(true);
      }
      if (incoming.get(16)) {
        struct.def17 = iprot.readI32();
        struct.setDef17IsSet(true);
      }
      if (incoming.get(17)) {
        struct.def18 = iprot.readI32();
        struct.setDef18IsSet(true);
      }
      if (incoming.get(18)) {
        struct.def19 = iprot.readI32();
        struct.setDef19IsSet(true);
      }
      if (incoming.get(19)) {
        struct.def20 = iprot.readI32();
        struct.setDef20IsSet(true);
      }
      if (incoming.get(20)) {
        struct.def21 = iprot.readI32();
        struct.setDef21IsSet(true);
      }
      if (incoming.get(21)) {
        struct.def22 = iprot.readI32();
        struct.setDef22IsSet(true);
      }
      if (incoming.get(22)) {
        struct.def23 = iprot.readI32();
        struct.setDef23IsSet(true);
      }
      if (incoming.get(23)) {
        struct.def24 = iprot.readI32();
        struct.setDef24IsSet(true);
      }
      if (incoming.get(24)) {
        struct.def25 = iprot.readI32();
        struct.setDef25IsSet(true);
      }
      if (incoming.get(25)) {
        struct.def26 = iprot.readI32();
        struct.setDef26IsSet(true);
      }
      if (incoming.get(26)) {
        struct.def27 = iprot.readI32();
        struct.setDef27IsSet(true);
      }
      if (incoming.get(27)) {
        struct.def28 = iprot.readI32();
        struct.setDef28IsSet(true);
      }
      if (incoming.get(28)) {
        struct.def29 = iprot.readI32();
        struct.setDef29IsSet(true);
      }
      if (incoming.get(29)) {
        struct.def30 = iprot.readI32();
        struct.setDef30IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

