/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class BlowUp implements org.apache.thrift.TBase<BlowUp, BlowUp._Fields>, java.io.Serializable, Cloneable, Comparable<BlowUp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlowUp");

  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField B2_FIELD_DESC = new org.apache.thrift.protocol.TField("b2", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField B3_FIELD_DESC = new org.apache.thrift.protocol.TField("b3", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField B4_FIELD_DESC = new org.apache.thrift.protocol.TField("b4", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new BlowUpStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new BlowUpTupleSchemeFactory();

  public Map<List<Integer>,Set<Map<Integer,String>>> b1; // required
  public Map<List<Integer>,Set<Map<Integer,String>>> b2; // required
  public Map<List<Integer>,Set<Map<Integer,String>>> b3; // required
  public Map<List<Integer>,Set<Map<Integer,String>>> b4; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    B1((short)1, "b1"),
    B2((short)2, "b2"),
    B3((short)3, "b3"),
    B4((short)4, "b4");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // B1
          return B1;
        case 2: // B2
          return B2;
        case 3: // B3
          return B3;
        case 4: // B4
          return B4;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.B2, new org.apache.thrift.meta_data.FieldMetaData("b2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.B3, new org.apache.thrift.meta_data.FieldMetaData("b3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.B4, new org.apache.thrift.meta_data.FieldMetaData("b4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlowUp.class, metaDataMap);
  }

  public BlowUp() {
  }

  public BlowUp(
    Map<List<Integer>,Set<Map<Integer,String>>> b1,
    Map<List<Integer>,Set<Map<Integer,String>>> b2,
    Map<List<Integer>,Set<Map<Integer,String>>> b3,
    Map<List<Integer>,Set<Map<Integer,String>>> b4)
  {
    this();
    this.b1 = b1;
    this.b2 = b2;
    this.b3 = b3;
    this.b4 = b4;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlowUp(BlowUp other) {
    if (other.isSetB1()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b1.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b1.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b1_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b1_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b1_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b1_copy_value.add(__this__b1_copy_value_copy);
        }

        __this__b1.put(__this__b1_copy_key, __this__b1_copy_value);
      }
      this.b1 = __this__b1;
    }
    if (other.isSetB2()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b2.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b2.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b2_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b2_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b2_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b2_copy_value.add(__this__b2_copy_value_copy);
        }

        __this__b2.put(__this__b2_copy_key, __this__b2_copy_value);
      }
      this.b2 = __this__b2;
    }
    if (other.isSetB3()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b3.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b3.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b3_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b3_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b3_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b3_copy_value.add(__this__b3_copy_value_copy);
        }

        __this__b3.put(__this__b3_copy_key, __this__b3_copy_value);
      }
      this.b3 = __this__b3;
    }
    if (other.isSetB4()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b4.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b4.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b4_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b4_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b4_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b4_copy_value.add(__this__b4_copy_value_copy);
        }

        __this__b4.put(__this__b4_copy_key, __this__b4_copy_value);
      }
      this.b4 = __this__b4;
    }
  }

  public BlowUp deepCopy() {
    return new BlowUp(this);
  }

  @Override
  public void clear() {
    this.b1 = null;
    this.b2 = null;
    this.b3 = null;
    this.b4 = null;
  }

  public int getB1Size() {
    return (this.b1 == null) ? 0 : this.b1.size();
  }

  public void putToB1(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b1 == null) {
      this.b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b1.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB1() {
    return this.b1;
  }

  public BlowUp setB1(Map<List<Integer>,Set<Map<Integer,String>>> b1) {
    this.b1 = b1;
    return this;
  }

  public void unsetB1() {
    this.b1 = null;
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return this.b1 != null;
  }

  public void setB1IsSet(boolean value) {
    if (!value) {
      this.b1 = null;
    }
  }

  public int getB2Size() {
    return (this.b2 == null) ? 0 : this.b2.size();
  }

  public void putToB2(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b2 == null) {
      this.b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b2.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB2() {
    return this.b2;
  }

  public BlowUp setB2(Map<List<Integer>,Set<Map<Integer,String>>> b2) {
    this.b2 = b2;
    return this;
  }

  public void unsetB2() {
    this.b2 = null;
  }

  /** Returns true if field b2 is set (has been assigned a value) and false otherwise */
  public boolean isSetB2() {
    return this.b2 != null;
  }

  public void setB2IsSet(boolean value) {
    if (!value) {
      this.b2 = null;
    }
  }

  public int getB3Size() {
    return (this.b3 == null) ? 0 : this.b3.size();
  }

  public void putToB3(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b3 == null) {
      this.b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b3.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB3() {
    return this.b3;
  }

  public BlowUp setB3(Map<List<Integer>,Set<Map<Integer,String>>> b3) {
    this.b3 = b3;
    return this;
  }

  public void unsetB3() {
    this.b3 = null;
  }

  /** Returns true if field b3 is set (has been assigned a value) and false otherwise */
  public boolean isSetB3() {
    return this.b3 != null;
  }

  public void setB3IsSet(boolean value) {
    if (!value) {
      this.b3 = null;
    }
  }

  public int getB4Size() {
    return (this.b4 == null) ? 0 : this.b4.size();
  }

  public void putToB4(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b4 == null) {
      this.b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b4.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB4() {
    return this.b4;
  }

  public BlowUp setB4(Map<List<Integer>,Set<Map<Integer,String>>> b4) {
    this.b4 = b4;
    return this;
  }

  public void unsetB4() {
    this.b4 = null;
  }

  /** Returns true if field b4 is set (has been assigned a value) and false otherwise */
  public boolean isSetB4() {
    return this.b4 != null;
  }

  public void setB4IsSet(boolean value) {
    if (!value) {
      this.b4 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    case B2:
      if (value == null) {
        unsetB2();
      } else {
        setB2((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    case B3:
      if (value == null) {
        unsetB3();
      } else {
        setB3((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    case B4:
      if (value == null) {
        unsetB4();
      } else {
        setB4((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case B1:
      return getB1();

    case B2:
      return getB2();

    case B3:
      return getB3();

    case B4:
      return getB4();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case B1:
      return isSetB1();
    case B2:
      return isSetB2();
    case B3:
      return isSetB3();
    case B4:
      return isSetB4();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlowUp)
      return this.equals((BlowUp)that);
    return false;
  }

  public boolean equals(BlowUp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_b1 = true && this.isSetB1();
    boolean that_present_b1 = true && that.isSetB1();
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (!this.b1.equals(that.b1))
        return false;
    }

    boolean this_present_b2 = true && this.isSetB2();
    boolean that_present_b2 = true && that.isSetB2();
    if (this_present_b2 || that_present_b2) {
      if (!(this_present_b2 && that_present_b2))
        return false;
      if (!this.b2.equals(that.b2))
        return false;
    }

    boolean this_present_b3 = true && this.isSetB3();
    boolean that_present_b3 = true && that.isSetB3();
    if (this_present_b3 || that_present_b3) {
      if (!(this_present_b3 && that_present_b3))
        return false;
      if (!this.b3.equals(that.b3))
        return false;
    }

    boolean this_present_b4 = true && this.isSetB4();
    boolean that_present_b4 = true && that.isSetB4();
    if (this_present_b4 || that_present_b4) {
      if (!(this_present_b4 && that_present_b4))
        return false;
      if (!this.b4.equals(that.b4))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetB1()) ? 131071 : 524287);
    if (isSetB1())
      hashCode = hashCode * 8191 + b1.hashCode();

    hashCode = hashCode * 8191 + ((isSetB2()) ? 131071 : 524287);
    if (isSetB2())
      hashCode = hashCode * 8191 + b2.hashCode();

    hashCode = hashCode * 8191 + ((isSetB3()) ? 131071 : 524287);
    if (isSetB3())
      hashCode = hashCode * 8191 + b3.hashCode();

    hashCode = hashCode * 8191 + ((isSetB4()) ? 131071 : 524287);
    if (isSetB4())
      hashCode = hashCode * 8191 + b4.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BlowUp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2()).compareTo(other.isSetB2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b2, other.b2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB3()).compareTo(other.isSetB3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b3, other.b3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB4()).compareTo(other.isSetB4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b4, other.b4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlowUp(");
    boolean first = true;

    sb.append("b1:");
    if (this.b1 == null) {
      sb.append("null");
    } else {
      sb.append(this.b1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b2:");
    if (this.b2 == null) {
      sb.append("null");
    } else {
      sb.append(this.b2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b3:");
    if (this.b3 == null) {
      sb.append("null");
    } else {
      sb.append(this.b3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b4:");
    if (this.b4 == null) {
      sb.append("null");
    } else {
      sb.append(this.b4);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlowUpStandardSchemeFactory implements SchemeFactory {
    public BlowUpStandardScheme getScheme() {
      return new BlowUpStandardScheme();
    }
  }

  private static class BlowUpStandardScheme extends StandardScheme<BlowUp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlowUp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map510 = iprot.readMapBegin();
                struct.b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map510.size);
                List<Integer> _key511;
                Set<Map<Integer,String>> _val512;
                for (int _i513 = 0; _i513 < _map510.size; ++_i513)
                {
                  {
                    org.apache.thrift.protocol.TList _list514 = iprot.readListBegin();
                    _key511 = new ArrayList<Integer>(_list514.size);
                    int _elem515;
                    for (int _i516 = 0; _i516 < _list514.size; ++_i516)
                    {
                      _elem515 = iprot.readI32();
                      _key511.add(_elem515);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set517 = iprot.readSetBegin();
                    _val512 = new HashSet<Map<Integer,String>>(2*_set517.size);
                    Map<Integer,String> _elem518;
                    for (int _i519 = 0; _i519 < _set517.size; ++_i519)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map520 = iprot.readMapBegin();
                        _elem518 = new HashMap<Integer,String>(2*_map520.size);
                        int _key521;
                        String _val522;
                        for (int _i523 = 0; _i523 < _map520.size; ++_i523)
                        {
                          _key521 = iprot.readI32();
                          _val522 = iprot.readString();
                          _elem518.put(_key521, _val522);
                        }
                        iprot.readMapEnd();
                      }
                      _val512.add(_elem518);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b1.put(_key511, _val512);
                }
                iprot.readMapEnd();
              }
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B2
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map524 = iprot.readMapBegin();
                struct.b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map524.size);
                List<Integer> _key525;
                Set<Map<Integer,String>> _val526;
                for (int _i527 = 0; _i527 < _map524.size; ++_i527)
                {
                  {
                    org.apache.thrift.protocol.TList _list528 = iprot.readListBegin();
                    _key525 = new ArrayList<Integer>(_list528.size);
                    int _elem529;
                    for (int _i530 = 0; _i530 < _list528.size; ++_i530)
                    {
                      _elem529 = iprot.readI32();
                      _key525.add(_elem529);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set531 = iprot.readSetBegin();
                    _val526 = new HashSet<Map<Integer,String>>(2*_set531.size);
                    Map<Integer,String> _elem532;
                    for (int _i533 = 0; _i533 < _set531.size; ++_i533)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map534 = iprot.readMapBegin();
                        _elem532 = new HashMap<Integer,String>(2*_map534.size);
                        int _key535;
                        String _val536;
                        for (int _i537 = 0; _i537 < _map534.size; ++_i537)
                        {
                          _key535 = iprot.readI32();
                          _val536 = iprot.readString();
                          _elem532.put(_key535, _val536);
                        }
                        iprot.readMapEnd();
                      }
                      _val526.add(_elem532);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b2.put(_key525, _val526);
                }
                iprot.readMapEnd();
              }
              struct.setB2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B3
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map538 = iprot.readMapBegin();
                struct.b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map538.size);
                List<Integer> _key539;
                Set<Map<Integer,String>> _val540;
                for (int _i541 = 0; _i541 < _map538.size; ++_i541)
                {
                  {
                    org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
                    _key539 = new ArrayList<Integer>(_list542.size);
                    int _elem543;
                    for (int _i544 = 0; _i544 < _list542.size; ++_i544)
                    {
                      _elem543 = iprot.readI32();
                      _key539.add(_elem543);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set545 = iprot.readSetBegin();
                    _val540 = new HashSet<Map<Integer,String>>(2*_set545.size);
                    Map<Integer,String> _elem546;
                    for (int _i547 = 0; _i547 < _set545.size; ++_i547)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map548 = iprot.readMapBegin();
                        _elem546 = new HashMap<Integer,String>(2*_map548.size);
                        int _key549;
                        String _val550;
                        for (int _i551 = 0; _i551 < _map548.size; ++_i551)
                        {
                          _key549 = iprot.readI32();
                          _val550 = iprot.readString();
                          _elem546.put(_key549, _val550);
                        }
                        iprot.readMapEnd();
                      }
                      _val540.add(_elem546);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b3.put(_key539, _val540);
                }
                iprot.readMapEnd();
              }
              struct.setB3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B4
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map552 = iprot.readMapBegin();
                struct.b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map552.size);
                List<Integer> _key553;
                Set<Map<Integer,String>> _val554;
                for (int _i555 = 0; _i555 < _map552.size; ++_i555)
                {
                  {
                    org.apache.thrift.protocol.TList _list556 = iprot.readListBegin();
                    _key553 = new ArrayList<Integer>(_list556.size);
                    int _elem557;
                    for (int _i558 = 0; _i558 < _list556.size; ++_i558)
                    {
                      _elem557 = iprot.readI32();
                      _key553.add(_elem557);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set559 = iprot.readSetBegin();
                    _val554 = new HashSet<Map<Integer,String>>(2*_set559.size);
                    Map<Integer,String> _elem560;
                    for (int _i561 = 0; _i561 < _set559.size; ++_i561)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map562 = iprot.readMapBegin();
                        _elem560 = new HashMap<Integer,String>(2*_map562.size);
                        int _key563;
                        String _val564;
                        for (int _i565 = 0; _i565 < _map562.size; ++_i565)
                        {
                          _key563 = iprot.readI32();
                          _val564 = iprot.readString();
                          _elem560.put(_key563, _val564);
                        }
                        iprot.readMapEnd();
                      }
                      _val554.add(_elem560);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b4.put(_key553, _val554);
                }
                iprot.readMapEnd();
              }
              struct.setB4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlowUp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.b1 != null) {
        oprot.writeFieldBegin(B1_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b1.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter566 : struct.b1.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter566.getKey().size()));
              for (int _iter567 : _iter566.getKey())
              {
                oprot.writeI32(_iter567);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter566.getValue().size()));
              for (Map<Integer,String> _iter568 : _iter566.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter568.size()));
                  for (Map.Entry<Integer, String> _iter569 : _iter568.entrySet())
                  {
                    oprot.writeI32(_iter569.getKey());
                    oprot.writeString(_iter569.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.b2 != null) {
        oprot.writeFieldBegin(B2_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b2.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter570 : struct.b2.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter570.getKey().size()));
              for (int _iter571 : _iter570.getKey())
              {
                oprot.writeI32(_iter571);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter570.getValue().size()));
              for (Map<Integer,String> _iter572 : _iter570.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter572.size()));
                  for (Map.Entry<Integer, String> _iter573 : _iter572.entrySet())
                  {
                    oprot.writeI32(_iter573.getKey());
                    oprot.writeString(_iter573.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.b3 != null) {
        oprot.writeFieldBegin(B3_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b3.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter574 : struct.b3.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter574.getKey().size()));
              for (int _iter575 : _iter574.getKey())
              {
                oprot.writeI32(_iter575);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter574.getValue().size()));
              for (Map<Integer,String> _iter576 : _iter574.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter576.size()));
                  for (Map.Entry<Integer, String> _iter577 : _iter576.entrySet())
                  {
                    oprot.writeI32(_iter577.getKey());
                    oprot.writeString(_iter577.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.b4 != null) {
        oprot.writeFieldBegin(B4_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b4.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter578 : struct.b4.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter578.getKey().size()));
              for (int _iter579 : _iter578.getKey())
              {
                oprot.writeI32(_iter579);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter578.getValue().size()));
              for (Map<Integer,String> _iter580 : _iter578.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter580.size()));
                  for (Map.Entry<Integer, String> _iter581 : _iter580.entrySet())
                  {
                    oprot.writeI32(_iter581.getKey());
                    oprot.writeString(_iter581.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlowUpTupleSchemeFactory implements SchemeFactory {
    public BlowUpTupleScheme getScheme() {
      return new BlowUpTupleScheme();
    }
  }

  private static class BlowUpTupleScheme extends TupleScheme<BlowUp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlowUp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetB1()) {
        optionals.set(0);
      }
      if (struct.isSetB2()) {
        optionals.set(1);
      }
      if (struct.isSetB3()) {
        optionals.set(2);
      }
      if (struct.isSetB4()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetB1()) {
        {
          oprot.writeI32(struct.b1.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter582 : struct.b1.entrySet())
          {
            {
              oprot.writeI32(_iter582.getKey().size());
              for (int _iter583 : _iter582.getKey())
              {
                oprot.writeI32(_iter583);
              }
            }
            {
              oprot.writeI32(_iter582.getValue().size());
              for (Map<Integer,String> _iter584 : _iter582.getValue())
              {
                {
                  oprot.writeI32(_iter584.size());
                  for (Map.Entry<Integer, String> _iter585 : _iter584.entrySet())
                  {
                    oprot.writeI32(_iter585.getKey());
                    oprot.writeString(_iter585.getValue());
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetB2()) {
        {
          oprot.writeI32(struct.b2.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter586 : struct.b2.entrySet())
          {
            {
              oprot.writeI32(_iter586.getKey().size());
              for (int _iter587 : _iter586.getKey())
              {
                oprot.writeI32(_iter587);
              }
            }
            {
              oprot.writeI32(_iter586.getValue().size());
              for (Map<Integer,String> _iter588 : _iter586.getValue())
              {
                {
                  oprot.writeI32(_iter588.size());
                  for (Map.Entry<Integer, String> _iter589 : _iter588.entrySet())
                  {
                    oprot.writeI32(_iter589.getKey());
                    oprot.writeString(_iter589.getValue());
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetB3()) {
        {
          oprot.writeI32(struct.b3.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter590 : struct.b3.entrySet())
          {
            {
              oprot.writeI32(_iter590.getKey().size());
              for (int _iter591 : _iter590.getKey())
              {
                oprot.writeI32(_iter591);
              }
            }
            {
              oprot.writeI32(_iter590.getValue().size());
              for (Map<Integer,String> _iter592 : _iter590.getValue())
              {
                {
                  oprot.writeI32(_iter592.size());
                  for (Map.Entry<Integer, String> _iter593 : _iter592.entrySet())
                  {
                    oprot.writeI32(_iter593.getKey());
                    oprot.writeString(_iter593.getValue());
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetB4()) {
        {
          oprot.writeI32(struct.b4.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter594 : struct.b4.entrySet())
          {
            {
              oprot.writeI32(_iter594.getKey().size());
              for (int _iter595 : _iter594.getKey())
              {
                oprot.writeI32(_iter595);
              }
            }
            {
              oprot.writeI32(_iter594.getValue().size());
              for (Map<Integer,String> _iter596 : _iter594.getValue())
              {
                {
                  oprot.writeI32(_iter596.size());
                  for (Map.Entry<Integer, String> _iter597 : _iter596.entrySet())
                  {
                    oprot.writeI32(_iter597.getKey());
                    oprot.writeString(_iter597.getValue());
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlowUp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map598 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map598.size);
          List<Integer> _key599;
          Set<Map<Integer,String>> _val600;
          for (int _i601 = 0; _i601 < _map598.size; ++_i601)
          {
            {
              org.apache.thrift.protocol.TList _list602 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key599 = new ArrayList<Integer>(_list602.size);
              int _elem603;
              for (int _i604 = 0; _i604 < _list602.size; ++_i604)
              {
                _elem603 = iprot.readI32();
                _key599.add(_elem603);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set605 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val600 = new HashSet<Map<Integer,String>>(2*_set605.size);
              Map<Integer,String> _elem606;
              for (int _i607 = 0; _i607 < _set605.size; ++_i607)
              {
                {
                  org.apache.thrift.protocol.TMap _map608 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem606 = new HashMap<Integer,String>(2*_map608.size);
                  int _key609;
                  String _val610;
                  for (int _i611 = 0; _i611 < _map608.size; ++_i611)
                  {
                    _key609 = iprot.readI32();
                    _val610 = iprot.readString();
                    _elem606.put(_key609, _val610);
                  }
                }
                _val600.add(_elem606);
              }
            }
            struct.b1.put(_key599, _val600);
          }
        }
        struct.setB1IsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map612 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map612.size);
          List<Integer> _key613;
          Set<Map<Integer,String>> _val614;
          for (int _i615 = 0; _i615 < _map612.size; ++_i615)
          {
            {
              org.apache.thrift.protocol.TList _list616 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key613 = new ArrayList<Integer>(_list616.size);
              int _elem617;
              for (int _i618 = 0; _i618 < _list616.size; ++_i618)
              {
                _elem617 = iprot.readI32();
                _key613.add(_elem617);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set619 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val614 = new HashSet<Map<Integer,String>>(2*_set619.size);
              Map<Integer,String> _elem620;
              for (int _i621 = 0; _i621 < _set619.size; ++_i621)
              {
                {
                  org.apache.thrift.protocol.TMap _map622 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem620 = new HashMap<Integer,String>(2*_map622.size);
                  int _key623;
                  String _val624;
                  for (int _i625 = 0; _i625 < _map622.size; ++_i625)
                  {
                    _key623 = iprot.readI32();
                    _val624 = iprot.readString();
                    _elem620.put(_key623, _val624);
                  }
                }
                _val614.add(_elem620);
              }
            }
            struct.b2.put(_key613, _val614);
          }
        }
        struct.setB2IsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map626 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map626.size);
          List<Integer> _key627;
          Set<Map<Integer,String>> _val628;
          for (int _i629 = 0; _i629 < _map626.size; ++_i629)
          {
            {
              org.apache.thrift.protocol.TList _list630 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key627 = new ArrayList<Integer>(_list630.size);
              int _elem631;
              for (int _i632 = 0; _i632 < _list630.size; ++_i632)
              {
                _elem631 = iprot.readI32();
                _key627.add(_elem631);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set633 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val628 = new HashSet<Map<Integer,String>>(2*_set633.size);
              Map<Integer,String> _elem634;
              for (int _i635 = 0; _i635 < _set633.size; ++_i635)
              {
                {
                  org.apache.thrift.protocol.TMap _map636 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem634 = new HashMap<Integer,String>(2*_map636.size);
                  int _key637;
                  String _val638;
                  for (int _i639 = 0; _i639 < _map636.size; ++_i639)
                  {
                    _key637 = iprot.readI32();
                    _val638 = iprot.readString();
                    _elem634.put(_key637, _val638);
                  }
                }
                _val628.add(_elem634);
              }
            }
            struct.b3.put(_key627, _val628);
          }
        }
        struct.setB3IsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map640 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map640.size);
          List<Integer> _key641;
          Set<Map<Integer,String>> _val642;
          for (int _i643 = 0; _i643 < _map640.size; ++_i643)
          {
            {
              org.apache.thrift.protocol.TList _list644 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key641 = new ArrayList<Integer>(_list644.size);
              int _elem645;
              for (int _i646 = 0; _i646 < _list644.size; ++_i646)
              {
                _elem645 = iprot.readI32();
                _key641.add(_elem645);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set647 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val642 = new HashSet<Map<Integer,String>>(2*_set647.size);
              Map<Integer,String> _elem648;
              for (int _i649 = 0; _i649 < _set647.size; ++_i649)
              {
                {
                  org.apache.thrift.protocol.TMap _map650 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem648 = new HashMap<Integer,String>(2*_map650.size);
                  int _key651;
                  String _val652;
                  for (int _i653 = 0; _i653 < _map650.size; ++_i653)
                  {
                    _key651 = iprot.readI32();
                    _val652 = iprot.readString();
                    _elem648.put(_key651, _val652);
                  }
                }
                _val642.add(_elem648);
              }
            }
            struct.b4.put(_key641, _val642);
          }
        }
        struct.setB4IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

