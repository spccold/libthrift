/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class NestedListsBonk implements org.apache.thrift.TBase<NestedListsBonk, NestedListsBonk._Fields>, java.io.Serializable, Cloneable, Comparable<NestedListsBonk> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedListsBonk");

  private static final org.apache.thrift.protocol.TField BONK_FIELD_DESC = new org.apache.thrift.protocol.TField("bonk", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new NestedListsBonkStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new NestedListsBonkTupleSchemeFactory();

  public List<List<List<Bonk>>> bonk; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BONK((short)1, "bonk");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BONK
          return BONK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BONK, new org.apache.thrift.meta_data.FieldMetaData("bonk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bonk.class))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NestedListsBonk.class, metaDataMap);
  }

  public NestedListsBonk() {
  }

  public NestedListsBonk(
    List<List<List<Bonk>>> bonk)
  {
    this();
    this.bonk = bonk;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NestedListsBonk(NestedListsBonk other) {
    if (other.isSetBonk()) {
      List<List<List<Bonk>>> __this__bonk = new ArrayList<List<List<Bonk>>>(other.bonk.size());
      for (List<List<Bonk>> other_element : other.bonk) {
        List<List<Bonk>> __this__bonk_copy = new ArrayList<List<Bonk>>(other_element.size());
        for (List<Bonk> other_element_element : other_element) {
          List<Bonk> __this__bonk_copy_copy = new ArrayList<Bonk>(other_element_element.size());
          for (Bonk other_element_element_element : other_element_element) {
            __this__bonk_copy_copy.add(new Bonk(other_element_element_element));
          }
          __this__bonk_copy.add(__this__bonk_copy_copy);
        }
        __this__bonk.add(__this__bonk_copy);
      }
      this.bonk = __this__bonk;
    }
  }

  public NestedListsBonk deepCopy() {
    return new NestedListsBonk(this);
  }

  @Override
  public void clear() {
    this.bonk = null;
  }

  public int getBonkSize() {
    return (this.bonk == null) ? 0 : this.bonk.size();
  }

  public java.util.Iterator<List<List<Bonk>>> getBonkIterator() {
    return (this.bonk == null) ? null : this.bonk.iterator();
  }

  public void addToBonk(List<List<Bonk>> elem) {
    if (this.bonk == null) {
      this.bonk = new ArrayList<List<List<Bonk>>>();
    }
    this.bonk.add(elem);
  }

  public List<List<List<Bonk>>> getBonk() {
    return this.bonk;
  }

  public NestedListsBonk setBonk(List<List<List<Bonk>>> bonk) {
    this.bonk = bonk;
    return this;
  }

  public void unsetBonk() {
    this.bonk = null;
  }

  /** Returns true if field bonk is set (has been assigned a value) and false otherwise */
  public boolean isSetBonk() {
    return this.bonk != null;
  }

  public void setBonkIsSet(boolean value) {
    if (!value) {
      this.bonk = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BONK:
      if (value == null) {
        unsetBonk();
      } else {
        setBonk((List<List<List<Bonk>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BONK:
      return getBonk();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BONK:
      return isSetBonk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NestedListsBonk)
      return this.equals((NestedListsBonk)that);
    return false;
  }

  public boolean equals(NestedListsBonk that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bonk = true && this.isSetBonk();
    boolean that_present_bonk = true && that.isSetBonk();
    if (this_present_bonk || that_present_bonk) {
      if (!(this_present_bonk && that_present_bonk))
        return false;
      if (!this.bonk.equals(that.bonk))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBonk()) ? 131071 : 524287);
    if (isSetBonk())
      hashCode = hashCode * 8191 + bonk.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NestedListsBonk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBonk()).compareTo(other.isSetBonk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBonk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bonk, other.bonk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NestedListsBonk(");
    boolean first = true;

    sb.append("bonk:");
    if (this.bonk == null) {
      sb.append("null");
    } else {
      sb.append(this.bonk);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NestedListsBonkStandardSchemeFactory implements SchemeFactory {
    public NestedListsBonkStandardScheme getScheme() {
      return new NestedListsBonkStandardScheme();
    }
  }

  private static class NestedListsBonkStandardScheme extends StandardScheme<NestedListsBonk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NestedListsBonk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BONK
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.bonk = new ArrayList<List<List<Bonk>>>(_list264.size);
                List<List<Bonk>> _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                {
                  {
                    org.apache.thrift.protocol.TList _list267 = iprot.readListBegin();
                    _elem265 = new ArrayList<List<Bonk>>(_list267.size);
                    List<Bonk> _elem268;
                    for (int _i269 = 0; _i269 < _list267.size; ++_i269)
                    {
                      {
                        org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                        _elem268 = new ArrayList<Bonk>(_list270.size);
                        Bonk _elem271;
                        for (int _i272 = 0; _i272 < _list270.size; ++_i272)
                        {
                          _elem271 = new Bonk();
                          _elem271.read(iprot);
                          _elem268.add(_elem271);
                        }
                        iprot.readListEnd();
                      }
                      _elem265.add(_elem268);
                    }
                    iprot.readListEnd();
                  }
                  struct.bonk.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setBonkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NestedListsBonk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bonk != null) {
        oprot.writeFieldBegin(BONK_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bonk.size()));
          for (List<List<Bonk>> _iter273 : struct.bonk)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter273.size()));
              for (List<Bonk> _iter274 : _iter273)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter274.size()));
                  for (Bonk _iter275 : _iter274)
                  {
                    _iter275.write(oprot);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NestedListsBonkTupleSchemeFactory implements SchemeFactory {
    public NestedListsBonkTupleScheme getScheme() {
      return new NestedListsBonkTupleScheme();
    }
  }

  private static class NestedListsBonkTupleScheme extends TupleScheme<NestedListsBonk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NestedListsBonk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBonk()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBonk()) {
        {
          oprot.writeI32(struct.bonk.size());
          for (List<List<Bonk>> _iter276 : struct.bonk)
          {
            {
              oprot.writeI32(_iter276.size());
              for (List<Bonk> _iter277 : _iter276)
              {
                {
                  oprot.writeI32(_iter277.size());
                  for (Bonk _iter278 : _iter277)
                  {
                    _iter278.write(oprot);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NestedListsBonk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.bonk = new ArrayList<List<List<Bonk>>>(_list279.size);
          List<List<Bonk>> _elem280;
          for (int _i281 = 0; _i281 < _list279.size; ++_i281)
          {
            {
              org.apache.thrift.protocol.TList _list282 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem280 = new ArrayList<List<Bonk>>(_list282.size);
              List<Bonk> _elem283;
              for (int _i284 = 0; _i284 < _list282.size; ++_i284)
              {
                {
                  org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                  _elem283 = new ArrayList<Bonk>(_list285.size);
                  Bonk _elem286;
                  for (int _i287 = 0; _i287 < _list285.size; ++_i287)
                  {
                    _elem286 = new Bonk();
                    _elem286.read(iprot);
                    _elem283.add(_elem286);
                  }
                }
                _elem280.add(_elem283);
              }
            }
            struct.bonk.add(_elem280);
          }
        }
        struct.setBonkIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

