/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.demo.userservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-12")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField NUM8_FIELD_DESC = new org.apache.thrift.protocol.TField("num8", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField NUM16_FIELD_DESC = new org.apache.thrift.protocol.TField("num16", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField NUM32_FIELD_DESC = new org.apache.thrift.protocol.TField("num32", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM64_FIELD_DESC = new org.apache.thrift.protocol.TField("num64", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("dnum", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField M_FIELD_DESC = new org.apache.thrift.protocol.TField("m", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.SET, (short)11);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

  public boolean flag; // required
  public byte num8; // required
  public short num16; // required
  public int num32; // required
  public long num64; // required
  public double dnum; // required
  public String name; // required
  public ByteBuffer bytes; // required
  public Map<String,String> m; // required
  public List<String> l; // required
  public Set<String> s; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FLAG((short)1, "flag"),
    NUM8((short)2, "num8"),
    NUM16((short)3, "num16"),
    NUM32((short)4, "num32"),
    NUM64((short)5, "num64"),
    DNUM((short)6, "dnum"),
    NAME((short)7, "name"),
    BYTES((short)8, "bytes"),
    M((short)9, "m"),
    L((short)10, "l"),
    S((short)11, "s");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FLAG
          return FLAG;
        case 2: // NUM8
          return NUM8;
        case 3: // NUM16
          return NUM16;
        case 4: // NUM32
          return NUM32;
        case 5: // NUM64
          return NUM64;
        case 6: // DNUM
          return DNUM;
        case 7: // NAME
          return NAME;
        case 8: // BYTES
          return BYTES;
        case 9: // M
          return M;
        case 10: // L
          return L;
        case 11: // S
          return S;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAG_ISSET_ID = 0;
  private static final int __NUM8_ISSET_ID = 1;
  private static final int __NUM16_ISSET_ID = 2;
  private static final int __NUM32_ISSET_ID = 3;
  private static final int __NUM64_ISSET_ID = 4;
  private static final int __DNUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUM8, new org.apache.thrift.meta_data.FieldMetaData("num8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NUM16, new org.apache.thrift.meta_data.FieldMetaData("num16", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NUM32, new org.apache.thrift.meta_data.FieldMetaData("num32", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM64, new org.apache.thrift.meta_data.FieldMetaData("num64", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DNUM, new org.apache.thrift.meta_data.FieldMetaData("dnum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.M, new org.apache.thrift.meta_data.FieldMetaData("m", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    boolean flag,
    byte num8,
    short num16,
    int num32,
    long num64,
    double dnum,
    String name,
    ByteBuffer bytes,
    Map<String,String> m,
    List<String> l,
    Set<String> s)
  {
    this();
    this.flag = flag;
    setFlagIsSet(true);
    this.num8 = num8;
    setNum8IsSet(true);
    this.num16 = num16;
    setNum16IsSet(true);
    this.num32 = num32;
    setNum32IsSet(true);
    this.num64 = num64;
    setNum64IsSet(true);
    this.dnum = dnum;
    setDnumIsSet(true);
    this.name = name;
    this.bytes = org.apache.thrift.TBaseHelper.copyBinary(bytes);
    this.m = m;
    this.l = l;
    this.s = s;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.flag = other.flag;
    this.num8 = other.num8;
    this.num16 = other.num16;
    this.num32 = other.num32;
    this.num64 = other.num64;
    this.dnum = other.dnum;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBytes()) {
      this.bytes = org.apache.thrift.TBaseHelper.copyBinary(other.bytes);
    }
    if (other.isSetM()) {
      Map<String,String> __this__m = new HashMap<String,String>(other.m);
      this.m = __this__m;
    }
    if (other.isSetL()) {
      List<String> __this__l = new ArrayList<String>(other.l);
      this.l = __this__l;
    }
    if (other.isSetS()) {
      Set<String> __this__s = new HashSet<String>(other.s);
      this.s = __this__s;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setFlagIsSet(false);
    this.flag = false;
    setNum8IsSet(false);
    this.num8 = 0;
    setNum16IsSet(false);
    this.num16 = 0;
    setNum32IsSet(false);
    this.num32 = 0;
    setNum64IsSet(false);
    this.num64 = 0;
    setDnumIsSet(false);
    this.dnum = 0.0;
    this.name = null;
    this.bytes = null;
    this.m = null;
    this.l = null;
    this.s = null;
  }

  public boolean isFlag() {
    return this.flag;
  }

  public User setFlag(boolean flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public byte getNum8() {
    return this.num8;
  }

  public User setNum8(byte num8) {
    this.num8 = num8;
    setNum8IsSet(true);
    return this;
  }

  public void unsetNum8() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM8_ISSET_ID);
  }

  /** Returns true if field num8 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum8() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM8_ISSET_ID);
  }

  public void setNum8IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM8_ISSET_ID, value);
  }

  public short getNum16() {
    return this.num16;
  }

  public User setNum16(short num16) {
    this.num16 = num16;
    setNum16IsSet(true);
    return this;
  }

  public void unsetNum16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM16_ISSET_ID);
  }

  /** Returns true if field num16 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum16() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM16_ISSET_ID);
  }

  public void setNum16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM16_ISSET_ID, value);
  }

  public int getNum32() {
    return this.num32;
  }

  public User setNum32(int num32) {
    this.num32 = num32;
    setNum32IsSet(true);
    return this;
  }

  public void unsetNum32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM32_ISSET_ID);
  }

  /** Returns true if field num32 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum32() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM32_ISSET_ID);
  }

  public void setNum32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM32_ISSET_ID, value);
  }

  public long getNum64() {
    return this.num64;
  }

  public User setNum64(long num64) {
    this.num64 = num64;
    setNum64IsSet(true);
    return this;
  }

  public void unsetNum64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM64_ISSET_ID);
  }

  /** Returns true if field num64 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum64() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM64_ISSET_ID);
  }

  public void setNum64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM64_ISSET_ID, value);
  }

  public double getDnum() {
    return this.dnum;
  }

  public User setDnum(double dnum) {
    this.dnum = dnum;
    setDnumIsSet(true);
    return this;
  }

  public void unsetDnum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DNUM_ISSET_ID);
  }

  /** Returns true if field dnum is set (has been assigned a value) and false otherwise */
  public boolean isSetDnum() {
    return EncodingUtils.testBit(__isset_bitfield, __DNUM_ISSET_ID);
  }

  public void setDnumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DNUM_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public User setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte[] getBytes() {
    setBytes(org.apache.thrift.TBaseHelper.rightSize(bytes));
    return bytes == null ? null : bytes.array();
  }

  public ByteBuffer bufferForBytes() {
    return org.apache.thrift.TBaseHelper.copyBinary(bytes);
  }

  public User setBytes(byte[] bytes) {
    this.bytes = bytes == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bytes, bytes.length));
    return this;
  }

  public User setBytes(ByteBuffer bytes) {
    this.bytes = org.apache.thrift.TBaseHelper.copyBinary(bytes);
    return this;
  }

  public void unsetBytes() {
    this.bytes = null;
  }

  /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBytes() {
    return this.bytes != null;
  }

  public void setBytesIsSet(boolean value) {
    if (!value) {
      this.bytes = null;
    }
  }

  public int getMSize() {
    return (this.m == null) ? 0 : this.m.size();
  }

  public void putToM(String key, String val) {
    if (this.m == null) {
      this.m = new HashMap<String,String>();
    }
    this.m.put(key, val);
  }

  public Map<String,String> getM() {
    return this.m;
  }

  public User setM(Map<String,String> m) {
    this.m = m;
    return this;
  }

  public void unsetM() {
    this.m = null;
  }

  /** Returns true if field m is set (has been assigned a value) and false otherwise */
  public boolean isSetM() {
    return this.m != null;
  }

  public void setMIsSet(boolean value) {
    if (!value) {
      this.m = null;
    }
  }

  public int getLSize() {
    return (this.l == null) ? 0 : this.l.size();
  }

  public java.util.Iterator<String> getLIterator() {
    return (this.l == null) ? null : this.l.iterator();
  }

  public void addToL(String elem) {
    if (this.l == null) {
      this.l = new ArrayList<String>();
    }
    this.l.add(elem);
  }

  public List<String> getL() {
    return this.l;
  }

  public User setL(List<String> l) {
    this.l = l;
    return this;
  }

  public void unsetL() {
    this.l = null;
  }

  /** Returns true if field l is set (has been assigned a value) and false otherwise */
  public boolean isSetL() {
    return this.l != null;
  }

  public void setLIsSet(boolean value) {
    if (!value) {
      this.l = null;
    }
  }

  public int getSSize() {
    return (this.s == null) ? 0 : this.s.size();
  }

  public java.util.Iterator<String> getSIterator() {
    return (this.s == null) ? null : this.s.iterator();
  }

  public void addToS(String elem) {
    if (this.s == null) {
      this.s = new HashSet<String>();
    }
    this.s.add(elem);
  }

  public Set<String> getS() {
    return this.s;
  }

  public User setS(Set<String> s) {
    this.s = s;
    return this;
  }

  public void unsetS() {
    this.s = null;
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean isSetS() {
    return this.s != null;
  }

  public void setSIsSet(boolean value) {
    if (!value) {
      this.s = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Boolean)value);
      }
      break;

    case NUM8:
      if (value == null) {
        unsetNum8();
      } else {
        setNum8((Byte)value);
      }
      break;

    case NUM16:
      if (value == null) {
        unsetNum16();
      } else {
        setNum16((Short)value);
      }
      break;

    case NUM32:
      if (value == null) {
        unsetNum32();
      } else {
        setNum32((Integer)value);
      }
      break;

    case NUM64:
      if (value == null) {
        unsetNum64();
      } else {
        setNum64((Long)value);
      }
      break;

    case DNUM:
      if (value == null) {
        unsetDnum();
      } else {
        setDnum((Double)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BYTES:
      if (value == null) {
        unsetBytes();
      } else {
        if (value instanceof byte[]) {
          setBytes((byte[])value);
        } else {
          setBytes((ByteBuffer)value);
        }
      }
      break;

    case M:
      if (value == null) {
        unsetM();
      } else {
        setM((Map<String,String>)value);
      }
      break;

    case L:
      if (value == null) {
        unsetL();
      } else {
        setL((List<String>)value);
      }
      break;

    case S:
      if (value == null) {
        unsetS();
      } else {
        setS((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FLAG:
      return isFlag();

    case NUM8:
      return getNum8();

    case NUM16:
      return getNum16();

    case NUM32:
      return getNum32();

    case NUM64:
      return getNum64();

    case DNUM:
      return getDnum();

    case NAME:
      return getName();

    case BYTES:
      return getBytes();

    case M:
      return getM();

    case L:
      return getL();

    case S:
      return getS();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FLAG:
      return isSetFlag();
    case NUM8:
      return isSetNum8();
    case NUM16:
      return isSetNum16();
    case NUM32:
      return isSetNum32();
    case NUM64:
      return isSetNum64();
    case DNUM:
      return isSetDnum();
    case NAME:
      return isSetName();
    case BYTES:
      return isSetBytes();
    case M:
      return isSetM();
    case L:
      return isSetL();
    case S:
      return isSetS();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_num8 = true;
    boolean that_present_num8 = true;
    if (this_present_num8 || that_present_num8) {
      if (!(this_present_num8 && that_present_num8))
        return false;
      if (this.num8 != that.num8)
        return false;
    }

    boolean this_present_num16 = true;
    boolean that_present_num16 = true;
    if (this_present_num16 || that_present_num16) {
      if (!(this_present_num16 && that_present_num16))
        return false;
      if (this.num16 != that.num16)
        return false;
    }

    boolean this_present_num32 = true;
    boolean that_present_num32 = true;
    if (this_present_num32 || that_present_num32) {
      if (!(this_present_num32 && that_present_num32))
        return false;
      if (this.num32 != that.num32)
        return false;
    }

    boolean this_present_num64 = true;
    boolean that_present_num64 = true;
    if (this_present_num64 || that_present_num64) {
      if (!(this_present_num64 && that_present_num64))
        return false;
      if (this.num64 != that.num64)
        return false;
    }

    boolean this_present_dnum = true;
    boolean that_present_dnum = true;
    if (this_present_dnum || that_present_dnum) {
      if (!(this_present_dnum && that_present_dnum))
        return false;
      if (this.dnum != that.dnum)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_bytes = true && this.isSetBytes();
    boolean that_present_bytes = true && that.isSetBytes();
    if (this_present_bytes || that_present_bytes) {
      if (!(this_present_bytes && that_present_bytes))
        return false;
      if (!this.bytes.equals(that.bytes))
        return false;
    }

    boolean this_present_m = true && this.isSetM();
    boolean that_present_m = true && that.isSetM();
    if (this_present_m || that_present_m) {
      if (!(this_present_m && that_present_m))
        return false;
      if (!this.m.equals(that.m))
        return false;
    }

    boolean this_present_l = true && this.isSetL();
    boolean that_present_l = true && that.isSetL();
    if (this_present_l || that_present_l) {
      if (!(this_present_l && that_present_l))
        return false;
      if (!this.l.equals(that.l))
        return false;
    }

    boolean this_present_s = true && this.isSetS();
    boolean that_present_s = true && that.isSetS();
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (!this.s.equals(that.s))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((flag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (num8);

    hashCode = hashCode * 8191 + num16;

    hashCode = hashCode * 8191 + num32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num64);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dnum);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetBytes()) ? 131071 : 524287);
    if (isSetBytes())
      hashCode = hashCode * 8191 + bytes.hashCode();

    hashCode = hashCode * 8191 + ((isSetM()) ? 131071 : 524287);
    if (isSetM())
      hashCode = hashCode * 8191 + m.hashCode();

    hashCode = hashCode * 8191 + ((isSetL()) ? 131071 : 524287);
    if (isSetL())
      hashCode = hashCode * 8191 + l.hashCode();

    hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
    if (isSetS())
      hashCode = hashCode * 8191 + s.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum8()).compareTo(other.isSetNum8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num8, other.num8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum16()).compareTo(other.isSetNum16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num16, other.num16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum32()).compareTo(other.isSetNum32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num32, other.num32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum64()).compareTo(other.isSetNum64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num64, other.num64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDnum()).compareTo(other.isSetDnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dnum, other.dnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytes()).compareTo(other.isSetBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM()).compareTo(other.isSetM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m, other.m);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetL()).compareTo(other.isSetL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l, other.l);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS()).compareTo(other.isSetS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num8:");
    sb.append(this.num8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num16:");
    sb.append(this.num16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num32:");
    sb.append(this.num32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num64:");
    sb.append(this.num64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dnum:");
    sb.append(this.dnum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytes:");
    if (this.bytes == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.bytes, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m:");
    if (this.m == null) {
      sb.append("null");
    } else {
      sb.append(this.m);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("l:");
    if (this.l == null) {
      sb.append("null");
    } else {
      sb.append(this.l);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s:");
    if (this.s == null) {
      sb.append("null");
    } else {
      sb.append(this.s);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'flag' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num16' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num32' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num64' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dnum' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (bytes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bytes' was not present! Struct: " + toString());
    }
    if (m == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'm' was not present! Struct: " + toString());
    }
    if (l == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'l' was not present! Struct: " + toString());
    }
    if (s == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 's' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.flag = iprot.readBool();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM8
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.num8 = iprot.readByte();
              struct.setNum8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.num16 = iprot.readI16();
              struct.setNum16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num32 = iprot.readI32();
              struct.setNum32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num64 = iprot.readI64();
              struct.setNum64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dnum = iprot.readDouble();
              struct.setDnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bytes = iprot.readBinary();
              struct.setBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // M
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.m = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.m.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // L
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.l = new ArrayList<String>(_list4.size);
                String _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readString();
                  struct.l.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.s = new HashSet<String>(2*_set7.size);
                String _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.s.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFlag()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'flag' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum16()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num16' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum32()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num32' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum64()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num64' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDnum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dnum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeBool(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM8_FIELD_DESC);
      oprot.writeByte(struct.num8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM16_FIELD_DESC);
      oprot.writeI16(struct.num16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM32_FIELD_DESC);
      oprot.writeI32(struct.num32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM64_FIELD_DESC);
      oprot.writeI64(struct.num64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DNUM_FIELD_DESC);
      oprot.writeDouble(struct.dnum);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.bytes != null) {
        oprot.writeFieldBegin(BYTES_FIELD_DESC);
        oprot.writeBinary(struct.bytes);
        oprot.writeFieldEnd();
      }
      if (struct.m != null) {
        oprot.writeFieldBegin(M_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.m.size()));
          for (Map.Entry<String, String> _iter10 : struct.m.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.l != null) {
        oprot.writeFieldBegin(L_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.l.size()));
          for (String _iter11 : struct.l)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.s != null) {
        oprot.writeFieldBegin(S_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.s.size()));
          for (String _iter12 : struct.s)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.flag);
      oprot.writeByte(struct.num8);
      oprot.writeI16(struct.num16);
      oprot.writeI32(struct.num32);
      oprot.writeI64(struct.num64);
      oprot.writeDouble(struct.dnum);
      oprot.writeString(struct.name);
      oprot.writeBinary(struct.bytes);
      {
        oprot.writeI32(struct.m.size());
        for (Map.Entry<String, String> _iter13 : struct.m.entrySet())
        {
          oprot.writeString(_iter13.getKey());
          oprot.writeString(_iter13.getValue());
        }
      }
      {
        oprot.writeI32(struct.l.size());
        for (String _iter14 : struct.l)
        {
          oprot.writeString(_iter14);
        }
      }
      {
        oprot.writeI32(struct.s.size());
        for (String _iter15 : struct.s)
        {
          oprot.writeString(_iter15);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.flag = iprot.readBool();
      struct.setFlagIsSet(true);
      struct.num8 = iprot.readByte();
      struct.setNum8IsSet(true);
      struct.num16 = iprot.readI16();
      struct.setNum16IsSet(true);
      struct.num32 = iprot.readI32();
      struct.setNum32IsSet(true);
      struct.num64 = iprot.readI64();
      struct.setNum64IsSet(true);
      struct.dnum = iprot.readDouble();
      struct.setDnumIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.bytes = iprot.readBinary();
      struct.setBytesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.m = new HashMap<String,String>(2*_map16.size);
        String _key17;
        String _val18;
        for (int _i19 = 0; _i19 < _map16.size; ++_i19)
        {
          _key17 = iprot.readString();
          _val18 = iprot.readString();
          struct.m.put(_key17, _val18);
        }
      }
      struct.setMIsSet(true);
      {
        org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.l = new ArrayList<String>(_list20.size);
        String _elem21;
        for (int _i22 = 0; _i22 < _list20.size; ++_i22)
        {
          _elem21 = iprot.readString();
          struct.l.add(_elem21);
        }
      }
      struct.setLIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.s = new HashSet<String>(2*_set23.size);
        String _elem24;
        for (int _i25 = 0; _i25 < _set23.size; ++_i25)
        {
          _elem24 = iprot.readString();
          struct.s.add(_elem24);
        }
      }
      struct.setSIsSet(true);
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

