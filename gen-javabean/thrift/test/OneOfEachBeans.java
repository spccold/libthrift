/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class OneOfEachBeans implements org.apache.thrift.TBase<OneOfEachBeans, OneOfEachBeans._Fields>, java.io.Serializable, Cloneable, Comparable<OneOfEachBeans> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OneOfEachBeans");

  private static final org.apache.thrift.protocol.TField BOOLEAN_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_field", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField A_BITE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_bite", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField INTEGER16_FIELD_DESC = new org.apache.thrift.protocol.TField("integer16", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField INTEGER32_FIELD_DESC = new org.apache.thrift.protocol.TField("integer32", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INTEGER64_FIELD_DESC = new org.apache.thrift.protocol.TField("integer64", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("double_precision", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SOME_CHARACTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("some_characters", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BASE64_FIELD_DESC = new org.apache.thrift.protocol.TField("base64", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_list", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField I16_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_list", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField I64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_list", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new OneOfEachBeansStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new OneOfEachBeansTupleSchemeFactory();

  private boolean boolean_field; // required
  private byte a_bite; // required
  private short integer16; // required
  private int integer32; // required
  private long integer64; // required
  private double double_precision; // required
  private String some_characters; // required
  private ByteBuffer base64; // required
  private List<Byte> byte_list; // required
  private List<Short> i16_list; // required
  private List<Long> i64_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOLEAN_FIELD((short)1, "boolean_field"),
    A_BITE((short)2, "a_bite"),
    INTEGER16((short)3, "integer16"),
    INTEGER32((short)4, "integer32"),
    INTEGER64((short)5, "integer64"),
    DOUBLE_PRECISION((short)6, "double_precision"),
    SOME_CHARACTERS((short)7, "some_characters"),
    BASE64((short)8, "base64"),
    BYTE_LIST((short)9, "byte_list"),
    I16_LIST((short)10, "i16_list"),
    I64_LIST((short)11, "i64_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOLEAN_FIELD
          return BOOLEAN_FIELD;
        case 2: // A_BITE
          return A_BITE;
        case 3: // INTEGER16
          return INTEGER16;
        case 4: // INTEGER32
          return INTEGER32;
        case 5: // INTEGER64
          return INTEGER64;
        case 6: // DOUBLE_PRECISION
          return DOUBLE_PRECISION;
        case 7: // SOME_CHARACTERS
          return SOME_CHARACTERS;
        case 8: // BASE64
          return BASE64;
        case 9: // BYTE_LIST
          return BYTE_LIST;
        case 10: // I16_LIST
          return I16_LIST;
        case 11: // I64_LIST
          return I64_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLEAN_FIELD_ISSET_ID = 0;
  private static final int __A_BITE_ISSET_ID = 1;
  private static final int __INTEGER16_ISSET_ID = 2;
  private static final int __INTEGER32_ISSET_ID = 3;
  private static final int __INTEGER64_ISSET_ID = 4;
  private static final int __DOUBLE_PRECISION_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOLEAN_FIELD, new org.apache.thrift.meta_data.FieldMetaData("boolean_field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.A_BITE, new org.apache.thrift.meta_data.FieldMetaData("a_bite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INTEGER16, new org.apache.thrift.meta_data.FieldMetaData("integer16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INTEGER32, new org.apache.thrift.meta_data.FieldMetaData("integer32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTEGER64, new org.apache.thrift.meta_data.FieldMetaData("integer64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("double_precision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOME_CHARACTERS, new org.apache.thrift.meta_data.FieldMetaData("some_characters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE64, new org.apache.thrift.meta_data.FieldMetaData("base64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byte_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.I16_LIST, new org.apache.thrift.meta_data.FieldMetaData("i16_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.I64_LIST, new org.apache.thrift.meta_data.FieldMetaData("i64_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneOfEachBeans.class, metaDataMap);
  }

  public OneOfEachBeans() {
  }

  public OneOfEachBeans(
    boolean boolean_field,
    byte a_bite,
    short integer16,
    int integer32,
    long integer64,
    double double_precision,
    String some_characters,
    ByteBuffer base64,
    List<Byte> byte_list,
    List<Short> i16_list,
    List<Long> i64_list)
  {
    this();
    this.boolean_field = boolean_field;
    set_boolean_field_isSet(true);
    this.a_bite = a_bite;
    set_a_bite_isSet(true);
    this.integer16 = integer16;
    set_integer16_isSet(true);
    this.integer32 = integer32;
    set_integer32_isSet(true);
    this.integer64 = integer64;
    set_integer64_isSet(true);
    this.double_precision = double_precision;
    set_double_precision_isSet(true);
    this.some_characters = some_characters;
    this.base64 = org.apache.thrift.TBaseHelper.copyBinary(base64);
    this.byte_list = byte_list;
    this.i16_list = i16_list;
    this.i64_list = i64_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OneOfEachBeans(OneOfEachBeans other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolean_field = other.boolean_field;
    this.a_bite = other.a_bite;
    this.integer16 = other.integer16;
    this.integer32 = other.integer32;
    this.integer64 = other.integer64;
    this.double_precision = other.double_precision;
    if (other.is_set_some_characters()) {
      this.some_characters = other.some_characters;
    }
    if (other.is_set_base64()) {
      this.base64 = org.apache.thrift.TBaseHelper.copyBinary(other.base64);
    }
    if (other.is_set_byte_list()) {
      List<Byte> __this__byte_list = new ArrayList<Byte>(other.byte_list);
      this.byte_list = __this__byte_list;
    }
    if (other.is_set_i16_list()) {
      List<Short> __this__i16_list = new ArrayList<Short>(other.i16_list);
      this.i16_list = __this__i16_list;
    }
    if (other.is_set_i64_list()) {
      List<Long> __this__i64_list = new ArrayList<Long>(other.i64_list);
      this.i64_list = __this__i64_list;
    }
  }

  public OneOfEachBeans deepCopy() {
    return new OneOfEachBeans(this);
  }

  @Override
  public void clear() {
    set_boolean_field_isSet(false);
    this.boolean_field = false;
    set_a_bite_isSet(false);
    this.a_bite = 0;
    set_integer16_isSet(false);
    this.integer16 = 0;
    set_integer32_isSet(false);
    this.integer32 = 0;
    set_integer64_isSet(false);
    this.integer64 = 0;
    set_double_precision_isSet(false);
    this.double_precision = 0.0;
    this.some_characters = null;
    this.base64 = null;
    this.byte_list = null;
    this.i16_list = null;
    this.i64_list = null;
  }

  public boolean is_boolean_field() {
    return this.boolean_field;
  }

  public void set_boolean_field(boolean boolean_field) {
    this.boolean_field = boolean_field;
    set_boolean_field_isSet(true);
  }

  public void unset_boolean_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLEAN_FIELD_ISSET_ID);
  }

  /** Returns true if field boolean_field is set (has been assigned a value) and false otherwise */
  public boolean is_set_boolean_field() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLEAN_FIELD_ISSET_ID);
  }

  public void set_boolean_field_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLEAN_FIELD_ISSET_ID, value);
  }

  public byte get_a_bite() {
    return this.a_bite;
  }

  public void set_a_bite(byte a_bite) {
    this.a_bite = a_bite;
    set_a_bite_isSet(true);
  }

  public void unset_a_bite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_BITE_ISSET_ID);
  }

  /** Returns true if field a_bite is set (has been assigned a value) and false otherwise */
  public boolean is_set_a_bite() {
    return EncodingUtils.testBit(__isset_bitfield, __A_BITE_ISSET_ID);
  }

  public void set_a_bite_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_BITE_ISSET_ID, value);
  }

  public short get_integer16() {
    return this.integer16;
  }

  public void set_integer16(short integer16) {
    this.integer16 = integer16;
    set_integer16_isSet(true);
  }

  public void unset_integer16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER16_ISSET_ID);
  }

  /** Returns true if field integer16 is set (has been assigned a value) and false otherwise */
  public boolean is_set_integer16() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER16_ISSET_ID);
  }

  public void set_integer16_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER16_ISSET_ID, value);
  }

  public int get_integer32() {
    return this.integer32;
  }

  public void set_integer32(int integer32) {
    this.integer32 = integer32;
    set_integer32_isSet(true);
  }

  public void unset_integer32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER32_ISSET_ID);
  }

  /** Returns true if field integer32 is set (has been assigned a value) and false otherwise */
  public boolean is_set_integer32() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER32_ISSET_ID);
  }

  public void set_integer32_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER32_ISSET_ID, value);
  }

  public long get_integer64() {
    return this.integer64;
  }

  public void set_integer64(long integer64) {
    this.integer64 = integer64;
    set_integer64_isSet(true);
  }

  public void unset_integer64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER64_ISSET_ID);
  }

  /** Returns true if field integer64 is set (has been assigned a value) and false otherwise */
  public boolean is_set_integer64() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER64_ISSET_ID);
  }

  public void set_integer64_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER64_ISSET_ID, value);
  }

  public double get_double_precision() {
    return this.double_precision;
  }

  public void set_double_precision(double double_precision) {
    this.double_precision = double_precision;
    set_double_precision_isSet(true);
  }

  public void unset_double_precision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
  }

  /** Returns true if field double_precision is set (has been assigned a value) and false otherwise */
  public boolean is_set_double_precision() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
  }

  public void set_double_precision_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID, value);
  }

  public String get_some_characters() {
    return this.some_characters;
  }

  public void set_some_characters(String some_characters) {
    this.some_characters = some_characters;
  }

  public void unset_some_characters() {
    this.some_characters = null;
  }

  /** Returns true if field some_characters is set (has been assigned a value) and false otherwise */
  public boolean is_set_some_characters() {
    return this.some_characters != null;
  }

  public void set_some_characters_isSet(boolean value) {
    if (!value) {
      this.some_characters = null;
    }
  }

  public byte[] get_base64() {
    set_base64(org.apache.thrift.TBaseHelper.rightSize(base64));
    return base64 == null ? null : base64.array();
  }

  public ByteBuffer buffer_for_base64() {
    return org.apache.thrift.TBaseHelper.copyBinary(base64);
  }

  public void set_base64(byte[] base64) {
    this.base64 = base64 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(base64, base64.length));
  }

  public void set_base64(ByteBuffer base64) {
    this.base64 = org.apache.thrift.TBaseHelper.copyBinary(base64);
  }

  public void unset_base64() {
    this.base64 = null;
  }

  /** Returns true if field base64 is set (has been assigned a value) and false otherwise */
  public boolean is_set_base64() {
    return this.base64 != null;
  }

  public void set_base64_isSet(boolean value) {
    if (!value) {
      this.base64 = null;
    }
  }

  public int get_byte_list_size() {
    return (this.byte_list == null) ? 0 : this.byte_list.size();
  }

  public java.util.Iterator<Byte> get_byte_list_iterator() {
    return (this.byte_list == null) ? null : this.byte_list.iterator();
  }

  public void add_to_byte_list(byte elem) {
    if (this.byte_list == null) {
      this.byte_list = new ArrayList<Byte>();
    }
    this.byte_list.add(elem);
  }

  public List<Byte> get_byte_list() {
    return this.byte_list;
  }

  public void set_byte_list(List<Byte> byte_list) {
    this.byte_list = byte_list;
  }

  public void unset_byte_list() {
    this.byte_list = null;
  }

  /** Returns true if field byte_list is set (has been assigned a value) and false otherwise */
  public boolean is_set_byte_list() {
    return this.byte_list != null;
  }

  public void set_byte_list_isSet(boolean value) {
    if (!value) {
      this.byte_list = null;
    }
  }

  public int get_i16_list_size() {
    return (this.i16_list == null) ? 0 : this.i16_list.size();
  }

  public java.util.Iterator<Short> get_i16_list_iterator() {
    return (this.i16_list == null) ? null : this.i16_list.iterator();
  }

  public void add_to_i16_list(short elem) {
    if (this.i16_list == null) {
      this.i16_list = new ArrayList<Short>();
    }
    this.i16_list.add(elem);
  }

  public List<Short> get_i16_list() {
    return this.i16_list;
  }

  public void set_i16_list(List<Short> i16_list) {
    this.i16_list = i16_list;
  }

  public void unset_i16_list() {
    this.i16_list = null;
  }

  /** Returns true if field i16_list is set (has been assigned a value) and false otherwise */
  public boolean is_set_i16_list() {
    return this.i16_list != null;
  }

  public void set_i16_list_isSet(boolean value) {
    if (!value) {
      this.i16_list = null;
    }
  }

  public int get_i64_list_size() {
    return (this.i64_list == null) ? 0 : this.i64_list.size();
  }

  public java.util.Iterator<Long> get_i64_list_iterator() {
    return (this.i64_list == null) ? null : this.i64_list.iterator();
  }

  public void add_to_i64_list(long elem) {
    if (this.i64_list == null) {
      this.i64_list = new ArrayList<Long>();
    }
    this.i64_list.add(elem);
  }

  public List<Long> get_i64_list() {
    return this.i64_list;
  }

  public void set_i64_list(List<Long> i64_list) {
    this.i64_list = i64_list;
  }

  public void unset_i64_list() {
    this.i64_list = null;
  }

  /** Returns true if field i64_list is set (has been assigned a value) and false otherwise */
  public boolean is_set_i64_list() {
    return this.i64_list != null;
  }

  public void set_i64_list_isSet(boolean value) {
    if (!value) {
      this.i64_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOLEAN_FIELD:
      if (value == null) {
        unset_boolean_field();
      } else {
        set_boolean_field((Boolean)value);
      }
      break;

    case A_BITE:
      if (value == null) {
        unset_a_bite();
      } else {
        set_a_bite((Byte)value);
      }
      break;

    case INTEGER16:
      if (value == null) {
        unset_integer16();
      } else {
        set_integer16((Short)value);
      }
      break;

    case INTEGER32:
      if (value == null) {
        unset_integer32();
      } else {
        set_integer32((Integer)value);
      }
      break;

    case INTEGER64:
      if (value == null) {
        unset_integer64();
      } else {
        set_integer64((Long)value);
      }
      break;

    case DOUBLE_PRECISION:
      if (value == null) {
        unset_double_precision();
      } else {
        set_double_precision((Double)value);
      }
      break;

    case SOME_CHARACTERS:
      if (value == null) {
        unset_some_characters();
      } else {
        set_some_characters((String)value);
      }
      break;

    case BASE64:
      if (value == null) {
        unset_base64();
      } else {
        if (value instanceof byte[]) {
          set_base64((byte[])value);
        } else {
          set_base64((ByteBuffer)value);
        }
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unset_byte_list();
      } else {
        set_byte_list((List<Byte>)value);
      }
      break;

    case I16_LIST:
      if (value == null) {
        unset_i16_list();
      } else {
        set_i16_list((List<Short>)value);
      }
      break;

    case I64_LIST:
      if (value == null) {
        unset_i64_list();
      } else {
        set_i64_list((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOLEAN_FIELD:
      return is_boolean_field();

    case A_BITE:
      return get_a_bite();

    case INTEGER16:
      return get_integer16();

    case INTEGER32:
      return get_integer32();

    case INTEGER64:
      return get_integer64();

    case DOUBLE_PRECISION:
      return get_double_precision();

    case SOME_CHARACTERS:
      return get_some_characters();

    case BASE64:
      return get_base64();

    case BYTE_LIST:
      return get_byte_list();

    case I16_LIST:
      return get_i16_list();

    case I64_LIST:
      return get_i64_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOLEAN_FIELD:
      return is_set_boolean_field();
    case A_BITE:
      return is_set_a_bite();
    case INTEGER16:
      return is_set_integer16();
    case INTEGER32:
      return is_set_integer32();
    case INTEGER64:
      return is_set_integer64();
    case DOUBLE_PRECISION:
      return is_set_double_precision();
    case SOME_CHARACTERS:
      return is_set_some_characters();
    case BASE64:
      return is_set_base64();
    case BYTE_LIST:
      return is_set_byte_list();
    case I16_LIST:
      return is_set_i16_list();
    case I64_LIST:
      return is_set_i64_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OneOfEachBeans)
      return this.equals((OneOfEachBeans)that);
    return false;
  }

  public boolean equals(OneOfEachBeans that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_boolean_field = true;
    boolean that_present_boolean_field = true;
    if (this_present_boolean_field || that_present_boolean_field) {
      if (!(this_present_boolean_field && that_present_boolean_field))
        return false;
      if (this.boolean_field != that.boolean_field)
        return false;
    }

    boolean this_present_a_bite = true;
    boolean that_present_a_bite = true;
    if (this_present_a_bite || that_present_a_bite) {
      if (!(this_present_a_bite && that_present_a_bite))
        return false;
      if (this.a_bite != that.a_bite)
        return false;
    }

    boolean this_present_integer16 = true;
    boolean that_present_integer16 = true;
    if (this_present_integer16 || that_present_integer16) {
      if (!(this_present_integer16 && that_present_integer16))
        return false;
      if (this.integer16 != that.integer16)
        return false;
    }

    boolean this_present_integer32 = true;
    boolean that_present_integer32 = true;
    if (this_present_integer32 || that_present_integer32) {
      if (!(this_present_integer32 && that_present_integer32))
        return false;
      if (this.integer32 != that.integer32)
        return false;
    }

    boolean this_present_integer64 = true;
    boolean that_present_integer64 = true;
    if (this_present_integer64 || that_present_integer64) {
      if (!(this_present_integer64 && that_present_integer64))
        return false;
      if (this.integer64 != that.integer64)
        return false;
    }

    boolean this_present_double_precision = true;
    boolean that_present_double_precision = true;
    if (this_present_double_precision || that_present_double_precision) {
      if (!(this_present_double_precision && that_present_double_precision))
        return false;
      if (this.double_precision != that.double_precision)
        return false;
    }

    boolean this_present_some_characters = true && this.is_set_some_characters();
    boolean that_present_some_characters = true && that.is_set_some_characters();
    if (this_present_some_characters || that_present_some_characters) {
      if (!(this_present_some_characters && that_present_some_characters))
        return false;
      if (!this.some_characters.equals(that.some_characters))
        return false;
    }

    boolean this_present_base64 = true && this.is_set_base64();
    boolean that_present_base64 = true && that.is_set_base64();
    if (this_present_base64 || that_present_base64) {
      if (!(this_present_base64 && that_present_base64))
        return false;
      if (!this.base64.equals(that.base64))
        return false;
    }

    boolean this_present_byte_list = true && this.is_set_byte_list();
    boolean that_present_byte_list = true && that.is_set_byte_list();
    if (this_present_byte_list || that_present_byte_list) {
      if (!(this_present_byte_list && that_present_byte_list))
        return false;
      if (!this.byte_list.equals(that.byte_list))
        return false;
    }

    boolean this_present_i16_list = true && this.is_set_i16_list();
    boolean that_present_i16_list = true && that.is_set_i16_list();
    if (this_present_i16_list || that_present_i16_list) {
      if (!(this_present_i16_list && that_present_i16_list))
        return false;
      if (!this.i16_list.equals(that.i16_list))
        return false;
    }

    boolean this_present_i64_list = true && this.is_set_i64_list();
    boolean that_present_i64_list = true && that.is_set_i64_list();
    if (this_present_i64_list || that_present_i64_list) {
      if (!(this_present_i64_list && that_present_i64_list))
        return false;
      if (!this.i64_list.equals(that.i64_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((boolean_field) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (a_bite);

    hashCode = hashCode * 8191 + integer16;

    hashCode = hashCode * 8191 + integer32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(integer64);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(double_precision);

    hashCode = hashCode * 8191 + ((is_set_some_characters()) ? 131071 : 524287);
    if (is_set_some_characters())
      hashCode = hashCode * 8191 + some_characters.hashCode();

    hashCode = hashCode * 8191 + ((is_set_base64()) ? 131071 : 524287);
    if (is_set_base64())
      hashCode = hashCode * 8191 + base64.hashCode();

    hashCode = hashCode * 8191 + ((is_set_byte_list()) ? 131071 : 524287);
    if (is_set_byte_list())
      hashCode = hashCode * 8191 + byte_list.hashCode();

    hashCode = hashCode * 8191 + ((is_set_i16_list()) ? 131071 : 524287);
    if (is_set_i16_list())
      hashCode = hashCode * 8191 + i16_list.hashCode();

    hashCode = hashCode * 8191 + ((is_set_i64_list()) ? 131071 : 524287);
    if (is_set_i64_list())
      hashCode = hashCode * 8191 + i64_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OneOfEachBeans other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_boolean_field()).compareTo(other.is_set_boolean_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_boolean_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_field, other.boolean_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_a_bite()).compareTo(other.is_set_a_bite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_a_bite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_bite, other.a_bite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_integer16()).compareTo(other.is_set_integer16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_integer16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer16, other.integer16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_integer32()).compareTo(other.is_set_integer32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_integer32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer32, other.integer32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_integer64()).compareTo(other.is_set_integer64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_integer64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer64, other.integer64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_double_precision()).compareTo(other.is_set_double_precision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_double_precision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_precision, other.double_precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_some_characters()).compareTo(other.is_set_some_characters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_some_characters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.some_characters, other.some_characters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_base64()).compareTo(other.is_set_base64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_base64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base64, other.base64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_byte_list()).compareTo(other.is_set_byte_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_byte_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_list, other.byte_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_i16_list()).compareTo(other.is_set_i16_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_i16_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_list, other.i16_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_i64_list()).compareTo(other.is_set_i64_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_i64_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_list, other.i64_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OneOfEachBeans(");
    boolean first = true;

    sb.append("boolean_field:");
    sb.append(this.boolean_field);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_bite:");
    sb.append(this.a_bite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer16:");
    sb.append(this.integer16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer32:");
    sb.append(this.integer32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer64:");
    sb.append(this.integer64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_precision:");
    sb.append(this.double_precision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("some_characters:");
    if (this.some_characters == null) {
      sb.append("null");
    } else {
      sb.append(this.some_characters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("base64:");
    if (this.base64 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.base64, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byte_list:");
    if (this.byte_list == null) {
      sb.append("null");
    } else {
      sb.append(this.byte_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_list:");
    if (this.i16_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i16_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_list:");
    if (this.i64_list == null) {
      sb.append("null");
    } else {
      sb.append(this.i64_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OneOfEachBeansStandardSchemeFactory implements SchemeFactory {
    public OneOfEachBeansStandardScheme getScheme() {
      return new OneOfEachBeansStandardScheme();
    }
  }

  private static class OneOfEachBeansStandardScheme extends StandardScheme<OneOfEachBeans> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OneOfEachBeans struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOLEAN_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolean_field = iprot.readBool();
              struct.set_boolean_field_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // A_BITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.a_bite = iprot.readByte();
              struct.set_a_bite_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTEGER16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.integer16 = iprot.readI16();
              struct.set_integer16_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTEGER32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integer32 = iprot.readI32();
              struct.set_integer32_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTEGER64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.integer64 = iprot.readI64();
              struct.set_integer64_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_precision = iprot.readDouble();
              struct.set_double_precision_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SOME_CHARACTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.some_characters = iprot.readString();
              struct.set_some_characters_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BASE64
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.base64 = iprot.readBinary();
              struct.set_base64_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BYTE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.byte_list = new ArrayList<Byte>(_list0.size);
                byte _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readByte();
                  struct.byte_list.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_byte_list_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // I16_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.i16_list = new ArrayList<Short>(_list3.size);
                short _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI16();
                  struct.i16_list.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.set_i16_list_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // I64_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.i64_list = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.i64_list.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.set_i64_list_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OneOfEachBeans struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOLEAN_FIELD_FIELD_DESC);
      oprot.writeBool(struct.boolean_field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_BITE_FIELD_DESC);
      oprot.writeByte(struct.a_bite);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER16_FIELD_DESC);
      oprot.writeI16(struct.integer16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER32_FIELD_DESC);
      oprot.writeI32(struct.integer32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER64_FIELD_DESC);
      oprot.writeI64(struct.integer64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_PRECISION_FIELD_DESC);
      oprot.writeDouble(struct.double_precision);
      oprot.writeFieldEnd();
      if (struct.some_characters != null) {
        oprot.writeFieldBegin(SOME_CHARACTERS_FIELD_DESC);
        oprot.writeString(struct.some_characters);
        oprot.writeFieldEnd();
      }
      if (struct.base64 != null) {
        oprot.writeFieldBegin(BASE64_FIELD_DESC);
        oprot.writeBinary(struct.base64);
        oprot.writeFieldEnd();
      }
      if (struct.byte_list != null) {
        oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byte_list.size()));
          for (byte _iter9 : struct.byte_list)
          {
            oprot.writeByte(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i16_list != null) {
        oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.i16_list.size()));
          for (short _iter10 : struct.i16_list)
          {
            oprot.writeI16(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.i64_list != null) {
        oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64_list.size()));
          for (long _iter11 : struct.i64_list)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OneOfEachBeansTupleSchemeFactory implements SchemeFactory {
    public OneOfEachBeansTupleScheme getScheme() {
      return new OneOfEachBeansTupleScheme();
    }
  }

  private static class OneOfEachBeansTupleScheme extends TupleScheme<OneOfEachBeans> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OneOfEachBeans struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_boolean_field()) {
        optionals.set(0);
      }
      if (struct.is_set_a_bite()) {
        optionals.set(1);
      }
      if (struct.is_set_integer16()) {
        optionals.set(2);
      }
      if (struct.is_set_integer32()) {
        optionals.set(3);
      }
      if (struct.is_set_integer64()) {
        optionals.set(4);
      }
      if (struct.is_set_double_precision()) {
        optionals.set(5);
      }
      if (struct.is_set_some_characters()) {
        optionals.set(6);
      }
      if (struct.is_set_base64()) {
        optionals.set(7);
      }
      if (struct.is_set_byte_list()) {
        optionals.set(8);
      }
      if (struct.is_set_i16_list()) {
        optionals.set(9);
      }
      if (struct.is_set_i64_list()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.is_set_boolean_field()) {
        oprot.writeBool(struct.boolean_field);
      }
      if (struct.is_set_a_bite()) {
        oprot.writeByte(struct.a_bite);
      }
      if (struct.is_set_integer16()) {
        oprot.writeI16(struct.integer16);
      }
      if (struct.is_set_integer32()) {
        oprot.writeI32(struct.integer32);
      }
      if (struct.is_set_integer64()) {
        oprot.writeI64(struct.integer64);
      }
      if (struct.is_set_double_precision()) {
        oprot.writeDouble(struct.double_precision);
      }
      if (struct.is_set_some_characters()) {
        oprot.writeString(struct.some_characters);
      }
      if (struct.is_set_base64()) {
        oprot.writeBinary(struct.base64);
      }
      if (struct.is_set_byte_list()) {
        {
          oprot.writeI32(struct.byte_list.size());
          for (byte _iter12 : struct.byte_list)
          {
            oprot.writeByte(_iter12);
          }
        }
      }
      if (struct.is_set_i16_list()) {
        {
          oprot.writeI32(struct.i16_list.size());
          for (short _iter13 : struct.i16_list)
          {
            oprot.writeI16(_iter13);
          }
        }
      }
      if (struct.is_set_i64_list()) {
        {
          oprot.writeI32(struct.i64_list.size());
          for (long _iter14 : struct.i64_list)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OneOfEachBeans struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.boolean_field = iprot.readBool();
        struct.set_boolean_field_isSet(true);
      }
      if (incoming.get(1)) {
        struct.a_bite = iprot.readByte();
        struct.set_a_bite_isSet(true);
      }
      if (incoming.get(2)) {
        struct.integer16 = iprot.readI16();
        struct.set_integer16_isSet(true);
      }
      if (incoming.get(3)) {
        struct.integer32 = iprot.readI32();
        struct.set_integer32_isSet(true);
      }
      if (incoming.get(4)) {
        struct.integer64 = iprot.readI64();
        struct.set_integer64_isSet(true);
      }
      if (incoming.get(5)) {
        struct.double_precision = iprot.readDouble();
        struct.set_double_precision_isSet(true);
      }
      if (incoming.get(6)) {
        struct.some_characters = iprot.readString();
        struct.set_some_characters_isSet(true);
      }
      if (incoming.get(7)) {
        struct.base64 = iprot.readBinary();
        struct.set_base64_isSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byte_list = new ArrayList<Byte>(_list15.size);
          byte _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readByte();
            struct.byte_list.add(_elem16);
          }
        }
        struct.set_byte_list_isSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.i16_list = new ArrayList<Short>(_list18.size);
          short _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI16();
            struct.i16_list.add(_elem19);
          }
        }
        struct.set_i16_list_isSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.i64_list = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.i64_list.add(_elem22);
          }
        }
        struct.set_i64_list_isSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

