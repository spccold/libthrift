/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test.fullcamel;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class OneOfEachZZ implements org.apache.thrift.TBase<OneOfEachZZ, OneOfEachZZ._Fields>, java.io.Serializable, Cloneable, Comparable<OneOfEachZZ> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OneOfEachZZ");

  private static final org.apache.thrift.protocol.TField IM_TRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("im_true", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IM_FALSE_FIELD_DESC = new org.apache.thrift.protocol.TField("im_false", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField A_BITE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_bite", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField INTEGER16_FIELD_DESC = new org.apache.thrift.protocol.TField("integer16", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField INTEGER32_FIELD_DESC = new org.apache.thrift.protocol.TField("integer32", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INTEGER64_FIELD_DESC = new org.apache.thrift.protocol.TField("integer64", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("double_precision", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SOME_CHARACTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("some_characters", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ZOMG_UNICODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zomg_unicode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField WHAT_WHO_FIELD_DESC = new org.apache.thrift.protocol.TField("what_who", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new OneOfEachZZStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new OneOfEachZZTupleSchemeFactory();

  public boolean im_true; // required
  public boolean im_false; // required
  public byte a_bite; // required
  public short integer16; // required
  public int integer32; // required
  public long integer64; // required
  public double double_precision; // required
  public String some_characters; // required
  public String zomg_unicode; // required
  public boolean what_who; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IM_TRUE((short)1, "im_true"),
    IM_FALSE((short)2, "im_false"),
    A_BITE((short)3, "a_bite"),
    INTEGER16((short)4, "integer16"),
    INTEGER32((short)5, "integer32"),
    INTEGER64((short)6, "integer64"),
    DOUBLE_PRECISION((short)7, "double_precision"),
    SOME_CHARACTERS((short)8, "some_characters"),
    ZOMG_UNICODE((short)9, "zomg_unicode"),
    WHAT_WHO((short)10, "what_who");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IM_TRUE
          return IM_TRUE;
        case 2: // IM_FALSE
          return IM_FALSE;
        case 3: // A_BITE
          return A_BITE;
        case 4: // INTEGER16
          return INTEGER16;
        case 5: // INTEGER32
          return INTEGER32;
        case 6: // INTEGER64
          return INTEGER64;
        case 7: // DOUBLE_PRECISION
          return DOUBLE_PRECISION;
        case 8: // SOME_CHARACTERS
          return SOME_CHARACTERS;
        case 9: // ZOMG_UNICODE
          return ZOMG_UNICODE;
        case 10: // WHAT_WHO
          return WHAT_WHO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IM_TRUE_ISSET_ID = 0;
  private static final int __IM_FALSE_ISSET_ID = 1;
  private static final int __A_BITE_ISSET_ID = 2;
  private static final int __INTEGER16_ISSET_ID = 3;
  private static final int __INTEGER32_ISSET_ID = 4;
  private static final int __INTEGER64_ISSET_ID = 5;
  private static final int __DOUBLE_PRECISION_ISSET_ID = 6;
  private static final int __WHAT_WHO_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IM_TRUE, new org.apache.thrift.meta_data.FieldMetaData("im_true", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IM_FALSE, new org.apache.thrift.meta_data.FieldMetaData("im_false", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.A_BITE, new org.apache.thrift.meta_data.FieldMetaData("a_bite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INTEGER16, new org.apache.thrift.meta_data.FieldMetaData("integer16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INTEGER32, new org.apache.thrift.meta_data.FieldMetaData("integer32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTEGER64, new org.apache.thrift.meta_data.FieldMetaData("integer64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("double_precision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOME_CHARACTERS, new org.apache.thrift.meta_data.FieldMetaData("some_characters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZOMG_UNICODE, new org.apache.thrift.meta_data.FieldMetaData("zomg_unicode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHAT_WHO, new org.apache.thrift.meta_data.FieldMetaData("what_who", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneOfEachZZ.class, metaDataMap);
  }

  public OneOfEachZZ() {
  }

  public OneOfEachZZ(
    boolean im_true,
    boolean im_false,
    byte a_bite,
    short integer16,
    int integer32,
    long integer64,
    double double_precision,
    String some_characters,
    String zomg_unicode,
    boolean what_who)
  {
    this();
    this.im_true = im_true;
    setImTrueIsSet(true);
    this.im_false = im_false;
    setImFalseIsSet(true);
    this.a_bite = a_bite;
    setABiteIsSet(true);
    this.integer16 = integer16;
    setInteger16IsSet(true);
    this.integer32 = integer32;
    setInteger32IsSet(true);
    this.integer64 = integer64;
    setInteger64IsSet(true);
    this.double_precision = double_precision;
    setDoublePrecisionIsSet(true);
    this.some_characters = some_characters;
    this.zomg_unicode = zomg_unicode;
    this.what_who = what_who;
    setWhatWhoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OneOfEachZZ(OneOfEachZZ other) {
    __isset_bitfield = other.__isset_bitfield;
    this.im_true = other.im_true;
    this.im_false = other.im_false;
    this.a_bite = other.a_bite;
    this.integer16 = other.integer16;
    this.integer32 = other.integer32;
    this.integer64 = other.integer64;
    this.double_precision = other.double_precision;
    if (other.isSetSomeCharacters()) {
      this.some_characters = other.some_characters;
    }
    if (other.isSetZomgUnicode()) {
      this.zomg_unicode = other.zomg_unicode;
    }
    this.what_who = other.what_who;
  }

  public OneOfEachZZ deepCopy() {
    return new OneOfEachZZ(this);
  }

  @Override
  public void clear() {
    setImTrueIsSet(false);
    this.im_true = false;
    setImFalseIsSet(false);
    this.im_false = false;
    setABiteIsSet(false);
    this.a_bite = 0;
    setInteger16IsSet(false);
    this.integer16 = 0;
    setInteger32IsSet(false);
    this.integer32 = 0;
    setInteger64IsSet(false);
    this.integer64 = 0;
    setDoublePrecisionIsSet(false);
    this.double_precision = 0.0;
    this.some_characters = null;
    this.zomg_unicode = null;
    setWhatWhoIsSet(false);
    this.what_who = false;
  }

  public boolean isImTrue() {
    return this.im_true;
  }

  public OneOfEachZZ setImTrue(boolean im_true) {
    this.im_true = im_true;
    setImTrueIsSet(true);
    return this;
  }

  public void unsetImTrue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IM_TRUE_ISSET_ID);
  }

  /** Returns true if field im_true is set (has been assigned a value) and false otherwise */
  public boolean isSetImTrue() {
    return EncodingUtils.testBit(__isset_bitfield, __IM_TRUE_ISSET_ID);
  }

  public void setImTrueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IM_TRUE_ISSET_ID, value);
  }

  public boolean isImFalse() {
    return this.im_false;
  }

  public OneOfEachZZ setImFalse(boolean im_false) {
    this.im_false = im_false;
    setImFalseIsSet(true);
    return this;
  }

  public void unsetImFalse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IM_FALSE_ISSET_ID);
  }

  /** Returns true if field im_false is set (has been assigned a value) and false otherwise */
  public boolean isSetImFalse() {
    return EncodingUtils.testBit(__isset_bitfield, __IM_FALSE_ISSET_ID);
  }

  public void setImFalseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IM_FALSE_ISSET_ID, value);
  }

  public byte getABite() {
    return this.a_bite;
  }

  public OneOfEachZZ setABite(byte a_bite) {
    this.a_bite = a_bite;
    setABiteIsSet(true);
    return this;
  }

  public void unsetABite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_BITE_ISSET_ID);
  }

  /** Returns true if field a_bite is set (has been assigned a value) and false otherwise */
  public boolean isSetABite() {
    return EncodingUtils.testBit(__isset_bitfield, __A_BITE_ISSET_ID);
  }

  public void setABiteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_BITE_ISSET_ID, value);
  }

  public short getInteger16() {
    return this.integer16;
  }

  public OneOfEachZZ setInteger16(short integer16) {
    this.integer16 = integer16;
    setInteger16IsSet(true);
    return this;
  }

  public void unsetInteger16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER16_ISSET_ID);
  }

  /** Returns true if field integer16 is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger16() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER16_ISSET_ID);
  }

  public void setInteger16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER16_ISSET_ID, value);
  }

  public int getInteger32() {
    return this.integer32;
  }

  public OneOfEachZZ setInteger32(int integer32) {
    this.integer32 = integer32;
    setInteger32IsSet(true);
    return this;
  }

  public void unsetInteger32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER32_ISSET_ID);
  }

  /** Returns true if field integer32 is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger32() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER32_ISSET_ID);
  }

  public void setInteger32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER32_ISSET_ID, value);
  }

  public long getInteger64() {
    return this.integer64;
  }

  public OneOfEachZZ setInteger64(long integer64) {
    this.integer64 = integer64;
    setInteger64IsSet(true);
    return this;
  }

  public void unsetInteger64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER64_ISSET_ID);
  }

  /** Returns true if field integer64 is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger64() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER64_ISSET_ID);
  }

  public void setInteger64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER64_ISSET_ID, value);
  }

  public double getDoublePrecision() {
    return this.double_precision;
  }

  public OneOfEachZZ setDoublePrecision(double double_precision) {
    this.double_precision = double_precision;
    setDoublePrecisionIsSet(true);
    return this;
  }

  public void unsetDoublePrecision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
  }

  /** Returns true if field double_precision is set (has been assigned a value) and false otherwise */
  public boolean isSetDoublePrecision() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
  }

  public void setDoublePrecisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID, value);
  }

  public String getSomeCharacters() {
    return this.some_characters;
  }

  public OneOfEachZZ setSomeCharacters(String some_characters) {
    this.some_characters = some_characters;
    return this;
  }

  public void unsetSomeCharacters() {
    this.some_characters = null;
  }

  /** Returns true if field some_characters is set (has been assigned a value) and false otherwise */
  public boolean isSetSomeCharacters() {
    return this.some_characters != null;
  }

  public void setSomeCharactersIsSet(boolean value) {
    if (!value) {
      this.some_characters = null;
    }
  }

  public String getZomgUnicode() {
    return this.zomg_unicode;
  }

  public OneOfEachZZ setZomgUnicode(String zomg_unicode) {
    this.zomg_unicode = zomg_unicode;
    return this;
  }

  public void unsetZomgUnicode() {
    this.zomg_unicode = null;
  }

  /** Returns true if field zomg_unicode is set (has been assigned a value) and false otherwise */
  public boolean isSetZomgUnicode() {
    return this.zomg_unicode != null;
  }

  public void setZomgUnicodeIsSet(boolean value) {
    if (!value) {
      this.zomg_unicode = null;
    }
  }

  public boolean isWhatWho() {
    return this.what_who;
  }

  public OneOfEachZZ setWhatWho(boolean what_who) {
    this.what_who = what_who;
    setWhatWhoIsSet(true);
    return this;
  }

  public void unsetWhatWho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WHAT_WHO_ISSET_ID);
  }

  /** Returns true if field what_who is set (has been assigned a value) and false otherwise */
  public boolean isSetWhatWho() {
    return EncodingUtils.testBit(__isset_bitfield, __WHAT_WHO_ISSET_ID);
  }

  public void setWhatWhoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WHAT_WHO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IM_TRUE:
      if (value == null) {
        unsetImTrue();
      } else {
        setImTrue((Boolean)value);
      }
      break;

    case IM_FALSE:
      if (value == null) {
        unsetImFalse();
      } else {
        setImFalse((Boolean)value);
      }
      break;

    case A_BITE:
      if (value == null) {
        unsetABite();
      } else {
        setABite((Byte)value);
      }
      break;

    case INTEGER16:
      if (value == null) {
        unsetInteger16();
      } else {
        setInteger16((Short)value);
      }
      break;

    case INTEGER32:
      if (value == null) {
        unsetInteger32();
      } else {
        setInteger32((Integer)value);
      }
      break;

    case INTEGER64:
      if (value == null) {
        unsetInteger64();
      } else {
        setInteger64((Long)value);
      }
      break;

    case DOUBLE_PRECISION:
      if (value == null) {
        unsetDoublePrecision();
      } else {
        setDoublePrecision((Double)value);
      }
      break;

    case SOME_CHARACTERS:
      if (value == null) {
        unsetSomeCharacters();
      } else {
        setSomeCharacters((String)value);
      }
      break;

    case ZOMG_UNICODE:
      if (value == null) {
        unsetZomgUnicode();
      } else {
        setZomgUnicode((String)value);
      }
      break;

    case WHAT_WHO:
      if (value == null) {
        unsetWhatWho();
      } else {
        setWhatWho((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IM_TRUE:
      return isImTrue();

    case IM_FALSE:
      return isImFalse();

    case A_BITE:
      return getABite();

    case INTEGER16:
      return getInteger16();

    case INTEGER32:
      return getInteger32();

    case INTEGER64:
      return getInteger64();

    case DOUBLE_PRECISION:
      return getDoublePrecision();

    case SOME_CHARACTERS:
      return getSomeCharacters();

    case ZOMG_UNICODE:
      return getZomgUnicode();

    case WHAT_WHO:
      return isWhatWho();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IM_TRUE:
      return isSetImTrue();
    case IM_FALSE:
      return isSetImFalse();
    case A_BITE:
      return isSetABite();
    case INTEGER16:
      return isSetInteger16();
    case INTEGER32:
      return isSetInteger32();
    case INTEGER64:
      return isSetInteger64();
    case DOUBLE_PRECISION:
      return isSetDoublePrecision();
    case SOME_CHARACTERS:
      return isSetSomeCharacters();
    case ZOMG_UNICODE:
      return isSetZomgUnicode();
    case WHAT_WHO:
      return isSetWhatWho();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OneOfEachZZ)
      return this.equals((OneOfEachZZ)that);
    return false;
  }

  public boolean equals(OneOfEachZZ that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_im_true = true;
    boolean that_present_im_true = true;
    if (this_present_im_true || that_present_im_true) {
      if (!(this_present_im_true && that_present_im_true))
        return false;
      if (this.im_true != that.im_true)
        return false;
    }

    boolean this_present_im_false = true;
    boolean that_present_im_false = true;
    if (this_present_im_false || that_present_im_false) {
      if (!(this_present_im_false && that_present_im_false))
        return false;
      if (this.im_false != that.im_false)
        return false;
    }

    boolean this_present_a_bite = true;
    boolean that_present_a_bite = true;
    if (this_present_a_bite || that_present_a_bite) {
      if (!(this_present_a_bite && that_present_a_bite))
        return false;
      if (this.a_bite != that.a_bite)
        return false;
    }

    boolean this_present_integer16 = true;
    boolean that_present_integer16 = true;
    if (this_present_integer16 || that_present_integer16) {
      if (!(this_present_integer16 && that_present_integer16))
        return false;
      if (this.integer16 != that.integer16)
        return false;
    }

    boolean this_present_integer32 = true;
    boolean that_present_integer32 = true;
    if (this_present_integer32 || that_present_integer32) {
      if (!(this_present_integer32 && that_present_integer32))
        return false;
      if (this.integer32 != that.integer32)
        return false;
    }

    boolean this_present_integer64 = true;
    boolean that_present_integer64 = true;
    if (this_present_integer64 || that_present_integer64) {
      if (!(this_present_integer64 && that_present_integer64))
        return false;
      if (this.integer64 != that.integer64)
        return false;
    }

    boolean this_present_double_precision = true;
    boolean that_present_double_precision = true;
    if (this_present_double_precision || that_present_double_precision) {
      if (!(this_present_double_precision && that_present_double_precision))
        return false;
      if (this.double_precision != that.double_precision)
        return false;
    }

    boolean this_present_some_characters = true && this.isSetSomeCharacters();
    boolean that_present_some_characters = true && that.isSetSomeCharacters();
    if (this_present_some_characters || that_present_some_characters) {
      if (!(this_present_some_characters && that_present_some_characters))
        return false;
      if (!this.some_characters.equals(that.some_characters))
        return false;
    }

    boolean this_present_zomg_unicode = true && this.isSetZomgUnicode();
    boolean that_present_zomg_unicode = true && that.isSetZomgUnicode();
    if (this_present_zomg_unicode || that_present_zomg_unicode) {
      if (!(this_present_zomg_unicode && that_present_zomg_unicode))
        return false;
      if (!this.zomg_unicode.equals(that.zomg_unicode))
        return false;
    }

    boolean this_present_what_who = true;
    boolean that_present_what_who = true;
    if (this_present_what_who || that_present_what_who) {
      if (!(this_present_what_who && that_present_what_who))
        return false;
      if (this.what_who != that.what_who)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((im_true) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((im_false) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (a_bite);

    hashCode = hashCode * 8191 + integer16;

    hashCode = hashCode * 8191 + integer32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(integer64);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(double_precision);

    hashCode = hashCode * 8191 + ((isSetSomeCharacters()) ? 131071 : 524287);
    if (isSetSomeCharacters())
      hashCode = hashCode * 8191 + some_characters.hashCode();

    hashCode = hashCode * 8191 + ((isSetZomgUnicode()) ? 131071 : 524287);
    if (isSetZomgUnicode())
      hashCode = hashCode * 8191 + zomg_unicode.hashCode();

    hashCode = hashCode * 8191 + ((what_who) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(OneOfEachZZ other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetImTrue()).compareTo(other.isSetImTrue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImTrue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_true, other.im_true);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImFalse()).compareTo(other.isSetImFalse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImFalse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_false, other.im_false);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetABite()).compareTo(other.isSetABite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetABite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_bite, other.a_bite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger16()).compareTo(other.isSetInteger16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer16, other.integer16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger32()).compareTo(other.isSetInteger32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer32, other.integer32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger64()).compareTo(other.isSetInteger64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer64, other.integer64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoublePrecision()).compareTo(other.isSetDoublePrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoublePrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_precision, other.double_precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSomeCharacters()).compareTo(other.isSetSomeCharacters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSomeCharacters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.some_characters, other.some_characters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZomgUnicode()).compareTo(other.isSetZomgUnicode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZomgUnicode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zomg_unicode, other.zomg_unicode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhatWho()).compareTo(other.isSetWhatWho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhatWho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.what_who, other.what_who);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OneOfEachZZ(");
    boolean first = true;

    sb.append("im_true:");
    sb.append(this.im_true);
    first = false;
    if (!first) sb.append(", ");
    sb.append("im_false:");
    sb.append(this.im_false);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_bite:");
    sb.append(this.a_bite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer16:");
    sb.append(this.integer16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer32:");
    sb.append(this.integer32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer64:");
    sb.append(this.integer64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_precision:");
    sb.append(this.double_precision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("some_characters:");
    if (this.some_characters == null) {
      sb.append("null");
    } else {
      sb.append(this.some_characters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zomg_unicode:");
    if (this.zomg_unicode == null) {
      sb.append("null");
    } else {
      sb.append(this.zomg_unicode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("what_who:");
    sb.append(this.what_who);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OneOfEachZZStandardSchemeFactory implements SchemeFactory {
    public OneOfEachZZStandardScheme getScheme() {
      return new OneOfEachZZStandardScheme();
    }
  }

  private static class OneOfEachZZStandardScheme extends StandardScheme<OneOfEachZZ> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OneOfEachZZ struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IM_TRUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.im_true = iprot.readBool();
              struct.setImTrueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IM_FALSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.im_false = iprot.readBool();
              struct.setImFalseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A_BITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.a_bite = iprot.readByte();
              struct.setABiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTEGER16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.integer16 = iprot.readI16();
              struct.setInteger16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTEGER32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integer32 = iprot.readI32();
              struct.setInteger32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTEGER64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.integer64 = iprot.readI64();
              struct.setInteger64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_precision = iprot.readDouble();
              struct.setDoublePrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOME_CHARACTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.some_characters = iprot.readString();
              struct.setSomeCharactersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ZOMG_UNICODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zomg_unicode = iprot.readString();
              struct.setZomgUnicodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WHAT_WHO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.what_who = iprot.readBool();
              struct.setWhatWhoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OneOfEachZZ struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IM_TRUE_FIELD_DESC);
      oprot.writeBool(struct.im_true);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IM_FALSE_FIELD_DESC);
      oprot.writeBool(struct.im_false);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_BITE_FIELD_DESC);
      oprot.writeByte(struct.a_bite);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER16_FIELD_DESC);
      oprot.writeI16(struct.integer16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER32_FIELD_DESC);
      oprot.writeI32(struct.integer32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER64_FIELD_DESC);
      oprot.writeI64(struct.integer64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_PRECISION_FIELD_DESC);
      oprot.writeDouble(struct.double_precision);
      oprot.writeFieldEnd();
      if (struct.some_characters != null) {
        oprot.writeFieldBegin(SOME_CHARACTERS_FIELD_DESC);
        oprot.writeString(struct.some_characters);
        oprot.writeFieldEnd();
      }
      if (struct.zomg_unicode != null) {
        oprot.writeFieldBegin(ZOMG_UNICODE_FIELD_DESC);
        oprot.writeString(struct.zomg_unicode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WHAT_WHO_FIELD_DESC);
      oprot.writeBool(struct.what_who);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OneOfEachZZTupleSchemeFactory implements SchemeFactory {
    public OneOfEachZZTupleScheme getScheme() {
      return new OneOfEachZZTupleScheme();
    }
  }

  private static class OneOfEachZZTupleScheme extends TupleScheme<OneOfEachZZ> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OneOfEachZZ struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetImTrue()) {
        optionals.set(0);
      }
      if (struct.isSetImFalse()) {
        optionals.set(1);
      }
      if (struct.isSetABite()) {
        optionals.set(2);
      }
      if (struct.isSetInteger16()) {
        optionals.set(3);
      }
      if (struct.isSetInteger32()) {
        optionals.set(4);
      }
      if (struct.isSetInteger64()) {
        optionals.set(5);
      }
      if (struct.isSetDoublePrecision()) {
        optionals.set(6);
      }
      if (struct.isSetSomeCharacters()) {
        optionals.set(7);
      }
      if (struct.isSetZomgUnicode()) {
        optionals.set(8);
      }
      if (struct.isSetWhatWho()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetImTrue()) {
        oprot.writeBool(struct.im_true);
      }
      if (struct.isSetImFalse()) {
        oprot.writeBool(struct.im_false);
      }
      if (struct.isSetABite()) {
        oprot.writeByte(struct.a_bite);
      }
      if (struct.isSetInteger16()) {
        oprot.writeI16(struct.integer16);
      }
      if (struct.isSetInteger32()) {
        oprot.writeI32(struct.integer32);
      }
      if (struct.isSetInteger64()) {
        oprot.writeI64(struct.integer64);
      }
      if (struct.isSetDoublePrecision()) {
        oprot.writeDouble(struct.double_precision);
      }
      if (struct.isSetSomeCharacters()) {
        oprot.writeString(struct.some_characters);
      }
      if (struct.isSetZomgUnicode()) {
        oprot.writeString(struct.zomg_unicode);
      }
      if (struct.isSetWhatWho()) {
        oprot.writeBool(struct.what_who);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OneOfEachZZ struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.im_true = iprot.readBool();
        struct.setImTrueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.im_false = iprot.readBool();
        struct.setImFalseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.a_bite = iprot.readByte();
        struct.setABiteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.integer16 = iprot.readI16();
        struct.setInteger16IsSet(true);
      }
      if (incoming.get(4)) {
        struct.integer32 = iprot.readI32();
        struct.setInteger32IsSet(true);
      }
      if (incoming.get(5)) {
        struct.integer64 = iprot.readI64();
        struct.setInteger64IsSet(true);
      }
      if (incoming.get(6)) {
        struct.double_precision = iprot.readDouble();
        struct.setDoublePrecisionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.some_characters = iprot.readString();
        struct.setSomeCharactersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.zomg_unicode = iprot.readString();
        struct.setZomgUnicodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.what_who = iprot.readBool();
        struct.setWhatWhoIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

