/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-10-11")
public class Reuse implements org.apache.thrift.TBase<Reuse, Reuse._Fields>, java.io.Serializable, Cloneable, Comparable<Reuse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Reuse");

  private static final org.apache.thrift.protocol.TField VAL1_FIELD_DESC = new org.apache.thrift.protocol.TField("val1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VAL2_FIELD_DESC = new org.apache.thrift.protocol.TField("val2", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ReuseStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ReuseTupleSchemeFactory();

  public int val1; // required
  public Set<String> val2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VAL1((short)1, "val1"),
    VAL2((short)2, "val2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VAL1
          return VAL1;
        case 2: // VAL2
          return VAL2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VAL1_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VAL1, new org.apache.thrift.meta_data.FieldMetaData("val1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VAL2, new org.apache.thrift.meta_data.FieldMetaData("val2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Reuse.class, metaDataMap);
  }

  public Reuse() {
  }

  public Reuse(
    int val1,
    Set<String> val2)
  {
    this();
    this.val1 = val1;
    setVal1IsSet(true);
    this.val2 = val2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Reuse(Reuse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.val1 = other.val1;
    if (other.isSetVal2()) {
      Set<String> __this__val2 = new HashSet<String>(other.val2);
      this.val2 = __this__val2;
    }
  }

  public Reuse deepCopy() {
    return new Reuse(this);
  }

  @Override
  public void clear() {
    setVal1IsSet(false);
    this.val1 = 0;
    if (this.val2 != null) {
      this.val2.clear();
    }
  }

  public int getVal1() {
    return this.val1;
  }

  public Reuse setVal1(int val1) {
    this.val1 = val1;
    setVal1IsSet(true);
    return this;
  }

  public void unsetVal1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VAL1_ISSET_ID);
  }

  /** Returns true if field val1 is set (has been assigned a value) and false otherwise */
  public boolean isSetVal1() {
    return EncodingUtils.testBit(__isset_bitfield, __VAL1_ISSET_ID);
  }

  public void setVal1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VAL1_ISSET_ID, value);
  }

  public int getVal2Size() {
    return (this.val2 == null) ? 0 : this.val2.size();
  }

  public java.util.Iterator<String> getVal2Iterator() {
    return (this.val2 == null) ? null : this.val2.iterator();
  }

  public void addToVal2(String elem) {
    if (this.val2 == null) {
      this.val2 = new HashSet<String>();
    }
    this.val2.add(elem);
  }

  public Set<String> getVal2() {
    return this.val2;
  }

  public Reuse setVal2(Set<String> val2) {
    this.val2 = val2;
    return this;
  }

  public void unsetVal2() {
    this.val2 = null;
  }

  /** Returns true if field val2 is set (has been assigned a value) and false otherwise */
  public boolean isSetVal2() {
    return this.val2 != null;
  }

  public void setVal2IsSet(boolean value) {
    if (!value) {
      this.val2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VAL1:
      if (value == null) {
        unsetVal1();
      } else {
        setVal1((Integer)value);
      }
      break;

    case VAL2:
      if (value == null) {
        unsetVal2();
      } else {
        setVal2((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VAL1:
      return getVal1();

    case VAL2:
      return getVal2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VAL1:
      return isSetVal1();
    case VAL2:
      return isSetVal2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Reuse)
      return this.equals((Reuse)that);
    return false;
  }

  public boolean equals(Reuse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_val1 = true;
    boolean that_present_val1 = true;
    if (this_present_val1 || that_present_val1) {
      if (!(this_present_val1 && that_present_val1))
        return false;
      if (this.val1 != that.val1)
        return false;
    }

    boolean this_present_val2 = true && this.isSetVal2();
    boolean that_present_val2 = true && that.isSetVal2();
    if (this_present_val2 || that_present_val2) {
      if (!(this_present_val2 && that_present_val2))
        return false;
      if (!this.val2.equals(that.val2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + val1;

    hashCode = hashCode * 8191 + ((isSetVal2()) ? 131071 : 524287);
    if (isSetVal2())
      hashCode = hashCode * 8191 + val2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Reuse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVal1()).compareTo(other.isSetVal1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVal1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val1, other.val1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVal2()).compareTo(other.isSetVal2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVal2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val2, other.val2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Reuse(");
    boolean first = true;

    sb.append("val1:");
    sb.append(this.val1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("val2:");
    if (this.val2 == null) {
      sb.append("null");
    } else {
      sb.append(this.val2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReuseStandardSchemeFactory implements SchemeFactory {
    public ReuseStandardScheme getScheme() {
      return new ReuseStandardScheme();
    }
  }

  private static class ReuseStandardScheme extends StandardScheme<Reuse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Reuse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VAL1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.val1 = iprot.readI32();
              struct.setVal1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VAL2
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                if (struct.val2 == null) {
                  struct.val2 = new HashSet<String>(2*_set0.size);
                }
                String _elem1 = null;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.val2.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setVal2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Reuse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VAL1_FIELD_DESC);
      oprot.writeI32(struct.val1);
      oprot.writeFieldEnd();
      if (struct.val2 != null) {
        oprot.writeFieldBegin(VAL2_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.val2.size()));
          for (String _iter3 : struct.val2)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReuseTupleSchemeFactory implements SchemeFactory {
    public ReuseTupleScheme getScheme() {
      return new ReuseTupleScheme();
    }
  }

  private static class ReuseTupleScheme extends TupleScheme<Reuse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Reuse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVal1()) {
        optionals.set(0);
      }
      if (struct.isSetVal2()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVal1()) {
        oprot.writeI32(struct.val1);
      }
      if (struct.isSetVal2()) {
        {
          oprot.writeI32(struct.val2.size());
          for (String _iter4 : struct.val2)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Reuse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.val1 = iprot.readI32();
        struct.setVal1IsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          if (struct.val2 == null) {
            struct.val2 = new HashSet<String>(2*_set5.size);
          }
          String _elem6 = null;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.val2.add(_elem6);
          }
        }
        struct.setVal2IsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

